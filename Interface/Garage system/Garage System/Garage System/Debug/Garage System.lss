
Garage System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cd8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00800060  00000cd8  00000d4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000135c  00000000  00000000  00000db0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000045c  00000000  00000000  0000210c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00002568  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cc2  00000000  00000000  00002648  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003e4  00000000  00000000  0000330a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007f9  00000000  00000000  000036ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ec  00000000  00000000  00003ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f0  00000000  00000000  000040d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000838  00000000  00000000  000043c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ed       	ldi	r30, 0xD8	; 216
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3c       	cpi	r26, 0xC4	; 196
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 ec       	ldi	r26, 0xC4	; 196
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3c       	cpi	r26, 0xC4	; 196
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 37 03 	call	0x66e	; 0x66e <main>
  8a:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vset_pindir>:
#define F_CPU 8000000UL
#include <util/delay.h>
#include "std_macros.h"
void DIO_vset_pindir(unsigned char port,unsigned char pin,unsigned char dir)
{
switch(port)
  92:	84 34       	cpi	r24, 0x44	; 68
  94:	09 f4       	brne	.+2      	; 0x98 <DIO_vset_pindir+0x6>
  96:	71 c0       	rjmp	.+226    	; 0x17a <DIO_vset_pindir+0xe8>
  98:	85 34       	cpi	r24, 0x45	; 69
  9a:	48 f4       	brcc	.+18     	; 0xae <DIO_vset_pindir+0x1c>
  9c:	82 34       	cpi	r24, 0x42	; 66
  9e:	99 f1       	breq	.+102    	; 0x106 <DIO_vset_pindir+0x74>
  a0:	83 34       	cpi	r24, 0x43	; 67
  a2:	08 f0       	brcs	.+2      	; 0xa6 <DIO_vset_pindir+0x14>
  a4:	4d c0       	rjmp	.+154    	; 0x140 <DIO_vset_pindir+0xae>
  a6:	81 34       	cpi	r24, 0x41	; 65
  a8:	09 f0       	breq	.+2      	; 0xac <DIO_vset_pindir+0x1a>
  aa:	83 c0       	rjmp	.+262    	; 0x1b2 <DIO_vset_pindir+0x120>
  ac:	0f c0       	rjmp	.+30     	; 0xcc <DIO_vset_pindir+0x3a>
  ae:	82 36       	cpi	r24, 0x62	; 98
  b0:	51 f1       	breq	.+84     	; 0x106 <DIO_vset_pindir+0x74>
  b2:	83 36       	cpi	r24, 0x63	; 99
  b4:	20 f4       	brcc	.+8      	; 0xbe <DIO_vset_pindir+0x2c>
  b6:	81 36       	cpi	r24, 0x61	; 97
  b8:	09 f0       	breq	.+2      	; 0xbc <DIO_vset_pindir+0x2a>
  ba:	7b c0       	rjmp	.+246    	; 0x1b2 <DIO_vset_pindir+0x120>
  bc:	07 c0       	rjmp	.+14     	; 0xcc <DIO_vset_pindir+0x3a>
  be:	83 36       	cpi	r24, 0x63	; 99
  c0:	09 f4       	brne	.+2      	; 0xc4 <DIO_vset_pindir+0x32>
  c2:	3e c0       	rjmp	.+124    	; 0x140 <DIO_vset_pindir+0xae>
  c4:	84 36       	cpi	r24, 0x64	; 100
  c6:	09 f0       	breq	.+2      	; 0xca <DIO_vset_pindir+0x38>
  c8:	74 c0       	rjmp	.+232    	; 0x1b2 <DIO_vset_pindir+0x120>
  ca:	57 c0       	rjmp	.+174    	; 0x17a <DIO_vset_pindir+0xe8>
{
	case 'A':
	case 'a':
	if(dir==1)
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	69 f4       	brne	.+26     	; 0xea <DIO_vset_pindir+0x58>
	{
		SET_BIT(DDRA,pin);
  d0:	2a b3       	in	r18, 0x1a	; 26
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	ac 01       	movw	r20, r24
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_vset_pindir+0x4c>
  da:	44 0f       	add	r20, r20
  dc:	55 1f       	adc	r21, r21
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_vset_pindir+0x48>
  e2:	ba 01       	movw	r22, r20
  e4:	62 2b       	or	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
	} 
	else
	{
		CLR_BIT(DDRA,pin);
  ea:	2a b3       	in	r18, 0x1a	; 26
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	ac 01       	movw	r20, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_vset_pindir+0x66>
  f4:	44 0f       	add	r20, r20
  f6:	55 1f       	adc	r21, r21
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_vset_pindir+0x62>
  fc:	ba 01       	movw	r22, r20
  fe:	60 95       	com	r22
 100:	62 23       	and	r22, r18
 102:	6a bb       	out	0x1a, r22	; 26
 104:	08 95       	ret
	}
	break;
	case 'B':
	case 'b':
	if(dir==1)
 106:	41 30       	cpi	r20, 0x01	; 1
 108:	69 f4       	brne	.+26     	; 0x124 <DIO_vset_pindir+0x92>
	{
		SET_BIT(DDRB,pin);
 10a:	27 b3       	in	r18, 0x17	; 23
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	ac 01       	movw	r20, r24
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_vset_pindir+0x86>
 114:	44 0f       	add	r20, r20
 116:	55 1f       	adc	r21, r21
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_vset_pindir+0x82>
 11c:	ba 01       	movw	r22, r20
 11e:	62 2b       	or	r22, r18
 120:	67 bb       	out	0x17, r22	; 23
 122:	08 95       	ret
	}
	else
	{
		CLR_BIT(DDRB,pin);
 124:	27 b3       	in	r18, 0x17	; 23
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_vset_pindir+0xa0>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_vset_pindir+0x9c>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	67 bb       	out	0x17, r22	; 23
 13e:	08 95       	ret
	}
	break;
	case 'C':
	case 'c':
	if(dir==1)
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	69 f4       	brne	.+26     	; 0x15e <DIO_vset_pindir+0xcc>
	{
		SET_BIT(DDRC,pin);
 144:	24 b3       	in	r18, 0x14	; 20
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	ac 01       	movw	r20, r24
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_vset_pindir+0xc0>
 14e:	44 0f       	add	r20, r20
 150:	55 1f       	adc	r21, r21
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_vset_pindir+0xbc>
 156:	ba 01       	movw	r22, r20
 158:	62 2b       	or	r22, r18
 15a:	64 bb       	out	0x14, r22	; 20
 15c:	08 95       	ret
	}
	else
	{
		CLR_BIT(DDRC,pin);
 15e:	24 b3       	in	r18, 0x14	; 20
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	ac 01       	movw	r20, r24
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_vset_pindir+0xda>
 168:	44 0f       	add	r20, r20
 16a:	55 1f       	adc	r21, r21
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_vset_pindir+0xd6>
 170:	ba 01       	movw	r22, r20
 172:	60 95       	com	r22
 174:	62 23       	and	r22, r18
 176:	64 bb       	out	0x14, r22	; 20
 178:	08 95       	ret
	}
	break;
	case 'D':
	case 'd':
	if(dir==1)
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	69 f4       	brne	.+26     	; 0x198 <DIO_vset_pindir+0x106>
	{
		SET_BIT(DDRD,pin);
 17e:	21 b3       	in	r18, 0x11	; 17
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	ac 01       	movw	r20, r24
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_vset_pindir+0xfa>
 188:	44 0f       	add	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_vset_pindir+0xf6>
 190:	ba 01       	movw	r22, r20
 192:	62 2b       	or	r22, r18
 194:	61 bb       	out	0x11, r22	; 17
 196:	08 95       	ret
	}
	else
	{
		CLR_BIT(DDRD,pin);
 198:	21 b3       	in	r18, 0x11	; 17
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	ac 01       	movw	r20, r24
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_vset_pindir+0x114>
 1a2:	44 0f       	add	r20, r20
 1a4:	55 1f       	adc	r21, r21
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_vset_pindir+0x110>
 1aa:	ba 01       	movw	r22, r20
 1ac:	60 95       	com	r22
 1ae:	62 23       	and	r22, r18
 1b0:	61 bb       	out	0x11, r22	; 17
 1b2:	08 95       	ret

000001b4 <DIO_vwrite_pin>:
	}
	break;
}}
void DIO_vwrite_pin(unsigned char port,unsigned char pin,unsigned char val)
{
	switch(port)
 1b4:	84 34       	cpi	r24, 0x44	; 68
 1b6:	09 f4       	brne	.+2      	; 0x1ba <DIO_vwrite_pin+0x6>
 1b8:	71 c0       	rjmp	.+226    	; 0x29c <DIO_vwrite_pin+0xe8>
 1ba:	85 34       	cpi	r24, 0x45	; 69
 1bc:	48 f4       	brcc	.+18     	; 0x1d0 <DIO_vwrite_pin+0x1c>
 1be:	82 34       	cpi	r24, 0x42	; 66
 1c0:	99 f1       	breq	.+102    	; 0x228 <DIO_vwrite_pin+0x74>
 1c2:	83 34       	cpi	r24, 0x43	; 67
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <DIO_vwrite_pin+0x14>
 1c6:	4d c0       	rjmp	.+154    	; 0x262 <DIO_vwrite_pin+0xae>
 1c8:	81 34       	cpi	r24, 0x41	; 65
 1ca:	09 f0       	breq	.+2      	; 0x1ce <DIO_vwrite_pin+0x1a>
 1cc:	83 c0       	rjmp	.+262    	; 0x2d4 <DIO_vwrite_pin+0x120>
 1ce:	0f c0       	rjmp	.+30     	; 0x1ee <DIO_vwrite_pin+0x3a>
 1d0:	82 36       	cpi	r24, 0x62	; 98
 1d2:	51 f1       	breq	.+84     	; 0x228 <DIO_vwrite_pin+0x74>
 1d4:	83 36       	cpi	r24, 0x63	; 99
 1d6:	20 f4       	brcc	.+8      	; 0x1e0 <DIO_vwrite_pin+0x2c>
 1d8:	81 36       	cpi	r24, 0x61	; 97
 1da:	09 f0       	breq	.+2      	; 0x1de <DIO_vwrite_pin+0x2a>
 1dc:	7b c0       	rjmp	.+246    	; 0x2d4 <DIO_vwrite_pin+0x120>
 1de:	07 c0       	rjmp	.+14     	; 0x1ee <DIO_vwrite_pin+0x3a>
 1e0:	83 36       	cpi	r24, 0x63	; 99
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <DIO_vwrite_pin+0x32>
 1e4:	3e c0       	rjmp	.+124    	; 0x262 <DIO_vwrite_pin+0xae>
 1e6:	84 36       	cpi	r24, 0x64	; 100
 1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_vwrite_pin+0x38>
 1ea:	74 c0       	rjmp	.+232    	; 0x2d4 <DIO_vwrite_pin+0x120>
 1ec:	57 c0       	rjmp	.+174    	; 0x29c <DIO_vwrite_pin+0xe8>
	{
		case 'A':
		case 'a':
		if(val==1)
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	69 f4       	brne	.+26     	; 0x20c <DIO_vwrite_pin+0x58>
		{
			SET_BIT(PORTA,pin);
 1f2:	2b b3       	in	r18, 0x1b	; 27
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	ac 01       	movw	r20, r24
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_vwrite_pin+0x4c>
 1fc:	44 0f       	add	r20, r20
 1fe:	55 1f       	adc	r21, r21
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_vwrite_pin+0x48>
 204:	ba 01       	movw	r22, r20
 206:	62 2b       	or	r22, r18
 208:	6b bb       	out	0x1b, r22	; 27
 20a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pin);
 20c:	2b b3       	in	r18, 0x1b	; 27
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	ac 01       	movw	r20, r24
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_vwrite_pin+0x66>
 216:	44 0f       	add	r20, r20
 218:	55 1f       	adc	r21, r21
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_vwrite_pin+0x62>
 21e:	ba 01       	movw	r22, r20
 220:	60 95       	com	r22
 222:	62 23       	and	r22, r18
 224:	6b bb       	out	0x1b, r22	; 27
 226:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if(val==1)
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	69 f4       	brne	.+26     	; 0x246 <DIO_vwrite_pin+0x92>
		{
			SET_BIT(PORTB,pin);
 22c:	28 b3       	in	r18, 0x18	; 24
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	ac 01       	movw	r20, r24
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_vwrite_pin+0x86>
 236:	44 0f       	add	r20, r20
 238:	55 1f       	adc	r21, r21
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_vwrite_pin+0x82>
 23e:	ba 01       	movw	r22, r20
 240:	62 2b       	or	r22, r18
 242:	68 bb       	out	0x18, r22	; 24
 244:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pin);
 246:	28 b3       	in	r18, 0x18	; 24
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	ac 01       	movw	r20, r24
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_vwrite_pin+0xa0>
 250:	44 0f       	add	r20, r20
 252:	55 1f       	adc	r21, r21
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_vwrite_pin+0x9c>
 258:	ba 01       	movw	r22, r20
 25a:	60 95       	com	r22
 25c:	62 23       	and	r22, r18
 25e:	68 bb       	out	0x18, r22	; 24
 260:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if(val==1)
 262:	41 30       	cpi	r20, 0x01	; 1
 264:	69 f4       	brne	.+26     	; 0x280 <DIO_vwrite_pin+0xcc>
		{
			SET_BIT(PORTC,pin);
 266:	25 b3       	in	r18, 0x15	; 21
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	ac 01       	movw	r20, r24
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_vwrite_pin+0xc0>
 270:	44 0f       	add	r20, r20
 272:	55 1f       	adc	r21, r21
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_vwrite_pin+0xbc>
 278:	ba 01       	movw	r22, r20
 27a:	62 2b       	or	r22, r18
 27c:	65 bb       	out	0x15, r22	; 21
 27e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pin);
 280:	25 b3       	in	r18, 0x15	; 21
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	ac 01       	movw	r20, r24
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_vwrite_pin+0xda>
 28a:	44 0f       	add	r20, r20
 28c:	55 1f       	adc	r21, r21
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_vwrite_pin+0xd6>
 292:	ba 01       	movw	r22, r20
 294:	60 95       	com	r22
 296:	62 23       	and	r22, r18
 298:	65 bb       	out	0x15, r22	; 21
 29a:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if(val==1)
 29c:	41 30       	cpi	r20, 0x01	; 1
 29e:	69 f4       	brne	.+26     	; 0x2ba <DIO_vwrite_pin+0x106>
		{
			SET_BIT(PORTD,pin);
 2a0:	22 b3       	in	r18, 0x12	; 18
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	ac 01       	movw	r20, r24
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_vwrite_pin+0xfa>
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_vwrite_pin+0xf6>
 2b2:	ba 01       	movw	r22, r20
 2b4:	62 2b       	or	r22, r18
 2b6:	62 bb       	out	0x12, r22	; 18
 2b8:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pin);
 2ba:	22 b3       	in	r18, 0x12	; 18
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	ac 01       	movw	r20, r24
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_vwrite_pin+0x114>
 2c4:	44 0f       	add	r20, r20
 2c6:	55 1f       	adc	r21, r21
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_vwrite_pin+0x110>
 2cc:	ba 01       	movw	r22, r20
 2ce:	60 95       	com	r22
 2d0:	62 23       	and	r22, r18
 2d2:	62 bb       	out	0x12, r22	; 18
 2d4:	08 95       	ret

000002d6 <DIO_U8read_pin>:
		break;
	}}
unsigned char DIO_U8read_pin(unsigned char port,unsigned char pin)
{
	unsigned char value;
	switch(port)
 2d6:	84 34       	cpi	r24, 0x44	; 68
 2d8:	09 f4       	brne	.+2      	; 0x2dc <DIO_U8read_pin+0x6>
 2da:	51 c0       	rjmp	.+162    	; 0x37e <DIO_U8read_pin+0xa8>
 2dc:	85 34       	cpi	r24, 0x45	; 69
 2de:	40 f4       	brcc	.+16     	; 0x2f0 <DIO_U8read_pin+0x1a>
 2e0:	82 34       	cpi	r24, 0x42	; 66
 2e2:	39 f1       	breq	.+78     	; 0x332 <DIO_U8read_pin+0x5c>
 2e4:	83 34       	cpi	r24, 0x43	; 67
 2e6:	c0 f5       	brcc	.+112    	; 0x358 <DIO_U8read_pin+0x82>
 2e8:	81 34       	cpi	r24, 0x41	; 65
 2ea:	09 f0       	breq	.+2      	; 0x2ee <DIO_U8read_pin+0x18>
 2ec:	5a c0       	rjmp	.+180    	; 0x3a2 <DIO_U8read_pin+0xcc>
 2ee:	0e c0       	rjmp	.+28     	; 0x30c <DIO_U8read_pin+0x36>
 2f0:	82 36       	cpi	r24, 0x62	; 98
 2f2:	f9 f0       	breq	.+62     	; 0x332 <DIO_U8read_pin+0x5c>
 2f4:	83 36       	cpi	r24, 0x63	; 99
 2f6:	20 f4       	brcc	.+8      	; 0x300 <DIO_U8read_pin+0x2a>
 2f8:	81 36       	cpi	r24, 0x61	; 97
 2fa:	09 f0       	breq	.+2      	; 0x2fe <DIO_U8read_pin+0x28>
 2fc:	52 c0       	rjmp	.+164    	; 0x3a2 <DIO_U8read_pin+0xcc>
 2fe:	06 c0       	rjmp	.+12     	; 0x30c <DIO_U8read_pin+0x36>
 300:	83 36       	cpi	r24, 0x63	; 99
 302:	51 f1       	breq	.+84     	; 0x358 <DIO_U8read_pin+0x82>
 304:	84 36       	cpi	r24, 0x64	; 100
 306:	09 f0       	breq	.+2      	; 0x30a <DIO_U8read_pin+0x34>
 308:	4c c0       	rjmp	.+152    	; 0x3a2 <DIO_U8read_pin+0xcc>
 30a:	39 c0       	rjmp	.+114    	; 0x37e <DIO_U8read_pin+0xa8>
	{
		case 'A':
		case 'a':
			value=READ_BIT(PINA,pin);
 30c:	29 b3       	in	r18, 0x19	; 25
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	06 2e       	mov	r0, r22
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_U8read_pin+0x44>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_U8read_pin+0x40>
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	82 23       	and	r24, r18
 322:	93 23       	and	r25, r19
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_U8read_pin+0x54>
 326:	95 95       	asr	r25
 328:	87 95       	ror	r24
 32a:	6a 95       	dec	r22
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_U8read_pin+0x50>
 32e:	98 2f       	mov	r25, r24
			break;
 330:	38 c0       	rjmp	.+112    	; 0x3a2 <DIO_U8read_pin+0xcc>
		case 'B':
		case 'b':
			value=READ_BIT(PINB,pin);
 332:	26 b3       	in	r18, 0x16	; 22
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	06 2e       	mov	r0, r22
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_U8read_pin+0x6a>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	0a 94       	dec	r0
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_U8read_pin+0x66>
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	82 23       	and	r24, r18
 348:	93 23       	and	r25, r19
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_U8read_pin+0x7a>
 34c:	95 95       	asr	r25
 34e:	87 95       	ror	r24
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_U8read_pin+0x76>
 354:	98 2f       	mov	r25, r24
			break;
 356:	25 c0       	rjmp	.+74     	; 0x3a2 <DIO_U8read_pin+0xcc>
		case 'C':
		case 'c':
			value=READ_BIT(PINC,pin);
 358:	23 b3       	in	r18, 0x13	; 19
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	06 2e       	mov	r0, r22
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_U8read_pin+0x90>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	0a 94       	dec	r0
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_U8read_pin+0x8c>
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	82 23       	and	r24, r18
 36e:	93 23       	and	r25, r19
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_U8read_pin+0xa0>
 372:	95 95       	asr	r25
 374:	87 95       	ror	r24
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_U8read_pin+0x9c>
 37a:	98 2f       	mov	r25, r24
			break;
 37c:	12 c0       	rjmp	.+36     	; 0x3a2 <DIO_U8read_pin+0xcc>
		case 'D':
		case 'd':
			value=READ_BIT(PIND,pin);
 37e:	20 b3       	in	r18, 0x10	; 16
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	06 2e       	mov	r0, r22
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_U8read_pin+0xb6>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	0a 94       	dec	r0
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_U8read_pin+0xb2>
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	82 23       	and	r24, r18
 394:	93 23       	and	r25, r19
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_U8read_pin+0xc6>
 398:	95 95       	asr	r25
 39a:	87 95       	ror	r24
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_U8read_pin+0xc2>
 3a0:	98 2f       	mov	r25, r24
			break;
	}
	return value;
} 
 3a2:	89 2f       	mov	r24, r25
 3a4:	08 95       	ret

000003a6 <DIO_vtoggle>:
void DIO_vtoggle(unsigned char port,unsigned char pin)
{
switch(port)
 3a6:	84 34       	cpi	r24, 0x44	; 68
 3a8:	09 f4       	brne	.+2      	; 0x3ac <DIO_vtoggle+0x6>
 3aa:	3d c0       	rjmp	.+122    	; 0x426 <DIO_vtoggle+0x80>
 3ac:	85 34       	cpi	r24, 0x45	; 69
 3ae:	40 f4       	brcc	.+16     	; 0x3c0 <DIO_vtoggle+0x1a>
 3b0:	82 34       	cpi	r24, 0x42	; 66
 3b2:	f9 f0       	breq	.+62     	; 0x3f2 <DIO_vtoggle+0x4c>
 3b4:	83 34       	cpi	r24, 0x43	; 67
 3b6:	50 f5       	brcc	.+84     	; 0x40c <DIO_vtoggle+0x66>
 3b8:	81 34       	cpi	r24, 0x41	; 65
 3ba:	09 f0       	breq	.+2      	; 0x3be <DIO_vtoggle+0x18>
 3bc:	40 c0       	rjmp	.+128    	; 0x43e <DIO_vtoggle+0x98>
 3be:	0c c0       	rjmp	.+24     	; 0x3d8 <DIO_vtoggle+0x32>
 3c0:	82 36       	cpi	r24, 0x62	; 98
 3c2:	b9 f0       	breq	.+46     	; 0x3f2 <DIO_vtoggle+0x4c>
 3c4:	83 36       	cpi	r24, 0x63	; 99
 3c6:	18 f4       	brcc	.+6      	; 0x3ce <DIO_vtoggle+0x28>
 3c8:	81 36       	cpi	r24, 0x61	; 97
 3ca:	c9 f5       	brne	.+114    	; 0x43e <DIO_vtoggle+0x98>
 3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <DIO_vtoggle+0x32>
 3ce:	83 36       	cpi	r24, 0x63	; 99
 3d0:	e9 f0       	breq	.+58     	; 0x40c <DIO_vtoggle+0x66>
 3d2:	84 36       	cpi	r24, 0x64	; 100
 3d4:	a1 f5       	brne	.+104    	; 0x43e <DIO_vtoggle+0x98>
 3d6:	27 c0       	rjmp	.+78     	; 0x426 <DIO_vtoggle+0x80>
{
	case 'A':
	case 'a':
		TOG_BIT(PORTA,pin);
 3d8:	2b b3       	in	r18, 0x1b	; 27
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	ac 01       	movw	r20, r24
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_vtoggle+0x40>
 3e2:	44 0f       	add	r20, r20
 3e4:	55 1f       	adc	r21, r21
 3e6:	6a 95       	dec	r22
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_vtoggle+0x3c>
 3ea:	ba 01       	movw	r22, r20
 3ec:	62 27       	eor	r22, r18
 3ee:	6b bb       	out	0x1b, r22	; 27
		break;
 3f0:	08 95       	ret
	case 'B':
	case 'b':
		TOG_BIT(PORTB,pin);
 3f2:	28 b3       	in	r18, 0x18	; 24
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	ac 01       	movw	r20, r24
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <DIO_vtoggle+0x5a>
 3fc:	44 0f       	add	r20, r20
 3fe:	55 1f       	adc	r21, r21
 400:	6a 95       	dec	r22
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_vtoggle+0x56>
 404:	ba 01       	movw	r22, r20
 406:	62 27       	eor	r22, r18
 408:	68 bb       	out	0x18, r22	; 24
		break;
 40a:	08 95       	ret
	case 'C':
	case 'c':
		TOG_BIT(PORTC,pin);
 40c:	25 b3       	in	r18, 0x15	; 21
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	ac 01       	movw	r20, r24
 414:	02 c0       	rjmp	.+4      	; 0x41a <DIO_vtoggle+0x74>
 416:	44 0f       	add	r20, r20
 418:	55 1f       	adc	r21, r21
 41a:	6a 95       	dec	r22
 41c:	e2 f7       	brpl	.-8      	; 0x416 <DIO_vtoggle+0x70>
 41e:	ba 01       	movw	r22, r20
 420:	62 27       	eor	r22, r18
 422:	65 bb       	out	0x15, r22	; 21
		break;
 424:	08 95       	ret
	case 'D':
	case 'd':
		TOG_BIT(PORTD,pin);
 426:	22 b3       	in	r18, 0x12	; 18
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	ac 01       	movw	r20, r24
 42e:	02 c0       	rjmp	.+4      	; 0x434 <DIO_vtoggle+0x8e>
 430:	44 0f       	add	r20, r20
 432:	55 1f       	adc	r21, r21
 434:	6a 95       	dec	r22
 436:	e2 f7       	brpl	.-8      	; 0x430 <DIO_vtoggle+0x8a>
 438:	ba 01       	movw	r22, r20
 43a:	62 27       	eor	r22, r18
 43c:	62 bb       	out	0x12, r22	; 18
 43e:	08 95       	ret

00000440 <DIO_vset_portdir>:
		break;
	}
}
void DIO_vset_portdir(unsigned char port,unsigned char dir)
{
	switch(port)
 440:	84 34       	cpi	r24, 0x44	; 68
 442:	d9 f0       	breq	.+54     	; 0x47a <DIO_vset_portdir+0x3a>
 444:	85 34       	cpi	r24, 0x45	; 69
 446:	38 f4       	brcc	.+14     	; 0x456 <DIO_vset_portdir+0x16>
 448:	82 34       	cpi	r24, 0x42	; 66
 44a:	99 f0       	breq	.+38     	; 0x472 <DIO_vset_portdir+0x32>
 44c:	83 34       	cpi	r24, 0x43	; 67
 44e:	98 f4       	brcc	.+38     	; 0x476 <DIO_vset_portdir+0x36>
 450:	81 34       	cpi	r24, 0x41	; 65
 452:	a1 f4       	brne	.+40     	; 0x47c <DIO_vset_portdir+0x3c>
 454:	0c c0       	rjmp	.+24     	; 0x46e <DIO_vset_portdir+0x2e>
 456:	82 36       	cpi	r24, 0x62	; 98
 458:	61 f0       	breq	.+24     	; 0x472 <DIO_vset_portdir+0x32>
 45a:	83 36       	cpi	r24, 0x63	; 99
 45c:	18 f4       	brcc	.+6      	; 0x464 <DIO_vset_portdir+0x24>
 45e:	81 36       	cpi	r24, 0x61	; 97
 460:	69 f4       	brne	.+26     	; 0x47c <DIO_vset_portdir+0x3c>
 462:	05 c0       	rjmp	.+10     	; 0x46e <DIO_vset_portdir+0x2e>
 464:	83 36       	cpi	r24, 0x63	; 99
 466:	39 f0       	breq	.+14     	; 0x476 <DIO_vset_portdir+0x36>
 468:	84 36       	cpi	r24, 0x64	; 100
 46a:	41 f4       	brne	.+16     	; 0x47c <DIO_vset_portdir+0x3c>
 46c:	06 c0       	rjmp	.+12     	; 0x47a <DIO_vset_portdir+0x3a>
	{
		case 'A':
		case 'a':
		DDRA=dir;
 46e:	6a bb       	out	0x1a, r22	; 26
		break;
 470:	08 95       	ret
		case 'B':
		case 'b':
		DDRB=dir;
 472:	67 bb       	out	0x17, r22	; 23
		break;
 474:	08 95       	ret
		case 'C':
		case 'c':
		DDRC=dir;
 476:	64 bb       	out	0x14, r22	; 20
		break;
 478:	08 95       	ret
		case 'D':
		case 'd':
		DDRD=dir;
 47a:	61 bb       	out	0x11, r22	; 17
 47c:	08 95       	ret

0000047e <DIO_vwrite_port>:
		break;
	}
}
void DIO_vwrite_port(unsigned char port,unsigned char val)
{
	switch(port)
 47e:	84 34       	cpi	r24, 0x44	; 68
 480:	d9 f0       	breq	.+54     	; 0x4b8 <DIO_vwrite_port+0x3a>
 482:	85 34       	cpi	r24, 0x45	; 69
 484:	38 f4       	brcc	.+14     	; 0x494 <DIO_vwrite_port+0x16>
 486:	82 34       	cpi	r24, 0x42	; 66
 488:	99 f0       	breq	.+38     	; 0x4b0 <DIO_vwrite_port+0x32>
 48a:	83 34       	cpi	r24, 0x43	; 67
 48c:	98 f4       	brcc	.+38     	; 0x4b4 <DIO_vwrite_port+0x36>
 48e:	81 34       	cpi	r24, 0x41	; 65
 490:	a1 f4       	brne	.+40     	; 0x4ba <DIO_vwrite_port+0x3c>
 492:	0c c0       	rjmp	.+24     	; 0x4ac <DIO_vwrite_port+0x2e>
 494:	82 36       	cpi	r24, 0x62	; 98
 496:	61 f0       	breq	.+24     	; 0x4b0 <DIO_vwrite_port+0x32>
 498:	83 36       	cpi	r24, 0x63	; 99
 49a:	18 f4       	brcc	.+6      	; 0x4a2 <DIO_vwrite_port+0x24>
 49c:	81 36       	cpi	r24, 0x61	; 97
 49e:	69 f4       	brne	.+26     	; 0x4ba <DIO_vwrite_port+0x3c>
 4a0:	05 c0       	rjmp	.+10     	; 0x4ac <DIO_vwrite_port+0x2e>
 4a2:	83 36       	cpi	r24, 0x63	; 99
 4a4:	39 f0       	breq	.+14     	; 0x4b4 <DIO_vwrite_port+0x36>
 4a6:	84 36       	cpi	r24, 0x64	; 100
 4a8:	41 f4       	brne	.+16     	; 0x4ba <DIO_vwrite_port+0x3c>
 4aa:	06 c0       	rjmp	.+12     	; 0x4b8 <DIO_vwrite_port+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=val;
 4ac:	6b bb       	out	0x1b, r22	; 27
		break;
 4ae:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=val;
 4b0:	68 bb       	out	0x18, r22	; 24
		break;
 4b2:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=val;
 4b4:	65 bb       	out	0x15, r22	; 21
		break;
 4b6:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=val;
 4b8:	62 bb       	out	0x12, r22	; 18
 4ba:	08 95       	ret

000004bc <DIO_U8read_port>:
	}
}
unsigned char DIO_U8read_port(unsigned char port)
{
	int val;
	switch(port)
 4bc:	84 34       	cpi	r24, 0x44	; 68
 4be:	e1 f0       	breq	.+56     	; 0x4f8 <DIO_U8read_port+0x3c>
 4c0:	85 34       	cpi	r24, 0x45	; 69
 4c2:	38 f4       	brcc	.+14     	; 0x4d2 <DIO_U8read_port+0x16>
 4c4:	82 34       	cpi	r24, 0x42	; 66
 4c6:	a1 f0       	breq	.+40     	; 0x4f0 <DIO_U8read_port+0x34>
 4c8:	83 34       	cpi	r24, 0x43	; 67
 4ca:	a0 f4       	brcc	.+40     	; 0x4f4 <DIO_U8read_port+0x38>
 4cc:	81 34       	cpi	r24, 0x41	; 65
 4ce:	a9 f4       	brne	.+42     	; 0x4fa <DIO_U8read_port+0x3e>
 4d0:	0c c0       	rjmp	.+24     	; 0x4ea <DIO_U8read_port+0x2e>
 4d2:	82 36       	cpi	r24, 0x62	; 98
 4d4:	69 f0       	breq	.+26     	; 0x4f0 <DIO_U8read_port+0x34>
 4d6:	83 36       	cpi	r24, 0x63	; 99
 4d8:	18 f4       	brcc	.+6      	; 0x4e0 <DIO_U8read_port+0x24>
 4da:	81 36       	cpi	r24, 0x61	; 97
 4dc:	71 f4       	brne	.+28     	; 0x4fa <DIO_U8read_port+0x3e>
 4de:	05 c0       	rjmp	.+10     	; 0x4ea <DIO_U8read_port+0x2e>
 4e0:	83 36       	cpi	r24, 0x63	; 99
 4e2:	41 f0       	breq	.+16     	; 0x4f4 <DIO_U8read_port+0x38>
 4e4:	84 36       	cpi	r24, 0x64	; 100
 4e6:	49 f4       	brne	.+18     	; 0x4fa <DIO_U8read_port+0x3e>
 4e8:	07 c0       	rjmp	.+14     	; 0x4f8 <DIO_U8read_port+0x3c>
	{
		case 'A':
		case 'a':
		PINA=val;
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	99 bb       	out	0x19, r25	; 25
		break;
 4ee:	05 c0       	rjmp	.+10     	; 0x4fa <DIO_U8read_port+0x3e>
		case 'B':
		case 'b':
		val=PINB;
 4f0:	96 b3       	in	r25, 0x16	; 22
		break;
 4f2:	03 c0       	rjmp	.+6      	; 0x4fa <DIO_U8read_port+0x3e>
		case 'C':
		case 'c':
		val=PINC;
 4f4:	93 b3       	in	r25, 0x13	; 19
		break;
 4f6:	01 c0       	rjmp	.+2      	; 0x4fa <DIO_U8read_port+0x3e>
		case 'D':
		case 'd':
		val=PIND;
 4f8:	90 b3       	in	r25, 0x10	; 16
		break;
	}
	return val;
}
 4fa:	89 2f       	mov	r24, r25
 4fc:	08 95       	ret

000004fe <DIO_vtog_port>:
void DIO_vtog_port(unsigned char port)
{
	switch(port)
 4fe:	84 34       	cpi	r24, 0x44	; 68
 500:	09 f1       	breq	.+66     	; 0x544 <DIO_vtog_port+0x46>
 502:	85 34       	cpi	r24, 0x45	; 69
 504:	38 f4       	brcc	.+14     	; 0x514 <DIO_vtog_port+0x16>
 506:	82 34       	cpi	r24, 0x42	; 66
 508:	a9 f0       	breq	.+42     	; 0x534 <DIO_vtog_port+0x36>
 50a:	83 34       	cpi	r24, 0x43	; 67
 50c:	b8 f4       	brcc	.+46     	; 0x53c <DIO_vtog_port+0x3e>
 50e:	81 34       	cpi	r24, 0x41	; 65
 510:	e1 f4       	brne	.+56     	; 0x54a <DIO_vtog_port+0x4c>
 512:	0c c0       	rjmp	.+24     	; 0x52c <DIO_vtog_port+0x2e>
 514:	82 36       	cpi	r24, 0x62	; 98
 516:	71 f0       	breq	.+28     	; 0x534 <DIO_vtog_port+0x36>
 518:	83 36       	cpi	r24, 0x63	; 99
 51a:	18 f4       	brcc	.+6      	; 0x522 <DIO_vtog_port+0x24>
 51c:	81 36       	cpi	r24, 0x61	; 97
 51e:	a9 f4       	brne	.+42     	; 0x54a <DIO_vtog_port+0x4c>
 520:	05 c0       	rjmp	.+10     	; 0x52c <DIO_vtog_port+0x2e>
 522:	83 36       	cpi	r24, 0x63	; 99
 524:	59 f0       	breq	.+22     	; 0x53c <DIO_vtog_port+0x3e>
 526:	84 36       	cpi	r24, 0x64	; 100
 528:	81 f4       	brne	.+32     	; 0x54a <DIO_vtog_port+0x4c>
 52a:	0c c0       	rjmp	.+24     	; 0x544 <DIO_vtog_port+0x46>
	{
		case 'A':
		case 'a':
		PORTA=~PORTA;
 52c:	8b b3       	in	r24, 0x1b	; 27
 52e:	80 95       	com	r24
 530:	8b bb       	out	0x1b, r24	; 27
		break;
 532:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=~PORTB;
 534:	88 b3       	in	r24, 0x18	; 24
 536:	80 95       	com	r24
 538:	88 bb       	out	0x18, r24	; 24
		break;
 53a:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=~PORTC;
 53c:	85 b3       	in	r24, 0x15	; 21
 53e:	80 95       	com	r24
 540:	85 bb       	out	0x15, r24	; 21
		break;
 542:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=~PORTD;
 544:	82 b3       	in	r24, 0x12	; 18
 546:	80 95       	com	r24
 548:	82 bb       	out	0x12, r24	; 18
 54a:	08 95       	ret

0000054c <DIO_vcontrolpullup>:
		break;
	}
}
void DIO_vcontrolpullup(unsigned char port,unsigned char pin,unsigned char enable)
{
	switch(port)
 54c:	84 34       	cpi	r24, 0x44	; 68
 54e:	09 f4       	brne	.+2      	; 0x552 <DIO_vcontrolpullup+0x6>
 550:	71 c0       	rjmp	.+226    	; 0x634 <DIO_vcontrolpullup+0xe8>
 552:	85 34       	cpi	r24, 0x45	; 69
 554:	48 f4       	brcc	.+18     	; 0x568 <DIO_vcontrolpullup+0x1c>
 556:	82 34       	cpi	r24, 0x42	; 66
 558:	99 f1       	breq	.+102    	; 0x5c0 <DIO_vcontrolpullup+0x74>
 55a:	83 34       	cpi	r24, 0x43	; 67
 55c:	08 f0       	brcs	.+2      	; 0x560 <DIO_vcontrolpullup+0x14>
 55e:	4d c0       	rjmp	.+154    	; 0x5fa <DIO_vcontrolpullup+0xae>
 560:	81 34       	cpi	r24, 0x41	; 65
 562:	09 f0       	breq	.+2      	; 0x566 <DIO_vcontrolpullup+0x1a>
 564:	83 c0       	rjmp	.+262    	; 0x66c <DIO_vcontrolpullup+0x120>
 566:	0f c0       	rjmp	.+30     	; 0x586 <DIO_vcontrolpullup+0x3a>
 568:	82 36       	cpi	r24, 0x62	; 98
 56a:	51 f1       	breq	.+84     	; 0x5c0 <DIO_vcontrolpullup+0x74>
 56c:	83 36       	cpi	r24, 0x63	; 99
 56e:	20 f4       	brcc	.+8      	; 0x578 <DIO_vcontrolpullup+0x2c>
 570:	81 36       	cpi	r24, 0x61	; 97
 572:	09 f0       	breq	.+2      	; 0x576 <DIO_vcontrolpullup+0x2a>
 574:	7b c0       	rjmp	.+246    	; 0x66c <DIO_vcontrolpullup+0x120>
 576:	07 c0       	rjmp	.+14     	; 0x586 <DIO_vcontrolpullup+0x3a>
 578:	83 36       	cpi	r24, 0x63	; 99
 57a:	09 f4       	brne	.+2      	; 0x57e <DIO_vcontrolpullup+0x32>
 57c:	3e c0       	rjmp	.+124    	; 0x5fa <DIO_vcontrolpullup+0xae>
 57e:	84 36       	cpi	r24, 0x64	; 100
 580:	09 f0       	breq	.+2      	; 0x584 <DIO_vcontrolpullup+0x38>
 582:	74 c0       	rjmp	.+232    	; 0x66c <DIO_vcontrolpullup+0x120>
 584:	57 c0       	rjmp	.+174    	; 0x634 <DIO_vcontrolpullup+0xe8>
	{
		case 'a':
		case 'A':
		if(enable==1)
 586:	41 30       	cpi	r20, 0x01	; 1
 588:	69 f4       	brne	.+26     	; 0x5a4 <DIO_vcontrolpullup+0x58>
		{
			SET_BIT(PORTA,pin);
 58a:	2b b3       	in	r18, 0x1b	; 27
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	ac 01       	movw	r20, r24
 592:	02 c0       	rjmp	.+4      	; 0x598 <DIO_vcontrolpullup+0x4c>
 594:	44 0f       	add	r20, r20
 596:	55 1f       	adc	r21, r21
 598:	6a 95       	dec	r22
 59a:	e2 f7       	brpl	.-8      	; 0x594 <DIO_vcontrolpullup+0x48>
 59c:	ba 01       	movw	r22, r20
 59e:	62 2b       	or	r22, r18
 5a0:	6b bb       	out	0x1b, r22	; 27
 5a2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pin);
 5a4:	2b b3       	in	r18, 0x1b	; 27
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	ac 01       	movw	r20, r24
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <DIO_vcontrolpullup+0x66>
 5ae:	44 0f       	add	r20, r20
 5b0:	55 1f       	adc	r21, r21
 5b2:	6a 95       	dec	r22
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <DIO_vcontrolpullup+0x62>
 5b6:	ba 01       	movw	r22, r20
 5b8:	60 95       	com	r22
 5ba:	62 23       	and	r22, r18
 5bc:	6b bb       	out	0x1b, r22	; 27
 5be:	08 95       	ret
		}
		break;
		case 'b':
		case 'B':
		if(enable==1)
 5c0:	41 30       	cpi	r20, 0x01	; 1
 5c2:	69 f4       	brne	.+26     	; 0x5de <DIO_vcontrolpullup+0x92>
		{
			SET_BIT(PORTB,pin);
 5c4:	28 b3       	in	r18, 0x18	; 24
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	ac 01       	movw	r20, r24
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <DIO_vcontrolpullup+0x86>
 5ce:	44 0f       	add	r20, r20
 5d0:	55 1f       	adc	r21, r21
 5d2:	6a 95       	dec	r22
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <DIO_vcontrolpullup+0x82>
 5d6:	ba 01       	movw	r22, r20
 5d8:	62 2b       	or	r22, r18
 5da:	68 bb       	out	0x18, r22	; 24
 5dc:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pin);
 5de:	28 b3       	in	r18, 0x18	; 24
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	ac 01       	movw	r20, r24
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <DIO_vcontrolpullup+0xa0>
 5e8:	44 0f       	add	r20, r20
 5ea:	55 1f       	adc	r21, r21
 5ec:	6a 95       	dec	r22
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <DIO_vcontrolpullup+0x9c>
 5f0:	ba 01       	movw	r22, r20
 5f2:	60 95       	com	r22
 5f4:	62 23       	and	r22, r18
 5f6:	68 bb       	out	0x18, r22	; 24
 5f8:	08 95       	ret
		}
		break;
		case 'c':
		case 'C':
		if(enable==1)
 5fa:	41 30       	cpi	r20, 0x01	; 1
 5fc:	69 f4       	brne	.+26     	; 0x618 <DIO_vcontrolpullup+0xcc>
		{
			SET_BIT(PORTC,pin);
 5fe:	25 b3       	in	r18, 0x15	; 21
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	ac 01       	movw	r20, r24
 606:	02 c0       	rjmp	.+4      	; 0x60c <DIO_vcontrolpullup+0xc0>
 608:	44 0f       	add	r20, r20
 60a:	55 1f       	adc	r21, r21
 60c:	6a 95       	dec	r22
 60e:	e2 f7       	brpl	.-8      	; 0x608 <DIO_vcontrolpullup+0xbc>
 610:	ba 01       	movw	r22, r20
 612:	62 2b       	or	r22, r18
 614:	65 bb       	out	0x15, r22	; 21
 616:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pin);
 618:	25 b3       	in	r18, 0x15	; 21
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	ac 01       	movw	r20, r24
 620:	02 c0       	rjmp	.+4      	; 0x626 <DIO_vcontrolpullup+0xda>
 622:	44 0f       	add	r20, r20
 624:	55 1f       	adc	r21, r21
 626:	6a 95       	dec	r22
 628:	e2 f7       	brpl	.-8      	; 0x622 <DIO_vcontrolpullup+0xd6>
 62a:	ba 01       	movw	r22, r20
 62c:	60 95       	com	r22
 62e:	62 23       	and	r22, r18
 630:	65 bb       	out	0x15, r22	; 21
 632:	08 95       	ret
		}
		break;
		case 'd':
		case 'D':
		if(enable==1)
 634:	41 30       	cpi	r20, 0x01	; 1
 636:	69 f4       	brne	.+26     	; 0x652 <DIO_vcontrolpullup+0x106>
		{
			SET_BIT(PORTD,pin);
 638:	22 b3       	in	r18, 0x12	; 18
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	ac 01       	movw	r20, r24
 640:	02 c0       	rjmp	.+4      	; 0x646 <DIO_vcontrolpullup+0xfa>
 642:	44 0f       	add	r20, r20
 644:	55 1f       	adc	r21, r21
 646:	6a 95       	dec	r22
 648:	e2 f7       	brpl	.-8      	; 0x642 <DIO_vcontrolpullup+0xf6>
 64a:	ba 01       	movw	r22, r20
 64c:	62 2b       	or	r22, r18
 64e:	62 bb       	out	0x12, r22	; 18
 650:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pin);
 652:	22 b3       	in	r18, 0x12	; 18
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	ac 01       	movw	r20, r24
 65a:	02 c0       	rjmp	.+4      	; 0x660 <DIO_vcontrolpullup+0x114>
 65c:	44 0f       	add	r20, r20
 65e:	55 1f       	adc	r21, r21
 660:	6a 95       	dec	r22
 662:	e2 f7       	brpl	.-8      	; 0x65c <DIO_vcontrolpullup+0x110>
 664:	ba 01       	movw	r22, r20
 666:	60 95       	com	r22
 668:	62 23       	and	r22, r18
 66a:	62 bb       	out	0x12, r22	; 18
 66c:	08 95       	ret

0000066e <main>:
#define F_CPU 1000000UL
#include <util/delay.h>
#include "timer0.h"
int main(void)
{
	LCD_vinit();
 66e:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_vinit>
	LCD_vSend_string("There are 0 cars");
 672:	80 e6       	ldi	r24, 0x60	; 96
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	0e 94 29 05 	call	0xa52	; 0xa52 <LCD_vSend_string>
	LCD_vmove_cursor(2,1);
 67a:	82 e0       	ldi	r24, 0x02	; 2
 67c:	61 e0       	ldi	r22, 0x01	; 1
 67e:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LCD_vmove_cursor>
	LCD_vSend_string("Garage has space");
 682:	81 e7       	ldi	r24, 0x71	; 113
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	0e 94 29 05 	call	0xa52	; 0xa52 <LCD_vSend_string>
	signed char flag1=0,flag2=0,IR1,IR2,counter=0;
 68a:	10 e0       	ldi	r17, 0x00	; 0
 68c:	c0 e0       	ldi	r28, 0x00	; 0
 68e:	d0 e0       	ldi	r29, 0x00	; 0
			LCD_vsend_char(counter+48);
			flag1=1;
			if(counter==3)
			{
				LCD_vclearscreen();
				LCD_vSend_string("There are 3 cars");
 690:	0f 2e       	mov	r0, r31
 692:	f2 e8       	ldi	r31, 0x82	; 130
 694:	8f 2e       	mov	r8, r31
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	9f 2e       	mov	r9, r31
 69a:	f0 2d       	mov	r31, r0
				LCD_vmove_cursor(2,1);
				LCD_vSend_string("Garage is full");
 69c:	0f 2e       	mov	r0, r31
 69e:	f3 e9       	ldi	r31, 0x93	; 147
 6a0:	6f 2e       	mov	r6, r31
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	7f 2e       	mov	r7, r31
 6a6:	f0 2d       	mov	r31, r0
			counter--;
			LCD_vmove_cursor(1,11);
			LCD_vsend_char(counter+48);
			flag2=1;
			LCD_vclearscreen();
			LCD_vSend_string("there are ");
 6a8:	0f 2e       	mov	r0, r31
 6aa:	f2 ea       	ldi	r31, 0xA2	; 162
 6ac:	ef 2e       	mov	r14, r31
 6ae:	f0 e0       	ldi	r31, 0x00	; 0
 6b0:	ff 2e       	mov	r15, r31
 6b2:	f0 2d       	mov	r31, r0
			LCD_vsend_char(counter+48);
			LCD_vSend_string(" cars");
 6b4:	0f 2e       	mov	r0, r31
 6b6:	fd ea       	ldi	r31, 0xAD	; 173
 6b8:	cf 2e       	mov	r12, r31
 6ba:	f0 e0       	ldi	r31, 0x00	; 0
 6bc:	df 2e       	mov	r13, r31
 6be:	f0 2d       	mov	r31, r0
			LCD_vmove_cursor(2,1);
			LCD_vSend_string("garage has space");
 6c0:	0f 2e       	mov	r0, r31
 6c2:	f3 eb       	ldi	r31, 0xB3	; 179
 6c4:	af 2e       	mov	r10, r31
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	bf 2e       	mov	r11, r31
 6ca:	f0 2d       	mov	r31, r0
 6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <main+0x62>
			_delay_ms(1000);
			timer_1_wave_fastpwm_A(1.5);
		}			
		else if(IR2==0)
		{
			flag2=0;
 6ce:	c0 e0       	ldi	r28, 0x00	; 0
	LCD_vmove_cursor(2,1);
	LCD_vSend_string("Garage has space");
	signed char flag1=0,flag2=0,IR1,IR2,counter=0;
    while(1)
    {
		IR1=DIO_U8read_pin('d',0);
 6d0:	84 e6       	ldi	r24, 0x64	; 100
 6d2:	60 e0       	ldi	r22, 0x00	; 0
 6d4:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <DIO_U8read_pin>
		if(IR1==1 && flag1==0 && counter<3)
 6d8:	81 30       	cpi	r24, 0x01	; 1
 6da:	89 f5       	brne	.+98     	; 0x73e <main+0xd0>
 6dc:	dd 23       	and	r29, r29
 6de:	79 f5       	brne	.+94     	; 0x73e <main+0xd0>
 6e0:	13 30       	cpi	r17, 0x03	; 3
 6e2:	84 f5       	brge	.+96     	; 0x744 <main+0xd6>
		{
			counter++;
 6e4:	1f 5f       	subi	r17, 0xFF	; 255
			LCD_vmove_cursor(1,11);
 6e6:	6b e0       	ldi	r22, 0x0B	; 11
 6e8:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LCD_vmove_cursor>
			LCD_vsend_char(counter+48);
 6ec:	81 2f       	mov	r24, r17
 6ee:	80 5d       	subi	r24, 0xD0	; 208
 6f0:	0e 94 07 05 	call	0xa0e	; 0xa0e <LCD_vsend_char>
			flag1=1;
			if(counter==3)
 6f4:	13 30       	cpi	r17, 0x03	; 3
 6f6:	61 f4       	brne	.+24     	; 0x710 <main+0xa2>
			{
				LCD_vclearscreen();
 6f8:	0e 94 9e 04 	call	0x93c	; 0x93c <LCD_vclearscreen>
				LCD_vSend_string("There are 3 cars");
 6fc:	c4 01       	movw	r24, r8
 6fe:	0e 94 29 05 	call	0xa52	; 0xa52 <LCD_vSend_string>
				LCD_vmove_cursor(2,1);
 702:	82 e0       	ldi	r24, 0x02	; 2
 704:	61 e0       	ldi	r22, 0x01	; 1
 706:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LCD_vmove_cursor>
				LCD_vSend_string("Garage is full");
 70a:	c3 01       	movw	r24, r6
 70c:	0e 94 29 05 	call	0xa52	; 0xa52 <LCD_vSend_string>
			}
			timer_1_wave_fastpwm_B(1);
 710:	60 e0       	ldi	r22, 0x00	; 0
 712:	70 e0       	ldi	r23, 0x00	; 0
 714:	80 e8       	ldi	r24, 0x80	; 128
 716:	9f e3       	ldi	r25, 0x3F	; 63
 718:	0e 94 48 05 	call	0xa90	; 0xa90 <timer_1_wave_fastpwm_B>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 71c:	8f e3       	ldi	r24, 0x3F	; 63
 71e:	9d e0       	ldi	r25, 0x0D	; 13
 720:	a3 e0       	ldi	r26, 0x03	; 3
 722:	81 50       	subi	r24, 0x01	; 1
 724:	90 40       	sbci	r25, 0x00	; 0
 726:	a0 40       	sbci	r26, 0x00	; 0
 728:	e1 f7       	brne	.-8      	; 0x722 <main+0xb4>
 72a:	00 c0       	rjmp	.+0      	; 0x72c <main+0xbe>
 72c:	00 00       	nop
			_delay_ms(1000);
			timer_1_wave_fastpwm_B(1.5);
 72e:	60 e0       	ldi	r22, 0x00	; 0
 730:	70 e0       	ldi	r23, 0x00	; 0
 732:	80 ec       	ldi	r24, 0xC0	; 192
 734:	9f e3       	ldi	r25, 0x3F	; 63
 736:	0e 94 48 05 	call	0xa90	; 0xa90 <timer_1_wave_fastpwm_B>
		if(IR1==1 && flag1==0 && counter<3)
		{
			counter++;
			LCD_vmove_cursor(1,11);
			LCD_vsend_char(counter+48);
			flag1=1;
 73a:	d1 e0       	ldi	r29, 0x01	; 1
				LCD_vmove_cursor(2,1);
				LCD_vSend_string("Garage is full");
			}
			timer_1_wave_fastpwm_B(1);
			_delay_ms(1000);
			timer_1_wave_fastpwm_B(1.5);
 73c:	03 c0       	rjmp	.+6      	; 0x744 <main+0xd6>
		}			
		else if(IR1==0)
 73e:	88 23       	and	r24, r24
 740:	09 f4       	brne	.+2      	; 0x744 <main+0xd6>
		{
			flag1=0;
 742:	d0 e0       	ldi	r29, 0x00	; 0
		}
		IR2=DIO_U8read_pin('d',1);
 744:	84 e6       	ldi	r24, 0x64	; 100
 746:	61 e0       	ldi	r22, 0x01	; 1
 748:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <DIO_U8read_pin>
		if(IR2==1 && flag2==0 && counter>0)
 74c:	81 30       	cpi	r24, 0x01	; 1
 74e:	c1 f5       	brne	.+112    	; 0x7c0 <main+0x152>
 750:	cc 23       	and	r28, r28
 752:	09 f0       	breq	.+2      	; 0x756 <main+0xe8>
 754:	bd cf       	rjmp	.-134    	; 0x6d0 <main+0x62>
 756:	11 16       	cp	r1, r17
 758:	0c f0       	brlt	.+2      	; 0x75c <main+0xee>
 75a:	ba cf       	rjmp	.-140    	; 0x6d0 <main+0x62>
		{
			counter--;
 75c:	11 50       	subi	r17, 0x01	; 1
			LCD_vmove_cursor(1,11);
 75e:	6b e0       	ldi	r22, 0x0B	; 11
 760:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LCD_vmove_cursor>
			LCD_vsend_char(counter+48);
 764:	c1 2f       	mov	r28, r17
 766:	c0 5d       	subi	r28, 0xD0	; 208
 768:	8c 2f       	mov	r24, r28
 76a:	0e 94 07 05 	call	0xa0e	; 0xa0e <LCD_vsend_char>
			flag2=1;
			LCD_vclearscreen();
 76e:	0e 94 9e 04 	call	0x93c	; 0x93c <LCD_vclearscreen>
			LCD_vSend_string("there are ");
 772:	c7 01       	movw	r24, r14
 774:	0e 94 29 05 	call	0xa52	; 0xa52 <LCD_vSend_string>
			LCD_vsend_char(counter+48);
 778:	8c 2f       	mov	r24, r28
 77a:	0e 94 07 05 	call	0xa0e	; 0xa0e <LCD_vsend_char>
			LCD_vSend_string(" cars");
 77e:	c6 01       	movw	r24, r12
 780:	0e 94 29 05 	call	0xa52	; 0xa52 <LCD_vSend_string>
			LCD_vmove_cursor(2,1);
 784:	82 e0       	ldi	r24, 0x02	; 2
 786:	61 e0       	ldi	r22, 0x01	; 1
 788:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LCD_vmove_cursor>
			LCD_vSend_string("garage has space");
 78c:	c5 01       	movw	r24, r10
 78e:	0e 94 29 05 	call	0xa52	; 0xa52 <LCD_vSend_string>
			timer_1_wave_fastpwm_A(1);
 792:	60 e0       	ldi	r22, 0x00	; 0
 794:	70 e0       	ldi	r23, 0x00	; 0
 796:	80 e8       	ldi	r24, 0x80	; 128
 798:	9f e3       	ldi	r25, 0x3F	; 63
 79a:	0e 94 69 05 	call	0xad2	; 0xad2 <timer_1_wave_fastpwm_A>
 79e:	8f e3       	ldi	r24, 0x3F	; 63
 7a0:	9d e0       	ldi	r25, 0x0D	; 13
 7a2:	a3 e0       	ldi	r26, 0x03	; 3
 7a4:	81 50       	subi	r24, 0x01	; 1
 7a6:	90 40       	sbci	r25, 0x00	; 0
 7a8:	a0 40       	sbci	r26, 0x00	; 0
 7aa:	e1 f7       	brne	.-8      	; 0x7a4 <main+0x136>
 7ac:	00 c0       	rjmp	.+0      	; 0x7ae <main+0x140>
 7ae:	00 00       	nop
			_delay_ms(1000);
			timer_1_wave_fastpwm_A(1.5);
 7b0:	60 e0       	ldi	r22, 0x00	; 0
 7b2:	70 e0       	ldi	r23, 0x00	; 0
 7b4:	80 ec       	ldi	r24, 0xC0	; 192
 7b6:	9f e3       	ldi	r25, 0x3F	; 63
 7b8:	0e 94 69 05 	call	0xad2	; 0xad2 <timer_1_wave_fastpwm_A>
		if(IR2==1 && flag2==0 && counter>0)
		{
			counter--;
			LCD_vmove_cursor(1,11);
			LCD_vsend_char(counter+48);
			flag2=1;
 7bc:	c1 e0       	ldi	r28, 0x01	; 1
			LCD_vSend_string(" cars");
			LCD_vmove_cursor(2,1);
			LCD_vSend_string("garage has space");
			timer_1_wave_fastpwm_A(1);
			_delay_ms(1000);
			timer_1_wave_fastpwm_A(1.5);
 7be:	88 cf       	rjmp	.-240    	; 0x6d0 <main+0x62>
		}			
		else if(IR2==0)
 7c0:	88 23       	and	r24, r24
 7c2:	09 f4       	brne	.+2      	; 0x7c6 <main+0x158>
 7c4:	84 cf       	rjmp	.-248    	; 0x6ce <main+0x60>
 7c6:	84 cf       	rjmp	.-248    	; 0x6d0 <main+0x62>

000007c8 <send_falling_edge>:
	_delay_ms(1);
	#endif
}
static void send_falling_edge(void)
{
	DIO_vwrite_pin('A',EN,1);
 7c8:	81 e4       	ldi	r24, 0x41	; 65
 7ca:	60 e0       	ldi	r22, 0x00	; 0
 7cc:	41 e0       	ldi	r20, 0x01	; 1
 7ce:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
 7d2:	8f e9       	ldi	r24, 0x9F	; 159
 7d4:	9f e0       	ldi	r25, 0x0F	; 15
 7d6:	01 97       	sbiw	r24, 0x01	; 1
 7d8:	f1 f7       	brne	.-4      	; 0x7d6 <send_falling_edge+0xe>
 7da:	00 c0       	rjmp	.+0      	; 0x7dc <send_falling_edge+0x14>
 7dc:	00 00       	nop
	_delay_ms(2);
	DIO_vwrite_pin('A',EN,0);
 7de:	81 e4       	ldi	r24, 0x41	; 65
 7e0:	60 e0       	ldi	r22, 0x00	; 0
 7e2:	40 e0       	ldi	r20, 0x00	; 0
 7e4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
 7e8:	8f e9       	ldi	r24, 0x9F	; 159
 7ea:	9f e0       	ldi	r25, 0x0F	; 15
 7ec:	01 97       	sbiw	r24, 0x01	; 1
 7ee:	f1 f7       	brne	.-4      	; 0x7ec <send_falling_edge+0x24>
 7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <send_falling_edge+0x2a>
 7f2:	00 00       	nop
	_delay_ms(2);
}
 7f4:	08 95       	ret

000007f6 <vwrite_lownibble>:
		LCD_vsend_char(*data);
		data++;
	}
}
void vwrite_lownibble(unsigned char port,unsigned char number)
{
 7f6:	0f 93       	push	r16
 7f8:	1f 93       	push	r17
 7fa:	cf 93       	push	r28
 7fc:	c8 2f       	mov	r28, r24
 7fe:	06 2f       	mov	r16, r22
	DIO_vwrite_pin(port,0,READ_BIT(number,0));
 800:	46 2f       	mov	r20, r22
 802:	41 70       	andi	r20, 0x01	; 1
 804:	60 e0       	ldi	r22, 0x00	; 0
 806:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	DIO_vwrite_pin(port,1,READ_BIT(number,1));
 80a:	10 e0       	ldi	r17, 0x00	; 0
 80c:	a8 01       	movw	r20, r16
 80e:	42 70       	andi	r20, 0x02	; 2
 810:	50 70       	andi	r21, 0x00	; 0
 812:	55 95       	asr	r21
 814:	47 95       	ror	r20
 816:	8c 2f       	mov	r24, r28
 818:	61 e0       	ldi	r22, 0x01	; 1
 81a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	DIO_vwrite_pin(port,2,READ_BIT(number,2));
 81e:	a8 01       	movw	r20, r16
 820:	44 70       	andi	r20, 0x04	; 4
 822:	50 70       	andi	r21, 0x00	; 0
 824:	55 95       	asr	r21
 826:	47 95       	ror	r20
 828:	55 95       	asr	r21
 82a:	47 95       	ror	r20
 82c:	8c 2f       	mov	r24, r28
 82e:	62 e0       	ldi	r22, 0x02	; 2
 830:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	DIO_vwrite_pin(port,3,READ_BIT(number,3));
 834:	08 70       	andi	r16, 0x08	; 8
 836:	10 70       	andi	r17, 0x00	; 0
 838:	a8 01       	movw	r20, r16
 83a:	55 95       	asr	r21
 83c:	47 95       	ror	r20
 83e:	55 95       	asr	r21
 840:	47 95       	ror	r20
 842:	55 95       	asr	r21
 844:	47 95       	ror	r20
 846:	8c 2f       	mov	r24, r28
 848:	63 e0       	ldi	r22, 0x03	; 3
 84a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
}
 84e:	cf 91       	pop	r28
 850:	1f 91       	pop	r17
 852:	0f 91       	pop	r16
 854:	08 95       	ret

00000856 <vwrite_highnibble>:
void vwrite_highnibble(unsigned char port,unsigned char number)
{
 856:	0f 93       	push	r16
 858:	1f 93       	push	r17
 85a:	cf 93       	push	r28
 85c:	c8 2f       	mov	r28, r24
 85e:	06 2f       	mov	r16, r22
	DIO_vwrite_pin(port,4,READ_BIT(number,0));
 860:	46 2f       	mov	r20, r22
 862:	41 70       	andi	r20, 0x01	; 1
 864:	64 e0       	ldi	r22, 0x04	; 4
 866:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	DIO_vwrite_pin(port,5,READ_BIT(number,1));
 86a:	10 e0       	ldi	r17, 0x00	; 0
 86c:	a8 01       	movw	r20, r16
 86e:	42 70       	andi	r20, 0x02	; 2
 870:	50 70       	andi	r21, 0x00	; 0
 872:	55 95       	asr	r21
 874:	47 95       	ror	r20
 876:	8c 2f       	mov	r24, r28
 878:	65 e0       	ldi	r22, 0x05	; 5
 87a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	DIO_vwrite_pin(port,6,READ_BIT(number,2));
 87e:	a8 01       	movw	r20, r16
 880:	44 70       	andi	r20, 0x04	; 4
 882:	50 70       	andi	r21, 0x00	; 0
 884:	55 95       	asr	r21
 886:	47 95       	ror	r20
 888:	55 95       	asr	r21
 88a:	47 95       	ror	r20
 88c:	8c 2f       	mov	r24, r28
 88e:	66 e0       	ldi	r22, 0x06	; 6
 890:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	DIO_vwrite_pin(port,7,READ_BIT(number,3));
 894:	08 70       	andi	r16, 0x08	; 8
 896:	10 70       	andi	r17, 0x00	; 0
 898:	a8 01       	movw	r20, r16
 89a:	55 95       	asr	r21
 89c:	47 95       	ror	r20
 89e:	55 95       	asr	r21
 8a0:	47 95       	ror	r20
 8a2:	55 95       	asr	r21
 8a4:	47 95       	ror	r20
 8a6:	8c 2f       	mov	r24, r28
 8a8:	67 e0       	ldi	r22, 0x07	; 7
 8aa:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
 8ae:	cf 91       	pop	r28
 8b0:	1f 91       	pop	r17
 8b2:	0f 91       	pop	r16
 8b4:	08 95       	ret

000008b6 <LCD_vsend_cmd>:
	send_falling_edge();
	_delay_ms(1);
	#endif
}
void LCD_vsend_cmd(char cmd)
{
 8b6:	cf 93       	push	r28
 8b8:	c8 2f       	mov	r28, r24
	DIO_vwrite_port('A',cmd);
	DIO_vwrite_pin('B',RS,0);
	send_falling_edge();
	
	#elif defined four_bits_mode
	vwrite_highnibble('A',cmd>>4);
 8ba:	68 2f       	mov	r22, r24
 8bc:	62 95       	swap	r22
 8be:	6f 70       	andi	r22, 0x0F	; 15
 8c0:	81 e4       	ldi	r24, 0x41	; 65
 8c2:	0e 94 2b 04 	call	0x856	; 0x856 <vwrite_highnibble>
	DIO_vwrite_pin('A',RS,0);
 8c6:	81 e4       	ldi	r24, 0x41	; 65
 8c8:	62 e0       	ldi	r22, 0x02	; 2
 8ca:	40 e0       	ldi	r20, 0x00	; 0
 8cc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	send_falling_edge();
 8d0:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <send_falling_edge>
	vwrite_highnibble('A',cmd);
 8d4:	81 e4       	ldi	r24, 0x41	; 65
 8d6:	6c 2f       	mov	r22, r28
 8d8:	0e 94 2b 04 	call	0x856	; 0x856 <vwrite_highnibble>
	DIO_vwrite_pin('A',RS,0);
 8dc:	81 e4       	ldi	r24, 0x41	; 65
 8de:	62 e0       	ldi	r22, 0x02	; 2
 8e0:	40 e0       	ldi	r20, 0x00	; 0
 8e2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	send_falling_edge();
 8e6:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <send_falling_edge>
 8ea:	8f ec       	ldi	r24, 0xCF	; 207
 8ec:	97 e0       	ldi	r25, 0x07	; 7
 8ee:	01 97       	sbiw	r24, 0x01	; 1
 8f0:	f1 f7       	brne	.-4      	; 0x8ee <LCD_vsend_cmd+0x38>
 8f2:	00 c0       	rjmp	.+0      	; 0x8f4 <LCD_vsend_cmd+0x3e>
 8f4:	00 00       	nop
	_delay_ms(1);
	#endif
}
 8f6:	cf 91       	pop	r28
 8f8:	08 95       	ret

000008fa <LCD_vmove_cursor>:
}

void LCD_vmove_cursor(unsigned char row , unsigned char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
 8fa:	28 2f       	mov	r18, r24
 8fc:	21 50       	subi	r18, 0x01	; 1
 8fe:	22 30       	cpi	r18, 0x02	; 2
 900:	70 f4       	brcc	.+28     	; 0x91e <LCD_vmove_cursor+0x24>
 902:	61 31       	cpi	r22, 0x11	; 17
 904:	70 f4       	brcc	.+28     	; 0x922 <LCD_vmove_cursor+0x28>
 906:	66 23       	and	r22, r22
 908:	71 f0       	breq	.+28     	; 0x926 <LCD_vmove_cursor+0x2c>
	{
		data=0x80;
	}
	else if(row==1)
 90a:	81 30       	cpi	r24, 0x01	; 1
 90c:	19 f4       	brne	.+6      	; 0x914 <LCD_vmove_cursor+0x1a>
	{
		data=0x80+coloumn-1 ;
 90e:	96 2f       	mov	r25, r22
 910:	91 58       	subi	r25, 0x81	; 129
 912:	0a c0       	rjmp	.+20     	; 0x928 <LCD_vmove_cursor+0x2e>
	}
	else if (row==2)
 914:	82 30       	cpi	r24, 0x02	; 2
 916:	41 f4       	brne	.+16     	; 0x928 <LCD_vmove_cursor+0x2e>
	{
		data=0xc0+coloumn-1;
 918:	96 2f       	mov	r25, r22
 91a:	91 54       	subi	r25, 0x41	; 65
 91c:	05 c0       	rjmp	.+10     	; 0x928 <LCD_vmove_cursor+0x2e>
void LCD_vmove_cursor(unsigned char row , unsigned char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
	{
		data=0x80;
 91e:	90 e8       	ldi	r25, 0x80	; 128
 920:	03 c0       	rjmp	.+6      	; 0x928 <LCD_vmove_cursor+0x2e>
 922:	90 e8       	ldi	r25, 0x80	; 128
 924:	01 c0       	rjmp	.+2      	; 0x928 <LCD_vmove_cursor+0x2e>
 926:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if (row==2)
	{
		data=0xc0+coloumn-1;
	}
	LCD_vsend_cmd(data);
 928:	89 2f       	mov	r24, r25
 92a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <LCD_vsend_cmd>
 92e:	8f ec       	ldi	r24, 0xCF	; 207
 930:	97 e0       	ldi	r25, 0x07	; 7
 932:	01 97       	sbiw	r24, 0x01	; 1
 934:	f1 f7       	brne	.-4      	; 0x932 <LCD_vmove_cursor+0x38>
 936:	00 c0       	rjmp	.+0      	; 0x938 <LCD_vmove_cursor+0x3e>
 938:	00 00       	nop
	_delay_ms(1);	
}
 93a:	08 95       	ret

0000093c <LCD_vclearscreen>:
	_delay_ms(1);
	#endif
}
void LCD_vclearscreen()
{
	LCD_vsend_cmd(CLR_SCREEN);
 93c:	81 e0       	ldi	r24, 0x01	; 1
 93e:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <LCD_vsend_cmd>
 942:	8f e1       	ldi	r24, 0x1F	; 31
 944:	9e e4       	ldi	r25, 0x4E	; 78
 946:	01 97       	sbiw	r24, 0x01	; 1
 948:	f1 f7       	brne	.-4      	; 0x946 <LCD_vclearscreen+0xa>
 94a:	00 c0       	rjmp	.+0      	; 0x94c <LCD_vclearscreen+0x10>
 94c:	00 00       	nop
	_delay_ms(10);

}
 94e:	08 95       	ret

00000950 <LCD_vinit>:
 950:	8f ef       	ldi	r24, 0xFF	; 255
 952:	91 ee       	ldi	r25, 0xE1	; 225
 954:	a4 e0       	ldi	r26, 0x04	; 4
 956:	81 50       	subi	r24, 0x01	; 1
 958:	90 40       	sbci	r25, 0x00	; 0
 95a:	a0 40       	sbci	r26, 0x00	; 0
 95c:	e1 f7       	brne	.-8      	; 0x956 <LCD_vinit+0x6>
 95e:	00 c0       	rjmp	.+0      	; 0x960 <LCD_vinit+0x10>
 960:	00 00       	nop
	LCD_vsend_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1);
	
	#elif defined four_bits_mode
	_delay_ms(200);
	DIO_vset_pindir('A',4,1);
 962:	81 e4       	ldi	r24, 0x41	; 65
 964:	64 e0       	ldi	r22, 0x04	; 4
 966:	41 e0       	ldi	r20, 0x01	; 1
 968:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('A',5,1);
 96c:	81 e4       	ldi	r24, 0x41	; 65
 96e:	65 e0       	ldi	r22, 0x05	; 5
 970:	41 e0       	ldi	r20, 0x01	; 1
 972:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('A',6,1);
 976:	81 e4       	ldi	r24, 0x41	; 65
 978:	66 e0       	ldi	r22, 0x06	; 6
 97a:	41 e0       	ldi	r20, 0x01	; 1
 97c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('A',7,1);
 980:	81 e4       	ldi	r24, 0x41	; 65
 982:	67 e0       	ldi	r22, 0x07	; 7
 984:	41 e0       	ldi	r20, 0x01	; 1
 986:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('A',EN,1);
 98a:	81 e4       	ldi	r24, 0x41	; 65
 98c:	60 e0       	ldi	r22, 0x00	; 0
 98e:	41 e0       	ldi	r20, 0x01	; 1
 990:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('A',RW,1);
 994:	81 e4       	ldi	r24, 0x41	; 65
 996:	61 e0       	ldi	r22, 0x01	; 1
 998:	41 e0       	ldi	r20, 0x01	; 1
 99a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('A',RS,1);
 99e:	81 e4       	ldi	r24, 0x41	; 65
 9a0:	62 e0       	ldi	r22, 0x02	; 2
 9a2:	41 e0       	ldi	r20, 0x01	; 1
 9a4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vwrite_pin('A',RW,0);
 9a8:	81 e4       	ldi	r24, 0x41	; 65
 9aa:	61 e0       	ldi	r22, 0x01	; 1
 9ac:	40 e0       	ldi	r20, 0x00	; 0
 9ae:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	LCD_vsend_cmd(RETURN_HOME); //return home
 9b2:	82 e0       	ldi	r24, 0x02	; 2
 9b4:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <LCD_vsend_cmd>
 9b8:	af e1       	ldi	r26, 0x1F	; 31
 9ba:	be e4       	ldi	r27, 0x4E	; 78
 9bc:	11 97       	sbiw	r26, 0x01	; 1
 9be:	f1 f7       	brne	.-4      	; 0x9bc <LCD_vinit+0x6c>
 9c0:	00 c0       	rjmp	.+0      	; 0x9c2 <LCD_vinit+0x72>
 9c2:	00 00       	nop
	_delay_ms(10);
	LCD_vsend_cmd(FOUR_BITS); //4 bit mode
 9c4:	88 e2       	ldi	r24, 0x28	; 40
 9c6:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <LCD_vsend_cmd>
 9ca:	8f ec       	ldi	r24, 0xCF	; 207
 9cc:	97 e0       	ldi	r25, 0x07	; 7
 9ce:	01 97       	sbiw	r24, 0x01	; 1
 9d0:	f1 f7       	brne	.-4      	; 0x9ce <LCD_vinit+0x7e>
 9d2:	00 c0       	rjmp	.+0      	; 0x9d4 <LCD_vinit+0x84>
 9d4:	00 00       	nop
	_delay_ms(1);
	LCD_vsend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
 9d6:	8e e0       	ldi	r24, 0x0E	; 14
 9d8:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <LCD_vsend_cmd>
 9dc:	af ec       	ldi	r26, 0xCF	; 207
 9de:	b7 e0       	ldi	r27, 0x07	; 7
 9e0:	11 97       	sbiw	r26, 0x01	; 1
 9e2:	f1 f7       	brne	.-4      	; 0x9e0 <LCD_vinit+0x90>
 9e4:	00 c0       	rjmp	.+0      	; 0x9e6 <LCD_vinit+0x96>
 9e6:	00 00       	nop
	_delay_ms(1);
	LCD_vsend_cmd(CLR_SCREEN);//clear the screen
 9e8:	81 e0       	ldi	r24, 0x01	; 1
 9ea:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <LCD_vsend_cmd>
 9ee:	8f e1       	ldi	r24, 0x1F	; 31
 9f0:	9e e4       	ldi	r25, 0x4E	; 78
 9f2:	01 97       	sbiw	r24, 0x01	; 1
 9f4:	f1 f7       	brne	.-4      	; 0x9f2 <LCD_vinit+0xa2>
 9f6:	00 c0       	rjmp	.+0      	; 0x9f8 <LCD_vinit+0xa8>
 9f8:	00 00       	nop
	_delay_ms(10);
	LCD_vsend_cmd(ENTRY_MODE); //entry mode
 9fa:	86 e0       	ldi	r24, 0x06	; 6
 9fc:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <LCD_vsend_cmd>
 a00:	af ec       	ldi	r26, 0xCF	; 207
 a02:	b7 e0       	ldi	r27, 0x07	; 7
 a04:	11 97       	sbiw	r26, 0x01	; 1
 a06:	f1 f7       	brne	.-4      	; 0xa04 <LCD_vinit+0xb4>
 a08:	00 c0       	rjmp	.+0      	; 0xa0a <LCD_vinit+0xba>
 a0a:	00 00       	nop
	_delay_ms(1);
	#endif
}
 a0c:	08 95       	ret

00000a0e <LCD_vsend_char>:
	_delay_ms(2);
	DIO_vwrite_pin('A',EN,0);
	_delay_ms(2);
}
void LCD_vsend_char(char data)
{
 a0e:	cf 93       	push	r28
 a10:	c8 2f       	mov	r28, r24
	DIO_vwrite_port('A',data);
	DIO_vwrite_pin('B',RS,1);
	send_falling_edge();
	
	#elif defined four_bits_mode
	vwrite_highnibble('A',data>>4);
 a12:	68 2f       	mov	r22, r24
 a14:	62 95       	swap	r22
 a16:	6f 70       	andi	r22, 0x0F	; 15
 a18:	81 e4       	ldi	r24, 0x41	; 65
 a1a:	0e 94 2b 04 	call	0x856	; 0x856 <vwrite_highnibble>
	DIO_vwrite_pin('A',RS,1);
 a1e:	81 e4       	ldi	r24, 0x41	; 65
 a20:	62 e0       	ldi	r22, 0x02	; 2
 a22:	41 e0       	ldi	r20, 0x01	; 1
 a24:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	send_falling_edge();
 a28:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <send_falling_edge>
	vwrite_highnibble('A',data);
 a2c:	81 e4       	ldi	r24, 0x41	; 65
 a2e:	6c 2f       	mov	r22, r28
 a30:	0e 94 2b 04 	call	0x856	; 0x856 <vwrite_highnibble>
	DIO_vwrite_pin('A',RS,1);
 a34:	81 e4       	ldi	r24, 0x41	; 65
 a36:	62 e0       	ldi	r22, 0x02	; 2
 a38:	41 e0       	ldi	r20, 0x01	; 1
 a3a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	send_falling_edge();
 a3e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <send_falling_edge>
 a42:	8f ec       	ldi	r24, 0xCF	; 207
 a44:	97 e0       	ldi	r25, 0x07	; 7
 a46:	01 97       	sbiw	r24, 0x01	; 1
 a48:	f1 f7       	brne	.-4      	; 0xa46 <LCD_vsend_char+0x38>
 a4a:	00 c0       	rjmp	.+0      	; 0xa4c <LCD_vsend_char+0x3e>
 a4c:	00 00       	nop
	_delay_ms(1);
	#endif
}
 a4e:	cf 91       	pop	r28
 a50:	08 95       	ret

00000a52 <LCD_vSend_string>:
	}
	LCD_vsend_cmd(data);
	_delay_ms(1);	
}
void LCD_vSend_string(char *data)
{
 a52:	cf 93       	push	r28
 a54:	df 93       	push	r29
 a56:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 a58:	88 81       	ld	r24, Y
 a5a:	88 23       	and	r24, r24
 a5c:	31 f0       	breq	.+12     	; 0xa6a <LCD_vSend_string+0x18>
		data=0xc0+coloumn-1;
	}
	LCD_vsend_cmd(data);
	_delay_ms(1);	
}
void LCD_vSend_string(char *data)
 a5e:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_vsend_char(*data);
 a60:	0e 94 07 05 	call	0xa0e	; 0xa0e <LCD_vsend_char>
	LCD_vsend_cmd(data);
	_delay_ms(1);	
}
void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
 a64:	89 91       	ld	r24, Y+
 a66:	88 23       	and	r24, r24
 a68:	d9 f7       	brne	.-10     	; 0xa60 <LCD_vSend_string+0xe>
	{
		LCD_vsend_char(*data);
		data++;
	}
}
 a6a:	df 91       	pop	r29
 a6c:	cf 91       	pop	r28
 a6e:	08 95       	ret

00000a70 <timer_ctc_init_interrupt>:
#include "std_macros.h"
#include <avr/io.h>
#include <avr/interrupt.h>
void timer_ctc_init_interrupt(void)
{
	SET_BIT(TCCR0,WGM01);
 a70:	83 b7       	in	r24, 0x33	; 51
 a72:	88 60       	ori	r24, 0x08	; 8
 a74:	83 bf       	out	0x33, r24	; 51
	OCR0=80;
 a76:	80 e5       	ldi	r24, 0x50	; 80
 a78:	8c bf       	out	0x3c, r24	; 60
	SET_BIT(TCCR0,CS00);
 a7a:	83 b7       	in	r24, 0x33	; 51
 a7c:	81 60       	ori	r24, 0x01	; 1
 a7e:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 a80:	83 b7       	in	r24, 0x33	; 51
 a82:	84 60       	ori	r24, 0x04	; 4
 a84:	83 bf       	out	0x33, r24	; 51
	sei();
 a86:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);
 a88:	89 b7       	in	r24, 0x39	; 57
 a8a:	82 60       	ori	r24, 0x02	; 2
 a8c:	89 bf       	out	0x39, r24	; 57
}
 a8e:	08 95       	ret

00000a90 <timer_1_wave_fastpwm_B>:
void timer_1_wave_fastpwm_B(double value)
{
	SET_BIT(DDRD,5);
 a90:	8d 9a       	sbi	0x11, 5	; 17
	SET_BIT(TCCR1A,WGM11);
 a92:	2f b5       	in	r18, 0x2f	; 47
 a94:	22 60       	ori	r18, 0x02	; 2
 a96:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1B,WGM12);
 a98:	2e b5       	in	r18, 0x2e	; 46
 a9a:	28 60       	ori	r18, 0x08	; 8
 a9c:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,WGM13);
 a9e:	2e b5       	in	r18, 0x2e	; 46
 aa0:	20 61       	ori	r18, 0x10	; 16
 aa2:	2e bd       	out	0x2e, r18	; 46
	OCR1B=value*1000;
 aa4:	20 e0       	ldi	r18, 0x00	; 0
 aa6:	30 e0       	ldi	r19, 0x00	; 0
 aa8:	4a e7       	ldi	r20, 0x7A	; 122
 aaa:	54 e4       	ldi	r21, 0x44	; 68
 aac:	0e 94 df 05 	call	0xbbe	; 0xbbe <__mulsf3>
 ab0:	0e 94 8a 05 	call	0xb14	; 0xb14 <__fixunssfsi>
 ab4:	dc 01       	movw	r26, r24
 ab6:	cb 01       	movw	r24, r22
 ab8:	99 bd       	out	0x29, r25	; 41
 aba:	88 bd       	out	0x28, r24	; 40
	ICR1=19999;
 abc:	8f e1       	ldi	r24, 0x1F	; 31
 abe:	9e e4       	ldi	r25, 0x4E	; 78
 ac0:	97 bd       	out	0x27, r25	; 39
 ac2:	86 bd       	out	0x26, r24	; 38
	SET_BIT(TCCR1B,CS10);
 ac4:	8e b5       	in	r24, 0x2e	; 46
 ac6:	81 60       	ori	r24, 0x01	; 1
 ac8:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1A,COM1B1);
 aca:	8f b5       	in	r24, 0x2f	; 47
 acc:	80 62       	ori	r24, 0x20	; 32
 ace:	8f bd       	out	0x2f, r24	; 47
}
 ad0:	08 95       	ret

00000ad2 <timer_1_wave_fastpwm_A>:
void timer_1_wave_fastpwm_A(double value)
{
	SET_BIT(DDRD,4);
 ad2:	8c 9a       	sbi	0x11, 4	; 17
	SET_BIT(TCCR1A,WGM11);
 ad4:	2f b5       	in	r18, 0x2f	; 47
 ad6:	22 60       	ori	r18, 0x02	; 2
 ad8:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1B,WGM12);
 ada:	2e b5       	in	r18, 0x2e	; 46
 adc:	28 60       	ori	r18, 0x08	; 8
 ade:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,WGM13);
 ae0:	2e b5       	in	r18, 0x2e	; 46
 ae2:	20 61       	ori	r18, 0x10	; 16
 ae4:	2e bd       	out	0x2e, r18	; 46
	OCR1A=value*1000;
 ae6:	20 e0       	ldi	r18, 0x00	; 0
 ae8:	30 e0       	ldi	r19, 0x00	; 0
 aea:	4a e7       	ldi	r20, 0x7A	; 122
 aec:	54 e4       	ldi	r21, 0x44	; 68
 aee:	0e 94 df 05 	call	0xbbe	; 0xbbe <__mulsf3>
 af2:	0e 94 8a 05 	call	0xb14	; 0xb14 <__fixunssfsi>
 af6:	dc 01       	movw	r26, r24
 af8:	cb 01       	movw	r24, r22
 afa:	9b bd       	out	0x2b, r25	; 43
 afc:	8a bd       	out	0x2a, r24	; 42
	ICR1=19999;
 afe:	8f e1       	ldi	r24, 0x1F	; 31
 b00:	9e e4       	ldi	r25, 0x4E	; 78
 b02:	97 bd       	out	0x27, r25	; 39
 b04:	86 bd       	out	0x26, r24	; 38
	SET_BIT(TCCR1B,CS10);
 b06:	8e b5       	in	r24, 0x2e	; 46
 b08:	81 60       	ori	r24, 0x01	; 1
 b0a:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1A,COM1A1);
 b0c:	8f b5       	in	r24, 0x2f	; 47
 b0e:	80 68       	ori	r24, 0x80	; 128
 b10:	8f bd       	out	0x2f, r24	; 47
 b12:	08 95       	ret

00000b14 <__fixunssfsi>:
 b14:	33 d0       	rcall	.+102    	; 0xb7c <__fp_splitA>
 b16:	88 f0       	brcs	.+34     	; 0xb3a <__fixunssfsi+0x26>
 b18:	9f 57       	subi	r25, 0x7F	; 127
 b1a:	90 f0       	brcs	.+36     	; 0xb40 <__fixunssfsi+0x2c>
 b1c:	b9 2f       	mov	r27, r25
 b1e:	99 27       	eor	r25, r25
 b20:	b7 51       	subi	r27, 0x17	; 23
 b22:	a0 f0       	brcs	.+40     	; 0xb4c <__fixunssfsi+0x38>
 b24:	d1 f0       	breq	.+52     	; 0xb5a <__fixunssfsi+0x46>
 b26:	66 0f       	add	r22, r22
 b28:	77 1f       	adc	r23, r23
 b2a:	88 1f       	adc	r24, r24
 b2c:	99 1f       	adc	r25, r25
 b2e:	1a f0       	brmi	.+6      	; 0xb36 <__fixunssfsi+0x22>
 b30:	ba 95       	dec	r27
 b32:	c9 f7       	brne	.-14     	; 0xb26 <__fixunssfsi+0x12>
 b34:	12 c0       	rjmp	.+36     	; 0xb5a <__fixunssfsi+0x46>
 b36:	b1 30       	cpi	r27, 0x01	; 1
 b38:	81 f0       	breq	.+32     	; 0xb5a <__fixunssfsi+0x46>
 b3a:	3a d0       	rcall	.+116    	; 0xbb0 <__fp_zero>
 b3c:	b1 e0       	ldi	r27, 0x01	; 1
 b3e:	08 95       	ret
 b40:	37 c0       	rjmp	.+110    	; 0xbb0 <__fp_zero>
 b42:	67 2f       	mov	r22, r23
 b44:	78 2f       	mov	r23, r24
 b46:	88 27       	eor	r24, r24
 b48:	b8 5f       	subi	r27, 0xF8	; 248
 b4a:	39 f0       	breq	.+14     	; 0xb5a <__fixunssfsi+0x46>
 b4c:	b9 3f       	cpi	r27, 0xF9	; 249
 b4e:	cc f3       	brlt	.-14     	; 0xb42 <__fixunssfsi+0x2e>
 b50:	86 95       	lsr	r24
 b52:	77 95       	ror	r23
 b54:	67 95       	ror	r22
 b56:	b3 95       	inc	r27
 b58:	d9 f7       	brne	.-10     	; 0xb50 <__fixunssfsi+0x3c>
 b5a:	3e f4       	brtc	.+14     	; 0xb6a <__fixunssfsi+0x56>
 b5c:	90 95       	com	r25
 b5e:	80 95       	com	r24
 b60:	70 95       	com	r23
 b62:	61 95       	neg	r22
 b64:	7f 4f       	sbci	r23, 0xFF	; 255
 b66:	8f 4f       	sbci	r24, 0xFF	; 255
 b68:	9f 4f       	sbci	r25, 0xFF	; 255
 b6a:	08 95       	ret

00000b6c <__fp_split3>:
 b6c:	57 fd       	sbrc	r21, 7
 b6e:	90 58       	subi	r25, 0x80	; 128
 b70:	44 0f       	add	r20, r20
 b72:	55 1f       	adc	r21, r21
 b74:	59 f0       	breq	.+22     	; 0xb8c <__fp_splitA+0x10>
 b76:	5f 3f       	cpi	r21, 0xFF	; 255
 b78:	71 f0       	breq	.+28     	; 0xb96 <__fp_splitA+0x1a>
 b7a:	47 95       	ror	r20

00000b7c <__fp_splitA>:
 b7c:	88 0f       	add	r24, r24
 b7e:	97 fb       	bst	r25, 7
 b80:	99 1f       	adc	r25, r25
 b82:	61 f0       	breq	.+24     	; 0xb9c <__fp_splitA+0x20>
 b84:	9f 3f       	cpi	r25, 0xFF	; 255
 b86:	79 f0       	breq	.+30     	; 0xba6 <__fp_splitA+0x2a>
 b88:	87 95       	ror	r24
 b8a:	08 95       	ret
 b8c:	12 16       	cp	r1, r18
 b8e:	13 06       	cpc	r1, r19
 b90:	14 06       	cpc	r1, r20
 b92:	55 1f       	adc	r21, r21
 b94:	f2 cf       	rjmp	.-28     	; 0xb7a <__fp_split3+0xe>
 b96:	46 95       	lsr	r20
 b98:	f1 df       	rcall	.-30     	; 0xb7c <__fp_splitA>
 b9a:	08 c0       	rjmp	.+16     	; 0xbac <__fp_splitA+0x30>
 b9c:	16 16       	cp	r1, r22
 b9e:	17 06       	cpc	r1, r23
 ba0:	18 06       	cpc	r1, r24
 ba2:	99 1f       	adc	r25, r25
 ba4:	f1 cf       	rjmp	.-30     	; 0xb88 <__fp_splitA+0xc>
 ba6:	86 95       	lsr	r24
 ba8:	71 05       	cpc	r23, r1
 baa:	61 05       	cpc	r22, r1
 bac:	08 94       	sec
 bae:	08 95       	ret

00000bb0 <__fp_zero>:
 bb0:	e8 94       	clt

00000bb2 <__fp_szero>:
 bb2:	bb 27       	eor	r27, r27
 bb4:	66 27       	eor	r22, r22
 bb6:	77 27       	eor	r23, r23
 bb8:	cb 01       	movw	r24, r22
 bba:	97 f9       	bld	r25, 7
 bbc:	08 95       	ret

00000bbe <__mulsf3>:
 bbe:	0b d0       	rcall	.+22     	; 0xbd6 <__mulsf3x>
 bc0:	78 c0       	rjmp	.+240    	; 0xcb2 <__fp_round>
 bc2:	69 d0       	rcall	.+210    	; 0xc96 <__fp_pscA>
 bc4:	28 f0       	brcs	.+10     	; 0xbd0 <__mulsf3+0x12>
 bc6:	6e d0       	rcall	.+220    	; 0xca4 <__fp_pscB>
 bc8:	18 f0       	brcs	.+6      	; 0xbd0 <__mulsf3+0x12>
 bca:	95 23       	and	r25, r21
 bcc:	09 f0       	breq	.+2      	; 0xbd0 <__mulsf3+0x12>
 bce:	5a c0       	rjmp	.+180    	; 0xc84 <__fp_inf>
 bd0:	5f c0       	rjmp	.+190    	; 0xc90 <__fp_nan>
 bd2:	11 24       	eor	r1, r1
 bd4:	ee cf       	rjmp	.-36     	; 0xbb2 <__fp_szero>

00000bd6 <__mulsf3x>:
 bd6:	ca df       	rcall	.-108    	; 0xb6c <__fp_split3>
 bd8:	a0 f3       	brcs	.-24     	; 0xbc2 <__mulsf3+0x4>

00000bda <__mulsf3_pse>:
 bda:	95 9f       	mul	r25, r21
 bdc:	d1 f3       	breq	.-12     	; 0xbd2 <__mulsf3+0x14>
 bde:	95 0f       	add	r25, r21
 be0:	50 e0       	ldi	r21, 0x00	; 0
 be2:	55 1f       	adc	r21, r21
 be4:	62 9f       	mul	r22, r18
 be6:	f0 01       	movw	r30, r0
 be8:	72 9f       	mul	r23, r18
 bea:	bb 27       	eor	r27, r27
 bec:	f0 0d       	add	r31, r0
 bee:	b1 1d       	adc	r27, r1
 bf0:	63 9f       	mul	r22, r19
 bf2:	aa 27       	eor	r26, r26
 bf4:	f0 0d       	add	r31, r0
 bf6:	b1 1d       	adc	r27, r1
 bf8:	aa 1f       	adc	r26, r26
 bfa:	64 9f       	mul	r22, r20
 bfc:	66 27       	eor	r22, r22
 bfe:	b0 0d       	add	r27, r0
 c00:	a1 1d       	adc	r26, r1
 c02:	66 1f       	adc	r22, r22
 c04:	82 9f       	mul	r24, r18
 c06:	22 27       	eor	r18, r18
 c08:	b0 0d       	add	r27, r0
 c0a:	a1 1d       	adc	r26, r1
 c0c:	62 1f       	adc	r22, r18
 c0e:	73 9f       	mul	r23, r19
 c10:	b0 0d       	add	r27, r0
 c12:	a1 1d       	adc	r26, r1
 c14:	62 1f       	adc	r22, r18
 c16:	83 9f       	mul	r24, r19
 c18:	a0 0d       	add	r26, r0
 c1a:	61 1d       	adc	r22, r1
 c1c:	22 1f       	adc	r18, r18
 c1e:	74 9f       	mul	r23, r20
 c20:	33 27       	eor	r19, r19
 c22:	a0 0d       	add	r26, r0
 c24:	61 1d       	adc	r22, r1
 c26:	23 1f       	adc	r18, r19
 c28:	84 9f       	mul	r24, r20
 c2a:	60 0d       	add	r22, r0
 c2c:	21 1d       	adc	r18, r1
 c2e:	82 2f       	mov	r24, r18
 c30:	76 2f       	mov	r23, r22
 c32:	6a 2f       	mov	r22, r26
 c34:	11 24       	eor	r1, r1
 c36:	9f 57       	subi	r25, 0x7F	; 127
 c38:	50 40       	sbci	r21, 0x00	; 0
 c3a:	8a f0       	brmi	.+34     	; 0xc5e <__mulsf3_pse+0x84>
 c3c:	e1 f0       	breq	.+56     	; 0xc76 <__mulsf3_pse+0x9c>
 c3e:	88 23       	and	r24, r24
 c40:	4a f0       	brmi	.+18     	; 0xc54 <__mulsf3_pse+0x7a>
 c42:	ee 0f       	add	r30, r30
 c44:	ff 1f       	adc	r31, r31
 c46:	bb 1f       	adc	r27, r27
 c48:	66 1f       	adc	r22, r22
 c4a:	77 1f       	adc	r23, r23
 c4c:	88 1f       	adc	r24, r24
 c4e:	91 50       	subi	r25, 0x01	; 1
 c50:	50 40       	sbci	r21, 0x00	; 0
 c52:	a9 f7       	brne	.-22     	; 0xc3e <__mulsf3_pse+0x64>
 c54:	9e 3f       	cpi	r25, 0xFE	; 254
 c56:	51 05       	cpc	r21, r1
 c58:	70 f0       	brcs	.+28     	; 0xc76 <__mulsf3_pse+0x9c>
 c5a:	14 c0       	rjmp	.+40     	; 0xc84 <__fp_inf>
 c5c:	aa cf       	rjmp	.-172    	; 0xbb2 <__fp_szero>
 c5e:	5f 3f       	cpi	r21, 0xFF	; 255
 c60:	ec f3       	brlt	.-6      	; 0xc5c <__mulsf3_pse+0x82>
 c62:	98 3e       	cpi	r25, 0xE8	; 232
 c64:	dc f3       	brlt	.-10     	; 0xc5c <__mulsf3_pse+0x82>
 c66:	86 95       	lsr	r24
 c68:	77 95       	ror	r23
 c6a:	67 95       	ror	r22
 c6c:	b7 95       	ror	r27
 c6e:	f7 95       	ror	r31
 c70:	e7 95       	ror	r30
 c72:	9f 5f       	subi	r25, 0xFF	; 255
 c74:	c1 f7       	brne	.-16     	; 0xc66 <__mulsf3_pse+0x8c>
 c76:	fe 2b       	or	r31, r30
 c78:	88 0f       	add	r24, r24
 c7a:	91 1d       	adc	r25, r1
 c7c:	96 95       	lsr	r25
 c7e:	87 95       	ror	r24
 c80:	97 f9       	bld	r25, 7
 c82:	08 95       	ret

00000c84 <__fp_inf>:
 c84:	97 f9       	bld	r25, 7
 c86:	9f 67       	ori	r25, 0x7F	; 127
 c88:	80 e8       	ldi	r24, 0x80	; 128
 c8a:	70 e0       	ldi	r23, 0x00	; 0
 c8c:	60 e0       	ldi	r22, 0x00	; 0
 c8e:	08 95       	ret

00000c90 <__fp_nan>:
 c90:	9f ef       	ldi	r25, 0xFF	; 255
 c92:	80 ec       	ldi	r24, 0xC0	; 192
 c94:	08 95       	ret

00000c96 <__fp_pscA>:
 c96:	00 24       	eor	r0, r0
 c98:	0a 94       	dec	r0
 c9a:	16 16       	cp	r1, r22
 c9c:	17 06       	cpc	r1, r23
 c9e:	18 06       	cpc	r1, r24
 ca0:	09 06       	cpc	r0, r25
 ca2:	08 95       	ret

00000ca4 <__fp_pscB>:
 ca4:	00 24       	eor	r0, r0
 ca6:	0a 94       	dec	r0
 ca8:	12 16       	cp	r1, r18
 caa:	13 06       	cpc	r1, r19
 cac:	14 06       	cpc	r1, r20
 cae:	05 06       	cpc	r0, r21
 cb0:	08 95       	ret

00000cb2 <__fp_round>:
 cb2:	09 2e       	mov	r0, r25
 cb4:	03 94       	inc	r0
 cb6:	00 0c       	add	r0, r0
 cb8:	11 f4       	brne	.+4      	; 0xcbe <__fp_round+0xc>
 cba:	88 23       	and	r24, r24
 cbc:	52 f0       	brmi	.+20     	; 0xcd2 <__fp_round+0x20>
 cbe:	bb 0f       	add	r27, r27
 cc0:	40 f4       	brcc	.+16     	; 0xcd2 <__fp_round+0x20>
 cc2:	bf 2b       	or	r27, r31
 cc4:	11 f4       	brne	.+4      	; 0xcca <__fp_round+0x18>
 cc6:	60 ff       	sbrs	r22, 0
 cc8:	04 c0       	rjmp	.+8      	; 0xcd2 <__fp_round+0x20>
 cca:	6f 5f       	subi	r22, 0xFF	; 255
 ccc:	7f 4f       	sbci	r23, 0xFF	; 255
 cce:	8f 4f       	sbci	r24, 0xFF	; 255
 cd0:	9f 4f       	sbci	r25, 0xFF	; 255
 cd2:	08 95       	ret

00000cd4 <_exit>:
 cd4:	f8 94       	cli

00000cd6 <__stop_program>:
 cd6:	ff cf       	rjmp	.-2      	; 0xcd6 <__stop_program>
