
Real Time Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005c  00800060  00000e78  00000f0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000bc  008000bc  00000f68  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000f68  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000016c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001258  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004ff  00000000  00000000  00002a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a0e  00000000  00000000  00002f57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000028c  00000000  00000000  00003968  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000398  00000000  00000000  00003bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a98  00000000  00000000  00003f8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e7       	ldi	r30, 0x78	; 120
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3b       	cpi	r26, 0xBC	; 188
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac eb       	ldi	r26, 0xBC	; 188
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3c       	cpi	r26, 0xC2	; 194
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1f 05 	call	0xa3e	; 0xa3e <main>
  8a:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vset_pindir>:
#define F_CPU 8000000UL
#include <util/delay.h>
#include "std_macros.h"
void DIO_vset_pindir(unsigned char port,unsigned char pin,unsigned char dir)
{
switch(port)
  92:	84 34       	cpi	r24, 0x44	; 68
  94:	09 f4       	brne	.+2      	; 0x98 <DIO_vset_pindir+0x6>
  96:	71 c0       	rjmp	.+226    	; 0x17a <DIO_vset_pindir+0xe8>
  98:	85 34       	cpi	r24, 0x45	; 69
  9a:	48 f4       	brcc	.+18     	; 0xae <DIO_vset_pindir+0x1c>
  9c:	82 34       	cpi	r24, 0x42	; 66
  9e:	99 f1       	breq	.+102    	; 0x106 <DIO_vset_pindir+0x74>
  a0:	83 34       	cpi	r24, 0x43	; 67
  a2:	08 f0       	brcs	.+2      	; 0xa6 <DIO_vset_pindir+0x14>
  a4:	4d c0       	rjmp	.+154    	; 0x140 <DIO_vset_pindir+0xae>
  a6:	81 34       	cpi	r24, 0x41	; 65
  a8:	09 f0       	breq	.+2      	; 0xac <DIO_vset_pindir+0x1a>
  aa:	83 c0       	rjmp	.+262    	; 0x1b2 <DIO_vset_pindir+0x120>
  ac:	0f c0       	rjmp	.+30     	; 0xcc <DIO_vset_pindir+0x3a>
  ae:	82 36       	cpi	r24, 0x62	; 98
  b0:	51 f1       	breq	.+84     	; 0x106 <DIO_vset_pindir+0x74>
  b2:	83 36       	cpi	r24, 0x63	; 99
  b4:	20 f4       	brcc	.+8      	; 0xbe <DIO_vset_pindir+0x2c>
  b6:	81 36       	cpi	r24, 0x61	; 97
  b8:	09 f0       	breq	.+2      	; 0xbc <DIO_vset_pindir+0x2a>
  ba:	7b c0       	rjmp	.+246    	; 0x1b2 <DIO_vset_pindir+0x120>
  bc:	07 c0       	rjmp	.+14     	; 0xcc <DIO_vset_pindir+0x3a>
  be:	83 36       	cpi	r24, 0x63	; 99
  c0:	09 f4       	brne	.+2      	; 0xc4 <DIO_vset_pindir+0x32>
  c2:	3e c0       	rjmp	.+124    	; 0x140 <DIO_vset_pindir+0xae>
  c4:	84 36       	cpi	r24, 0x64	; 100
  c6:	09 f0       	breq	.+2      	; 0xca <DIO_vset_pindir+0x38>
  c8:	74 c0       	rjmp	.+232    	; 0x1b2 <DIO_vset_pindir+0x120>
  ca:	57 c0       	rjmp	.+174    	; 0x17a <DIO_vset_pindir+0xe8>
{
	case 'A':
	case 'a':
	if(dir==1)
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	69 f4       	brne	.+26     	; 0xea <DIO_vset_pindir+0x58>
	{
		SET_BIT(DDRA,pin);
  d0:	2a b3       	in	r18, 0x1a	; 26
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	ac 01       	movw	r20, r24
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_vset_pindir+0x4c>
  da:	44 0f       	add	r20, r20
  dc:	55 1f       	adc	r21, r21
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_vset_pindir+0x48>
  e2:	ba 01       	movw	r22, r20
  e4:	62 2b       	or	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
	} 
	else
	{
		CLR_BIT(DDRA,pin);
  ea:	2a b3       	in	r18, 0x1a	; 26
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	ac 01       	movw	r20, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_vset_pindir+0x66>
  f4:	44 0f       	add	r20, r20
  f6:	55 1f       	adc	r21, r21
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_vset_pindir+0x62>
  fc:	ba 01       	movw	r22, r20
  fe:	60 95       	com	r22
 100:	62 23       	and	r22, r18
 102:	6a bb       	out	0x1a, r22	; 26
 104:	08 95       	ret
	}
	break;
	case 'B':
	case 'b':
	if(dir==1)
 106:	41 30       	cpi	r20, 0x01	; 1
 108:	69 f4       	brne	.+26     	; 0x124 <DIO_vset_pindir+0x92>
	{
		SET_BIT(DDRB,pin);
 10a:	27 b3       	in	r18, 0x17	; 23
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	ac 01       	movw	r20, r24
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_vset_pindir+0x86>
 114:	44 0f       	add	r20, r20
 116:	55 1f       	adc	r21, r21
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_vset_pindir+0x82>
 11c:	ba 01       	movw	r22, r20
 11e:	62 2b       	or	r22, r18
 120:	67 bb       	out	0x17, r22	; 23
 122:	08 95       	ret
	}
	else
	{
		CLR_BIT(DDRB,pin);
 124:	27 b3       	in	r18, 0x17	; 23
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_vset_pindir+0xa0>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_vset_pindir+0x9c>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	67 bb       	out	0x17, r22	; 23
 13e:	08 95       	ret
	}
	break;
	case 'C':
	case 'c':
	if(dir==1)
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	69 f4       	brne	.+26     	; 0x15e <DIO_vset_pindir+0xcc>
	{
		SET_BIT(DDRC,pin);
 144:	24 b3       	in	r18, 0x14	; 20
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	ac 01       	movw	r20, r24
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_vset_pindir+0xc0>
 14e:	44 0f       	add	r20, r20
 150:	55 1f       	adc	r21, r21
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_vset_pindir+0xbc>
 156:	ba 01       	movw	r22, r20
 158:	62 2b       	or	r22, r18
 15a:	64 bb       	out	0x14, r22	; 20
 15c:	08 95       	ret
	}
	else
	{
		CLR_BIT(DDRC,pin);
 15e:	24 b3       	in	r18, 0x14	; 20
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	ac 01       	movw	r20, r24
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_vset_pindir+0xda>
 168:	44 0f       	add	r20, r20
 16a:	55 1f       	adc	r21, r21
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_vset_pindir+0xd6>
 170:	ba 01       	movw	r22, r20
 172:	60 95       	com	r22
 174:	62 23       	and	r22, r18
 176:	64 bb       	out	0x14, r22	; 20
 178:	08 95       	ret
	}
	break;
	case 'D':
	case 'd':
	if(dir==1)
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	69 f4       	brne	.+26     	; 0x198 <DIO_vset_pindir+0x106>
	{
		SET_BIT(DDRD,pin);
 17e:	21 b3       	in	r18, 0x11	; 17
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	ac 01       	movw	r20, r24
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_vset_pindir+0xfa>
 188:	44 0f       	add	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_vset_pindir+0xf6>
 190:	ba 01       	movw	r22, r20
 192:	62 2b       	or	r22, r18
 194:	61 bb       	out	0x11, r22	; 17
 196:	08 95       	ret
	}
	else
	{
		CLR_BIT(DDRD,pin);
 198:	21 b3       	in	r18, 0x11	; 17
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	ac 01       	movw	r20, r24
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_vset_pindir+0x114>
 1a2:	44 0f       	add	r20, r20
 1a4:	55 1f       	adc	r21, r21
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_vset_pindir+0x110>
 1aa:	ba 01       	movw	r22, r20
 1ac:	60 95       	com	r22
 1ae:	62 23       	and	r22, r18
 1b0:	61 bb       	out	0x11, r22	; 17
 1b2:	08 95       	ret

000001b4 <DIO_vwrite_pin>:
	}
	break;
}}
void DIO_vwrite_pin(unsigned char port,unsigned char pin,unsigned char val)
{
	switch(port)
 1b4:	84 34       	cpi	r24, 0x44	; 68
 1b6:	09 f4       	brne	.+2      	; 0x1ba <DIO_vwrite_pin+0x6>
 1b8:	71 c0       	rjmp	.+226    	; 0x29c <DIO_vwrite_pin+0xe8>
 1ba:	85 34       	cpi	r24, 0x45	; 69
 1bc:	48 f4       	brcc	.+18     	; 0x1d0 <DIO_vwrite_pin+0x1c>
 1be:	82 34       	cpi	r24, 0x42	; 66
 1c0:	99 f1       	breq	.+102    	; 0x228 <DIO_vwrite_pin+0x74>
 1c2:	83 34       	cpi	r24, 0x43	; 67
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <DIO_vwrite_pin+0x14>
 1c6:	4d c0       	rjmp	.+154    	; 0x262 <DIO_vwrite_pin+0xae>
 1c8:	81 34       	cpi	r24, 0x41	; 65
 1ca:	09 f0       	breq	.+2      	; 0x1ce <DIO_vwrite_pin+0x1a>
 1cc:	83 c0       	rjmp	.+262    	; 0x2d4 <DIO_vwrite_pin+0x120>
 1ce:	0f c0       	rjmp	.+30     	; 0x1ee <DIO_vwrite_pin+0x3a>
 1d0:	82 36       	cpi	r24, 0x62	; 98
 1d2:	51 f1       	breq	.+84     	; 0x228 <DIO_vwrite_pin+0x74>
 1d4:	83 36       	cpi	r24, 0x63	; 99
 1d6:	20 f4       	brcc	.+8      	; 0x1e0 <DIO_vwrite_pin+0x2c>
 1d8:	81 36       	cpi	r24, 0x61	; 97
 1da:	09 f0       	breq	.+2      	; 0x1de <DIO_vwrite_pin+0x2a>
 1dc:	7b c0       	rjmp	.+246    	; 0x2d4 <DIO_vwrite_pin+0x120>
 1de:	07 c0       	rjmp	.+14     	; 0x1ee <DIO_vwrite_pin+0x3a>
 1e0:	83 36       	cpi	r24, 0x63	; 99
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <DIO_vwrite_pin+0x32>
 1e4:	3e c0       	rjmp	.+124    	; 0x262 <DIO_vwrite_pin+0xae>
 1e6:	84 36       	cpi	r24, 0x64	; 100
 1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_vwrite_pin+0x38>
 1ea:	74 c0       	rjmp	.+232    	; 0x2d4 <DIO_vwrite_pin+0x120>
 1ec:	57 c0       	rjmp	.+174    	; 0x29c <DIO_vwrite_pin+0xe8>
	{
		case 'A':
		case 'a':
		if(val==1)
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	69 f4       	brne	.+26     	; 0x20c <DIO_vwrite_pin+0x58>
		{
			SET_BIT(PORTA,pin);
 1f2:	2b b3       	in	r18, 0x1b	; 27
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	ac 01       	movw	r20, r24
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_vwrite_pin+0x4c>
 1fc:	44 0f       	add	r20, r20
 1fe:	55 1f       	adc	r21, r21
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_vwrite_pin+0x48>
 204:	ba 01       	movw	r22, r20
 206:	62 2b       	or	r22, r18
 208:	6b bb       	out	0x1b, r22	; 27
 20a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pin);
 20c:	2b b3       	in	r18, 0x1b	; 27
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	ac 01       	movw	r20, r24
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_vwrite_pin+0x66>
 216:	44 0f       	add	r20, r20
 218:	55 1f       	adc	r21, r21
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_vwrite_pin+0x62>
 21e:	ba 01       	movw	r22, r20
 220:	60 95       	com	r22
 222:	62 23       	and	r22, r18
 224:	6b bb       	out	0x1b, r22	; 27
 226:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if(val==1)
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	69 f4       	brne	.+26     	; 0x246 <DIO_vwrite_pin+0x92>
		{
			SET_BIT(PORTB,pin);
 22c:	28 b3       	in	r18, 0x18	; 24
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	ac 01       	movw	r20, r24
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_vwrite_pin+0x86>
 236:	44 0f       	add	r20, r20
 238:	55 1f       	adc	r21, r21
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_vwrite_pin+0x82>
 23e:	ba 01       	movw	r22, r20
 240:	62 2b       	or	r22, r18
 242:	68 bb       	out	0x18, r22	; 24
 244:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pin);
 246:	28 b3       	in	r18, 0x18	; 24
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	ac 01       	movw	r20, r24
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_vwrite_pin+0xa0>
 250:	44 0f       	add	r20, r20
 252:	55 1f       	adc	r21, r21
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_vwrite_pin+0x9c>
 258:	ba 01       	movw	r22, r20
 25a:	60 95       	com	r22
 25c:	62 23       	and	r22, r18
 25e:	68 bb       	out	0x18, r22	; 24
 260:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if(val==1)
 262:	41 30       	cpi	r20, 0x01	; 1
 264:	69 f4       	brne	.+26     	; 0x280 <DIO_vwrite_pin+0xcc>
		{
			SET_BIT(PORTC,pin);
 266:	25 b3       	in	r18, 0x15	; 21
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	ac 01       	movw	r20, r24
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_vwrite_pin+0xc0>
 270:	44 0f       	add	r20, r20
 272:	55 1f       	adc	r21, r21
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_vwrite_pin+0xbc>
 278:	ba 01       	movw	r22, r20
 27a:	62 2b       	or	r22, r18
 27c:	65 bb       	out	0x15, r22	; 21
 27e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pin);
 280:	25 b3       	in	r18, 0x15	; 21
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	ac 01       	movw	r20, r24
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_vwrite_pin+0xda>
 28a:	44 0f       	add	r20, r20
 28c:	55 1f       	adc	r21, r21
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_vwrite_pin+0xd6>
 292:	ba 01       	movw	r22, r20
 294:	60 95       	com	r22
 296:	62 23       	and	r22, r18
 298:	65 bb       	out	0x15, r22	; 21
 29a:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if(val==1)
 29c:	41 30       	cpi	r20, 0x01	; 1
 29e:	69 f4       	brne	.+26     	; 0x2ba <DIO_vwrite_pin+0x106>
		{
			SET_BIT(PORTD,pin);
 2a0:	22 b3       	in	r18, 0x12	; 18
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	ac 01       	movw	r20, r24
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_vwrite_pin+0xfa>
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_vwrite_pin+0xf6>
 2b2:	ba 01       	movw	r22, r20
 2b4:	62 2b       	or	r22, r18
 2b6:	62 bb       	out	0x12, r22	; 18
 2b8:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pin);
 2ba:	22 b3       	in	r18, 0x12	; 18
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	ac 01       	movw	r20, r24
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_vwrite_pin+0x114>
 2c4:	44 0f       	add	r20, r20
 2c6:	55 1f       	adc	r21, r21
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_vwrite_pin+0x110>
 2cc:	ba 01       	movw	r22, r20
 2ce:	60 95       	com	r22
 2d0:	62 23       	and	r22, r18
 2d2:	62 bb       	out	0x12, r22	; 18
 2d4:	08 95       	ret

000002d6 <DIO_U8read_pin>:
		break;
	}}
unsigned char DIO_U8read_pin(unsigned char port,unsigned char pin)
{
	unsigned char value;
	switch(port)
 2d6:	84 34       	cpi	r24, 0x44	; 68
 2d8:	09 f4       	brne	.+2      	; 0x2dc <DIO_U8read_pin+0x6>
 2da:	51 c0       	rjmp	.+162    	; 0x37e <DIO_U8read_pin+0xa8>
 2dc:	85 34       	cpi	r24, 0x45	; 69
 2de:	40 f4       	brcc	.+16     	; 0x2f0 <DIO_U8read_pin+0x1a>
 2e0:	82 34       	cpi	r24, 0x42	; 66
 2e2:	39 f1       	breq	.+78     	; 0x332 <DIO_U8read_pin+0x5c>
 2e4:	83 34       	cpi	r24, 0x43	; 67
 2e6:	c0 f5       	brcc	.+112    	; 0x358 <DIO_U8read_pin+0x82>
 2e8:	81 34       	cpi	r24, 0x41	; 65
 2ea:	09 f0       	breq	.+2      	; 0x2ee <DIO_U8read_pin+0x18>
 2ec:	5a c0       	rjmp	.+180    	; 0x3a2 <DIO_U8read_pin+0xcc>
 2ee:	0e c0       	rjmp	.+28     	; 0x30c <DIO_U8read_pin+0x36>
 2f0:	82 36       	cpi	r24, 0x62	; 98
 2f2:	f9 f0       	breq	.+62     	; 0x332 <DIO_U8read_pin+0x5c>
 2f4:	83 36       	cpi	r24, 0x63	; 99
 2f6:	20 f4       	brcc	.+8      	; 0x300 <DIO_U8read_pin+0x2a>
 2f8:	81 36       	cpi	r24, 0x61	; 97
 2fa:	09 f0       	breq	.+2      	; 0x2fe <DIO_U8read_pin+0x28>
 2fc:	52 c0       	rjmp	.+164    	; 0x3a2 <DIO_U8read_pin+0xcc>
 2fe:	06 c0       	rjmp	.+12     	; 0x30c <DIO_U8read_pin+0x36>
 300:	83 36       	cpi	r24, 0x63	; 99
 302:	51 f1       	breq	.+84     	; 0x358 <DIO_U8read_pin+0x82>
 304:	84 36       	cpi	r24, 0x64	; 100
 306:	09 f0       	breq	.+2      	; 0x30a <DIO_U8read_pin+0x34>
 308:	4c c0       	rjmp	.+152    	; 0x3a2 <DIO_U8read_pin+0xcc>
 30a:	39 c0       	rjmp	.+114    	; 0x37e <DIO_U8read_pin+0xa8>
	{
		case 'A':
		case 'a':
			value=READ_BIT(PINA,pin);
 30c:	29 b3       	in	r18, 0x19	; 25
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	06 2e       	mov	r0, r22
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_U8read_pin+0x44>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_U8read_pin+0x40>
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	82 23       	and	r24, r18
 322:	93 23       	and	r25, r19
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_U8read_pin+0x54>
 326:	95 95       	asr	r25
 328:	87 95       	ror	r24
 32a:	6a 95       	dec	r22
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_U8read_pin+0x50>
 32e:	98 2f       	mov	r25, r24
			break;
 330:	38 c0       	rjmp	.+112    	; 0x3a2 <DIO_U8read_pin+0xcc>
		case 'B':
		case 'b':
			value=READ_BIT(PINB,pin);
 332:	26 b3       	in	r18, 0x16	; 22
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	06 2e       	mov	r0, r22
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_U8read_pin+0x6a>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	0a 94       	dec	r0
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_U8read_pin+0x66>
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	82 23       	and	r24, r18
 348:	93 23       	and	r25, r19
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_U8read_pin+0x7a>
 34c:	95 95       	asr	r25
 34e:	87 95       	ror	r24
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_U8read_pin+0x76>
 354:	98 2f       	mov	r25, r24
			break;
 356:	25 c0       	rjmp	.+74     	; 0x3a2 <DIO_U8read_pin+0xcc>
		case 'C':
		case 'c':
			value=READ_BIT(PINC,pin);
 358:	23 b3       	in	r18, 0x13	; 19
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	06 2e       	mov	r0, r22
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_U8read_pin+0x90>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	0a 94       	dec	r0
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_U8read_pin+0x8c>
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	82 23       	and	r24, r18
 36e:	93 23       	and	r25, r19
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_U8read_pin+0xa0>
 372:	95 95       	asr	r25
 374:	87 95       	ror	r24
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_U8read_pin+0x9c>
 37a:	98 2f       	mov	r25, r24
			break;
 37c:	12 c0       	rjmp	.+36     	; 0x3a2 <DIO_U8read_pin+0xcc>
		case 'D':
		case 'd':
			value=READ_BIT(PIND,pin);
 37e:	20 b3       	in	r18, 0x10	; 16
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	06 2e       	mov	r0, r22
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_U8read_pin+0xb6>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	0a 94       	dec	r0
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_U8read_pin+0xb2>
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	82 23       	and	r24, r18
 394:	93 23       	and	r25, r19
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_U8read_pin+0xc6>
 398:	95 95       	asr	r25
 39a:	87 95       	ror	r24
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_U8read_pin+0xc2>
 3a0:	98 2f       	mov	r25, r24
			break;
	}
	return value;
} 
 3a2:	89 2f       	mov	r24, r25
 3a4:	08 95       	ret

000003a6 <DIO_vtoggle>:
void DIO_vtoggle(unsigned char port,unsigned char pin)
{
switch(port)
 3a6:	84 34       	cpi	r24, 0x44	; 68
 3a8:	09 f4       	brne	.+2      	; 0x3ac <DIO_vtoggle+0x6>
 3aa:	3d c0       	rjmp	.+122    	; 0x426 <DIO_vtoggle+0x80>
 3ac:	85 34       	cpi	r24, 0x45	; 69
 3ae:	40 f4       	brcc	.+16     	; 0x3c0 <DIO_vtoggle+0x1a>
 3b0:	82 34       	cpi	r24, 0x42	; 66
 3b2:	f9 f0       	breq	.+62     	; 0x3f2 <DIO_vtoggle+0x4c>
 3b4:	83 34       	cpi	r24, 0x43	; 67
 3b6:	50 f5       	brcc	.+84     	; 0x40c <DIO_vtoggle+0x66>
 3b8:	81 34       	cpi	r24, 0x41	; 65
 3ba:	09 f0       	breq	.+2      	; 0x3be <DIO_vtoggle+0x18>
 3bc:	40 c0       	rjmp	.+128    	; 0x43e <DIO_vtoggle+0x98>
 3be:	0c c0       	rjmp	.+24     	; 0x3d8 <DIO_vtoggle+0x32>
 3c0:	82 36       	cpi	r24, 0x62	; 98
 3c2:	b9 f0       	breq	.+46     	; 0x3f2 <DIO_vtoggle+0x4c>
 3c4:	83 36       	cpi	r24, 0x63	; 99
 3c6:	18 f4       	brcc	.+6      	; 0x3ce <DIO_vtoggle+0x28>
 3c8:	81 36       	cpi	r24, 0x61	; 97
 3ca:	c9 f5       	brne	.+114    	; 0x43e <DIO_vtoggle+0x98>
 3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <DIO_vtoggle+0x32>
 3ce:	83 36       	cpi	r24, 0x63	; 99
 3d0:	e9 f0       	breq	.+58     	; 0x40c <DIO_vtoggle+0x66>
 3d2:	84 36       	cpi	r24, 0x64	; 100
 3d4:	a1 f5       	brne	.+104    	; 0x43e <DIO_vtoggle+0x98>
 3d6:	27 c0       	rjmp	.+78     	; 0x426 <DIO_vtoggle+0x80>
{
	case 'A':
	case 'a':
		TOG_BIT(PORTA,pin);
 3d8:	2b b3       	in	r18, 0x1b	; 27
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	ac 01       	movw	r20, r24
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_vtoggle+0x40>
 3e2:	44 0f       	add	r20, r20
 3e4:	55 1f       	adc	r21, r21
 3e6:	6a 95       	dec	r22
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_vtoggle+0x3c>
 3ea:	ba 01       	movw	r22, r20
 3ec:	62 27       	eor	r22, r18
 3ee:	6b bb       	out	0x1b, r22	; 27
		break;
 3f0:	08 95       	ret
	case 'B':
	case 'b':
		TOG_BIT(PORTB,pin);
 3f2:	28 b3       	in	r18, 0x18	; 24
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	ac 01       	movw	r20, r24
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <DIO_vtoggle+0x5a>
 3fc:	44 0f       	add	r20, r20
 3fe:	55 1f       	adc	r21, r21
 400:	6a 95       	dec	r22
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_vtoggle+0x56>
 404:	ba 01       	movw	r22, r20
 406:	62 27       	eor	r22, r18
 408:	68 bb       	out	0x18, r22	; 24
		break;
 40a:	08 95       	ret
	case 'C':
	case 'c':
		TOG_BIT(PORTC,pin);
 40c:	25 b3       	in	r18, 0x15	; 21
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	ac 01       	movw	r20, r24
 414:	02 c0       	rjmp	.+4      	; 0x41a <DIO_vtoggle+0x74>
 416:	44 0f       	add	r20, r20
 418:	55 1f       	adc	r21, r21
 41a:	6a 95       	dec	r22
 41c:	e2 f7       	brpl	.-8      	; 0x416 <DIO_vtoggle+0x70>
 41e:	ba 01       	movw	r22, r20
 420:	62 27       	eor	r22, r18
 422:	65 bb       	out	0x15, r22	; 21
		break;
 424:	08 95       	ret
	case 'D':
	case 'd':
		TOG_BIT(PORTD,pin);
 426:	22 b3       	in	r18, 0x12	; 18
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	ac 01       	movw	r20, r24
 42e:	02 c0       	rjmp	.+4      	; 0x434 <DIO_vtoggle+0x8e>
 430:	44 0f       	add	r20, r20
 432:	55 1f       	adc	r21, r21
 434:	6a 95       	dec	r22
 436:	e2 f7       	brpl	.-8      	; 0x430 <DIO_vtoggle+0x8a>
 438:	ba 01       	movw	r22, r20
 43a:	62 27       	eor	r22, r18
 43c:	62 bb       	out	0x12, r22	; 18
 43e:	08 95       	ret

00000440 <DIO_vset_portdir>:
		break;
	}
}
void DIO_vset_portdir(unsigned char port,unsigned char dir)
{
	switch(port)
 440:	84 34       	cpi	r24, 0x44	; 68
 442:	d9 f0       	breq	.+54     	; 0x47a <DIO_vset_portdir+0x3a>
 444:	85 34       	cpi	r24, 0x45	; 69
 446:	38 f4       	brcc	.+14     	; 0x456 <DIO_vset_portdir+0x16>
 448:	82 34       	cpi	r24, 0x42	; 66
 44a:	99 f0       	breq	.+38     	; 0x472 <DIO_vset_portdir+0x32>
 44c:	83 34       	cpi	r24, 0x43	; 67
 44e:	98 f4       	brcc	.+38     	; 0x476 <DIO_vset_portdir+0x36>
 450:	81 34       	cpi	r24, 0x41	; 65
 452:	a1 f4       	brne	.+40     	; 0x47c <DIO_vset_portdir+0x3c>
 454:	0c c0       	rjmp	.+24     	; 0x46e <DIO_vset_portdir+0x2e>
 456:	82 36       	cpi	r24, 0x62	; 98
 458:	61 f0       	breq	.+24     	; 0x472 <DIO_vset_portdir+0x32>
 45a:	83 36       	cpi	r24, 0x63	; 99
 45c:	18 f4       	brcc	.+6      	; 0x464 <DIO_vset_portdir+0x24>
 45e:	81 36       	cpi	r24, 0x61	; 97
 460:	69 f4       	brne	.+26     	; 0x47c <DIO_vset_portdir+0x3c>
 462:	05 c0       	rjmp	.+10     	; 0x46e <DIO_vset_portdir+0x2e>
 464:	83 36       	cpi	r24, 0x63	; 99
 466:	39 f0       	breq	.+14     	; 0x476 <DIO_vset_portdir+0x36>
 468:	84 36       	cpi	r24, 0x64	; 100
 46a:	41 f4       	brne	.+16     	; 0x47c <DIO_vset_portdir+0x3c>
 46c:	06 c0       	rjmp	.+12     	; 0x47a <DIO_vset_portdir+0x3a>
	{
		case 'A':
		case 'a':
		DDRA=dir;
 46e:	6a bb       	out	0x1a, r22	; 26
		break;
 470:	08 95       	ret
		case 'B':
		case 'b':
		DDRB=dir;
 472:	67 bb       	out	0x17, r22	; 23
		break;
 474:	08 95       	ret
		case 'C':
		case 'c':
		DDRC=dir;
 476:	64 bb       	out	0x14, r22	; 20
		break;
 478:	08 95       	ret
		case 'D':
		case 'd':
		DDRD=dir;
 47a:	61 bb       	out	0x11, r22	; 17
 47c:	08 95       	ret

0000047e <DIO_vwrite_port>:
		break;
	}
}
void DIO_vwrite_port(unsigned char port,unsigned char val)
{
	switch(port)
 47e:	84 34       	cpi	r24, 0x44	; 68
 480:	d9 f0       	breq	.+54     	; 0x4b8 <DIO_vwrite_port+0x3a>
 482:	85 34       	cpi	r24, 0x45	; 69
 484:	38 f4       	brcc	.+14     	; 0x494 <DIO_vwrite_port+0x16>
 486:	82 34       	cpi	r24, 0x42	; 66
 488:	99 f0       	breq	.+38     	; 0x4b0 <DIO_vwrite_port+0x32>
 48a:	83 34       	cpi	r24, 0x43	; 67
 48c:	98 f4       	brcc	.+38     	; 0x4b4 <DIO_vwrite_port+0x36>
 48e:	81 34       	cpi	r24, 0x41	; 65
 490:	a1 f4       	brne	.+40     	; 0x4ba <DIO_vwrite_port+0x3c>
 492:	0c c0       	rjmp	.+24     	; 0x4ac <DIO_vwrite_port+0x2e>
 494:	82 36       	cpi	r24, 0x62	; 98
 496:	61 f0       	breq	.+24     	; 0x4b0 <DIO_vwrite_port+0x32>
 498:	83 36       	cpi	r24, 0x63	; 99
 49a:	18 f4       	brcc	.+6      	; 0x4a2 <DIO_vwrite_port+0x24>
 49c:	81 36       	cpi	r24, 0x61	; 97
 49e:	69 f4       	brne	.+26     	; 0x4ba <DIO_vwrite_port+0x3c>
 4a0:	05 c0       	rjmp	.+10     	; 0x4ac <DIO_vwrite_port+0x2e>
 4a2:	83 36       	cpi	r24, 0x63	; 99
 4a4:	39 f0       	breq	.+14     	; 0x4b4 <DIO_vwrite_port+0x36>
 4a6:	84 36       	cpi	r24, 0x64	; 100
 4a8:	41 f4       	brne	.+16     	; 0x4ba <DIO_vwrite_port+0x3c>
 4aa:	06 c0       	rjmp	.+12     	; 0x4b8 <DIO_vwrite_port+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=val;
 4ac:	6b bb       	out	0x1b, r22	; 27
		break;
 4ae:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=val;
 4b0:	68 bb       	out	0x18, r22	; 24
		break;
 4b2:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=val;
 4b4:	65 bb       	out	0x15, r22	; 21
		break;
 4b6:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=val;
 4b8:	62 bb       	out	0x12, r22	; 18
 4ba:	08 95       	ret

000004bc <DIO_U8read_port>:
	}
}
unsigned char DIO_U8read_port(unsigned char port)
{
	int val;
	switch(port)
 4bc:	84 34       	cpi	r24, 0x44	; 68
 4be:	e1 f0       	breq	.+56     	; 0x4f8 <DIO_U8read_port+0x3c>
 4c0:	85 34       	cpi	r24, 0x45	; 69
 4c2:	38 f4       	brcc	.+14     	; 0x4d2 <DIO_U8read_port+0x16>
 4c4:	82 34       	cpi	r24, 0x42	; 66
 4c6:	a1 f0       	breq	.+40     	; 0x4f0 <DIO_U8read_port+0x34>
 4c8:	83 34       	cpi	r24, 0x43	; 67
 4ca:	a0 f4       	brcc	.+40     	; 0x4f4 <DIO_U8read_port+0x38>
 4cc:	81 34       	cpi	r24, 0x41	; 65
 4ce:	a9 f4       	brne	.+42     	; 0x4fa <DIO_U8read_port+0x3e>
 4d0:	0c c0       	rjmp	.+24     	; 0x4ea <DIO_U8read_port+0x2e>
 4d2:	82 36       	cpi	r24, 0x62	; 98
 4d4:	69 f0       	breq	.+26     	; 0x4f0 <DIO_U8read_port+0x34>
 4d6:	83 36       	cpi	r24, 0x63	; 99
 4d8:	18 f4       	brcc	.+6      	; 0x4e0 <DIO_U8read_port+0x24>
 4da:	81 36       	cpi	r24, 0x61	; 97
 4dc:	71 f4       	brne	.+28     	; 0x4fa <DIO_U8read_port+0x3e>
 4de:	05 c0       	rjmp	.+10     	; 0x4ea <DIO_U8read_port+0x2e>
 4e0:	83 36       	cpi	r24, 0x63	; 99
 4e2:	41 f0       	breq	.+16     	; 0x4f4 <DIO_U8read_port+0x38>
 4e4:	84 36       	cpi	r24, 0x64	; 100
 4e6:	49 f4       	brne	.+18     	; 0x4fa <DIO_U8read_port+0x3e>
 4e8:	07 c0       	rjmp	.+14     	; 0x4f8 <DIO_U8read_port+0x3c>
	{
		case 'A':
		case 'a':
		PINA=val;
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	99 bb       	out	0x19, r25	; 25
		break;
 4ee:	05 c0       	rjmp	.+10     	; 0x4fa <DIO_U8read_port+0x3e>
		case 'B':
		case 'b':
		val=PINB;
 4f0:	96 b3       	in	r25, 0x16	; 22
		break;
 4f2:	03 c0       	rjmp	.+6      	; 0x4fa <DIO_U8read_port+0x3e>
		case 'C':
		case 'c':
		val=PINC;
 4f4:	93 b3       	in	r25, 0x13	; 19
		break;
 4f6:	01 c0       	rjmp	.+2      	; 0x4fa <DIO_U8read_port+0x3e>
		case 'D':
		case 'd':
		val=PIND;
 4f8:	90 b3       	in	r25, 0x10	; 16
		break;
	}
	return val;
}
 4fa:	89 2f       	mov	r24, r25
 4fc:	08 95       	ret

000004fe <DIO_vtog_port>:
void DIO_vtog_port(unsigned char port)
{
	switch(port)
 4fe:	84 34       	cpi	r24, 0x44	; 68
 500:	09 f1       	breq	.+66     	; 0x544 <DIO_vtog_port+0x46>
 502:	85 34       	cpi	r24, 0x45	; 69
 504:	38 f4       	brcc	.+14     	; 0x514 <DIO_vtog_port+0x16>
 506:	82 34       	cpi	r24, 0x42	; 66
 508:	a9 f0       	breq	.+42     	; 0x534 <DIO_vtog_port+0x36>
 50a:	83 34       	cpi	r24, 0x43	; 67
 50c:	b8 f4       	brcc	.+46     	; 0x53c <DIO_vtog_port+0x3e>
 50e:	81 34       	cpi	r24, 0x41	; 65
 510:	e1 f4       	brne	.+56     	; 0x54a <DIO_vtog_port+0x4c>
 512:	0c c0       	rjmp	.+24     	; 0x52c <DIO_vtog_port+0x2e>
 514:	82 36       	cpi	r24, 0x62	; 98
 516:	71 f0       	breq	.+28     	; 0x534 <DIO_vtog_port+0x36>
 518:	83 36       	cpi	r24, 0x63	; 99
 51a:	18 f4       	brcc	.+6      	; 0x522 <DIO_vtog_port+0x24>
 51c:	81 36       	cpi	r24, 0x61	; 97
 51e:	a9 f4       	brne	.+42     	; 0x54a <DIO_vtog_port+0x4c>
 520:	05 c0       	rjmp	.+10     	; 0x52c <DIO_vtog_port+0x2e>
 522:	83 36       	cpi	r24, 0x63	; 99
 524:	59 f0       	breq	.+22     	; 0x53c <DIO_vtog_port+0x3e>
 526:	84 36       	cpi	r24, 0x64	; 100
 528:	81 f4       	brne	.+32     	; 0x54a <DIO_vtog_port+0x4c>
 52a:	0c c0       	rjmp	.+24     	; 0x544 <DIO_vtog_port+0x46>
	{
		case 'A':
		case 'a':
		PORTA=~PORTA;
 52c:	8b b3       	in	r24, 0x1b	; 27
 52e:	80 95       	com	r24
 530:	8b bb       	out	0x1b, r24	; 27
		break;
 532:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=~PORTB;
 534:	88 b3       	in	r24, 0x18	; 24
 536:	80 95       	com	r24
 538:	88 bb       	out	0x18, r24	; 24
		break;
 53a:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=~PORTC;
 53c:	85 b3       	in	r24, 0x15	; 21
 53e:	80 95       	com	r24
 540:	85 bb       	out	0x15, r24	; 21
		break;
 542:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=~PORTD;
 544:	82 b3       	in	r24, 0x12	; 18
 546:	80 95       	com	r24
 548:	82 bb       	out	0x12, r24	; 18
 54a:	08 95       	ret

0000054c <DIO_vcontrolpullup>:
		break;
	}
}
void DIO_vcontrolpullup(unsigned char port,unsigned char pin,unsigned char enable)
{
	switch(port)
 54c:	84 34       	cpi	r24, 0x44	; 68
 54e:	09 f4       	brne	.+2      	; 0x552 <DIO_vcontrolpullup+0x6>
 550:	71 c0       	rjmp	.+226    	; 0x634 <DIO_vcontrolpullup+0xe8>
 552:	85 34       	cpi	r24, 0x45	; 69
 554:	48 f4       	brcc	.+18     	; 0x568 <DIO_vcontrolpullup+0x1c>
 556:	82 34       	cpi	r24, 0x42	; 66
 558:	99 f1       	breq	.+102    	; 0x5c0 <DIO_vcontrolpullup+0x74>
 55a:	83 34       	cpi	r24, 0x43	; 67
 55c:	08 f0       	brcs	.+2      	; 0x560 <DIO_vcontrolpullup+0x14>
 55e:	4d c0       	rjmp	.+154    	; 0x5fa <DIO_vcontrolpullup+0xae>
 560:	81 34       	cpi	r24, 0x41	; 65
 562:	09 f0       	breq	.+2      	; 0x566 <DIO_vcontrolpullup+0x1a>
 564:	83 c0       	rjmp	.+262    	; 0x66c <DIO_vcontrolpullup+0x120>
 566:	0f c0       	rjmp	.+30     	; 0x586 <DIO_vcontrolpullup+0x3a>
 568:	82 36       	cpi	r24, 0x62	; 98
 56a:	51 f1       	breq	.+84     	; 0x5c0 <DIO_vcontrolpullup+0x74>
 56c:	83 36       	cpi	r24, 0x63	; 99
 56e:	20 f4       	brcc	.+8      	; 0x578 <DIO_vcontrolpullup+0x2c>
 570:	81 36       	cpi	r24, 0x61	; 97
 572:	09 f0       	breq	.+2      	; 0x576 <DIO_vcontrolpullup+0x2a>
 574:	7b c0       	rjmp	.+246    	; 0x66c <DIO_vcontrolpullup+0x120>
 576:	07 c0       	rjmp	.+14     	; 0x586 <DIO_vcontrolpullup+0x3a>
 578:	83 36       	cpi	r24, 0x63	; 99
 57a:	09 f4       	brne	.+2      	; 0x57e <DIO_vcontrolpullup+0x32>
 57c:	3e c0       	rjmp	.+124    	; 0x5fa <DIO_vcontrolpullup+0xae>
 57e:	84 36       	cpi	r24, 0x64	; 100
 580:	09 f0       	breq	.+2      	; 0x584 <DIO_vcontrolpullup+0x38>
 582:	74 c0       	rjmp	.+232    	; 0x66c <DIO_vcontrolpullup+0x120>
 584:	57 c0       	rjmp	.+174    	; 0x634 <DIO_vcontrolpullup+0xe8>
	{
		case 'a':
		case 'A':
		if(enable==1)
 586:	41 30       	cpi	r20, 0x01	; 1
 588:	69 f4       	brne	.+26     	; 0x5a4 <DIO_vcontrolpullup+0x58>
		{
			SET_BIT(PORTA,pin);
 58a:	2b b3       	in	r18, 0x1b	; 27
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	ac 01       	movw	r20, r24
 592:	02 c0       	rjmp	.+4      	; 0x598 <DIO_vcontrolpullup+0x4c>
 594:	44 0f       	add	r20, r20
 596:	55 1f       	adc	r21, r21
 598:	6a 95       	dec	r22
 59a:	e2 f7       	brpl	.-8      	; 0x594 <DIO_vcontrolpullup+0x48>
 59c:	ba 01       	movw	r22, r20
 59e:	62 2b       	or	r22, r18
 5a0:	6b bb       	out	0x1b, r22	; 27
 5a2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pin);
 5a4:	2b b3       	in	r18, 0x1b	; 27
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	ac 01       	movw	r20, r24
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <DIO_vcontrolpullup+0x66>
 5ae:	44 0f       	add	r20, r20
 5b0:	55 1f       	adc	r21, r21
 5b2:	6a 95       	dec	r22
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <DIO_vcontrolpullup+0x62>
 5b6:	ba 01       	movw	r22, r20
 5b8:	60 95       	com	r22
 5ba:	62 23       	and	r22, r18
 5bc:	6b bb       	out	0x1b, r22	; 27
 5be:	08 95       	ret
		}
		break;
		case 'b':
		case 'B':
		if(enable==1)
 5c0:	41 30       	cpi	r20, 0x01	; 1
 5c2:	69 f4       	brne	.+26     	; 0x5de <DIO_vcontrolpullup+0x92>
		{
			SET_BIT(PORTB,pin);
 5c4:	28 b3       	in	r18, 0x18	; 24
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	ac 01       	movw	r20, r24
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <DIO_vcontrolpullup+0x86>
 5ce:	44 0f       	add	r20, r20
 5d0:	55 1f       	adc	r21, r21
 5d2:	6a 95       	dec	r22
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <DIO_vcontrolpullup+0x82>
 5d6:	ba 01       	movw	r22, r20
 5d8:	62 2b       	or	r22, r18
 5da:	68 bb       	out	0x18, r22	; 24
 5dc:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pin);
 5de:	28 b3       	in	r18, 0x18	; 24
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	ac 01       	movw	r20, r24
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <DIO_vcontrolpullup+0xa0>
 5e8:	44 0f       	add	r20, r20
 5ea:	55 1f       	adc	r21, r21
 5ec:	6a 95       	dec	r22
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <DIO_vcontrolpullup+0x9c>
 5f0:	ba 01       	movw	r22, r20
 5f2:	60 95       	com	r22
 5f4:	62 23       	and	r22, r18
 5f6:	68 bb       	out	0x18, r22	; 24
 5f8:	08 95       	ret
		}
		break;
		case 'c':
		case 'C':
		if(enable==1)
 5fa:	41 30       	cpi	r20, 0x01	; 1
 5fc:	69 f4       	brne	.+26     	; 0x618 <DIO_vcontrolpullup+0xcc>
		{
			SET_BIT(PORTC,pin);
 5fe:	25 b3       	in	r18, 0x15	; 21
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	ac 01       	movw	r20, r24
 606:	02 c0       	rjmp	.+4      	; 0x60c <DIO_vcontrolpullup+0xc0>
 608:	44 0f       	add	r20, r20
 60a:	55 1f       	adc	r21, r21
 60c:	6a 95       	dec	r22
 60e:	e2 f7       	brpl	.-8      	; 0x608 <DIO_vcontrolpullup+0xbc>
 610:	ba 01       	movw	r22, r20
 612:	62 2b       	or	r22, r18
 614:	65 bb       	out	0x15, r22	; 21
 616:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pin);
 618:	25 b3       	in	r18, 0x15	; 21
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	ac 01       	movw	r20, r24
 620:	02 c0       	rjmp	.+4      	; 0x626 <DIO_vcontrolpullup+0xda>
 622:	44 0f       	add	r20, r20
 624:	55 1f       	adc	r21, r21
 626:	6a 95       	dec	r22
 628:	e2 f7       	brpl	.-8      	; 0x622 <DIO_vcontrolpullup+0xd6>
 62a:	ba 01       	movw	r22, r20
 62c:	60 95       	com	r22
 62e:	62 23       	and	r22, r18
 630:	65 bb       	out	0x15, r22	; 21
 632:	08 95       	ret
		}
		break;
		case 'd':
		case 'D':
		if(enable==1)
 634:	41 30       	cpi	r20, 0x01	; 1
 636:	69 f4       	brne	.+26     	; 0x652 <DIO_vcontrolpullup+0x106>
		{
			SET_BIT(PORTD,pin);
 638:	22 b3       	in	r18, 0x12	; 18
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	ac 01       	movw	r20, r24
 640:	02 c0       	rjmp	.+4      	; 0x646 <DIO_vcontrolpullup+0xfa>
 642:	44 0f       	add	r20, r20
 644:	55 1f       	adc	r21, r21
 646:	6a 95       	dec	r22
 648:	e2 f7       	brpl	.-8      	; 0x642 <DIO_vcontrolpullup+0xf6>
 64a:	ba 01       	movw	r22, r20
 64c:	62 2b       	or	r22, r18
 64e:	62 bb       	out	0x12, r22	; 18
 650:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pin);
 652:	22 b3       	in	r18, 0x12	; 18
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	ac 01       	movw	r20, r24
 65a:	02 c0       	rjmp	.+4      	; 0x660 <DIO_vcontrolpullup+0x114>
 65c:	44 0f       	add	r20, r20
 65e:	55 1f       	adc	r21, r21
 660:	6a 95       	dec	r22
 662:	e2 f7       	brpl	.-8      	; 0x65c <DIO_vcontrolpullup+0x110>
 664:	ba 01       	movw	r22, r20
 666:	60 95       	com	r22
 668:	62 23       	and	r22, r18
 66a:	62 bb       	out	0x12, r22	; 18
 66c:	08 95       	ret

0000066e <keypad_vinit>:
 */ 
#include "lcd_driver.h"
#include "keypad_driver.h"
void keypad_vinit()
{
	DIO_vset_pindir('d',0,1);
 66e:	84 e6       	ldi	r24, 0x64	; 100
 670:	60 e0       	ldi	r22, 0x00	; 0
 672:	41 e0       	ldi	r20, 0x01	; 1
 674:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('d',1,1);
 678:	84 e6       	ldi	r24, 0x64	; 100
 67a:	61 e0       	ldi	r22, 0x01	; 1
 67c:	41 e0       	ldi	r20, 0x01	; 1
 67e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('d',2,1);
 682:	84 e6       	ldi	r24, 0x64	; 100
 684:	62 e0       	ldi	r22, 0x02	; 2
 686:	41 e0       	ldi	r20, 0x01	; 1
 688:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('d',3,1);
 68c:	84 e6       	ldi	r24, 0x64	; 100
 68e:	63 e0       	ldi	r22, 0x03	; 3
 690:	41 e0       	ldi	r20, 0x01	; 1
 692:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('d',4,0);
 696:	84 e6       	ldi	r24, 0x64	; 100
 698:	64 e0       	ldi	r22, 0x04	; 4
 69a:	40 e0       	ldi	r20, 0x00	; 0
 69c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('d',5,0);
 6a0:	84 e6       	ldi	r24, 0x64	; 100
 6a2:	65 e0       	ldi	r22, 0x05	; 5
 6a4:	40 e0       	ldi	r20, 0x00	; 0
 6a6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('d',6,0);
 6aa:	84 e6       	ldi	r24, 0x64	; 100
 6ac:	66 e0       	ldi	r22, 0x06	; 6
 6ae:	40 e0       	ldi	r20, 0x00	; 0
 6b0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('d',7,0);
 6b4:	84 e6       	ldi	r24, 0x64	; 100
 6b6:	67 e0       	ldi	r22, 0x07	; 7
 6b8:	40 e0       	ldi	r20, 0x00	; 0
 6ba:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vcontrolpullup('d',4,1);
 6be:	84 e6       	ldi	r24, 0x64	; 100
 6c0:	64 e0       	ldi	r22, 0x04	; 4
 6c2:	41 e0       	ldi	r20, 0x01	; 1
 6c4:	0e 94 a6 02 	call	0x54c	; 0x54c <DIO_vcontrolpullup>
	DIO_vcontrolpullup('d',5,1);
 6c8:	84 e6       	ldi	r24, 0x64	; 100
 6ca:	65 e0       	ldi	r22, 0x05	; 5
 6cc:	41 e0       	ldi	r20, 0x01	; 1
 6ce:	0e 94 a6 02 	call	0x54c	; 0x54c <DIO_vcontrolpullup>
	DIO_vcontrolpullup('d',6,1);
 6d2:	84 e6       	ldi	r24, 0x64	; 100
 6d4:	66 e0       	ldi	r22, 0x06	; 6
 6d6:	41 e0       	ldi	r20, 0x01	; 1
 6d8:	0e 94 a6 02 	call	0x54c	; 0x54c <DIO_vcontrolpullup>
	DIO_vcontrolpullup('d',7,1);
 6dc:	84 e6       	ldi	r24, 0x64	; 100
 6de:	67 e0       	ldi	r22, 0x07	; 7
 6e0:	41 e0       	ldi	r20, 0x01	; 1
 6e2:	0e 94 a6 02 	call	0x54c	; 0x54c <DIO_vcontrolpullup>
}
 6e6:	08 95       	ret

000006e8 <keypad_u8read>:
unsigned char keypad_u8read()
{
 6e8:	0f 93       	push	r16
 6ea:	1f 93       	push	r17
 6ec:	cf 93       	push	r28
 6ee:	df 93       	push	r29
 6f0:	cd b7       	in	r28, 0x3d	; 61
 6f2:	de b7       	in	r29, 0x3e	; 62
 6f4:	60 97       	sbiw	r28, 0x10	; 16
 6f6:	0f b6       	in	r0, 0x3f	; 63
 6f8:	f8 94       	cli
 6fa:	de bf       	out	0x3e, r29	; 62
 6fc:	0f be       	out	0x3f, r0	; 63
 6fe:	cd bf       	out	0x3d, r28	; 61
	unsigned char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'.','0','=','+'}};
 700:	de 01       	movw	r26, r28
 702:	11 96       	adiw	r26, 0x01	; 1
 704:	e0 e6       	ldi	r30, 0x60	; 96
 706:	f0 e0       	ldi	r31, 0x00	; 0
 708:	80 e1       	ldi	r24, 0x10	; 16
 70a:	01 90       	ld	r0, Z+
 70c:	0d 92       	st	X+, r0
 70e:	81 50       	subi	r24, 0x01	; 1
 710:	e1 f7       	brne	.-8      	; 0x70a <keypad_u8read+0x22>
		char row,col,x;
		char returnval=0xff;
		for(row=0;row<4;row++)
 712:	00 e0       	ldi	r16, 0x00	; 0
		{
			DIO_vwrite_pin('d',0,1);
 714:	84 e6       	ldi	r24, 0x64	; 100
 716:	60 e0       	ldi	r22, 0x00	; 0
 718:	41 e0       	ldi	r20, 0x01	; 1
 71a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
			DIO_vwrite_pin('d',1,1);
 71e:	84 e6       	ldi	r24, 0x64	; 100
 720:	61 e0       	ldi	r22, 0x01	; 1
 722:	41 e0       	ldi	r20, 0x01	; 1
 724:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
			DIO_vwrite_pin('d',2,1);
 728:	84 e6       	ldi	r24, 0x64	; 100
 72a:	62 e0       	ldi	r22, 0x02	; 2
 72c:	41 e0       	ldi	r20, 0x01	; 1
 72e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
			DIO_vwrite_pin('d',3,1);
 732:	84 e6       	ldi	r24, 0x64	; 100
 734:	63 e0       	ldi	r22, 0x03	; 3
 736:	41 e0       	ldi	r20, 0x01	; 1
 738:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
			DIO_vwrite_pin('d',row,0);
 73c:	84 e6       	ldi	r24, 0x64	; 100
 73e:	60 2f       	mov	r22, r16
 740:	40 e0       	ldi	r20, 0x00	; 0
 742:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
			
			for(col=0;col<4;col++)
 746:	10 e0       	ldi	r17, 0x00	; 0
	DIO_vcontrolpullup('d',4,1);
	DIO_vcontrolpullup('d',5,1);
	DIO_vcontrolpullup('d',6,1);
	DIO_vcontrolpullup('d',7,1);
}
unsigned char keypad_u8read()
 748:	61 2f       	mov	r22, r17
 74a:	6c 5f       	subi	r22, 0xFC	; 252
			DIO_vwrite_pin('d',3,1);
			DIO_vwrite_pin('d',row,0);
			
			for(col=0;col<4;col++)
			{
				x=DIO_U8read_pin('d',(col+4));
 74c:	84 e6       	ldi	r24, 0x64	; 100
 74e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <DIO_U8read_pin>
				if(x==0)
 752:	88 23       	and	r24, r24
 754:	61 f4       	brne	.+24     	; 0x76e <keypad_u8read+0x86>
				{
					returnval=arr[row][col];
 756:	e0 2f       	mov	r30, r16
 758:	f0 e0       	ldi	r31, 0x00	; 0
 75a:	ee 0f       	add	r30, r30
 75c:	ff 1f       	adc	r31, r31
 75e:	ee 0f       	add	r30, r30
 760:	ff 1f       	adc	r31, r31
 762:	e1 0f       	add	r30, r17
 764:	f1 1d       	adc	r31, r1
 766:	ec 0f       	add	r30, r28
 768:	fd 1f       	adc	r31, r29
 76a:	81 81       	ldd	r24, Z+1	; 0x01
 76c:	04 c0       	rjmp	.+8      	; 0x776 <keypad_u8read+0x8e>
			DIO_vwrite_pin('d',1,1);
			DIO_vwrite_pin('d',2,1);
			DIO_vwrite_pin('d',3,1);
			DIO_vwrite_pin('d',row,0);
			
			for(col=0;col<4;col++)
 76e:	1f 5f       	subi	r17, 0xFF	; 255
 770:	14 30       	cpi	r17, 0x04	; 4
 772:	51 f7       	brne	.-44     	; 0x748 <keypad_u8read+0x60>
 774:	0b c0       	rjmp	.+22     	; 0x78c <keypad_u8read+0xa4>
				break;
			}
			
		}
		return returnval;
 776:	60 96       	adiw	r28, 0x10	; 16
 778:	0f b6       	in	r0, 0x3f	; 63
 77a:	f8 94       	cli
 77c:	de bf       	out	0x3e, r29	; 62
 77e:	0f be       	out	0x3f, r0	; 63
 780:	cd bf       	out	0x3d, r28	; 61
 782:	df 91       	pop	r29
 784:	cf 91       	pop	r28
 786:	1f 91       	pop	r17
 788:	0f 91       	pop	r16
 78a:	08 95       	ret
unsigned char keypad_u8read()
{
	unsigned char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'.','0','=','+'}};
		char row,col,x;
		char returnval=0xff;
		for(row=0;row<4;row++)
 78c:	0f 5f       	subi	r16, 0xFF	; 255
 78e:	04 30       	cpi	r16, 0x04	; 4
 790:	09 f6       	brne	.-126    	; 0x714 <keypad_u8read+0x2c>
 792:	8f ef       	ldi	r24, 0xFF	; 255
 794:	f0 cf       	rjmp	.-32     	; 0x776 <keypad_u8read+0x8e>

00000796 <send_falling_edge>:
	_delay_ms(1);
	#endif
}
static void send_falling_edge(void)
{
	DIO_vwrite_pin('A',EN,1);
 796:	81 e4       	ldi	r24, 0x41	; 65
 798:	60 e0       	ldi	r22, 0x00	; 0
 79a:	41 e0       	ldi	r20, 0x01	; 1
 79c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7a0:	8f e9       	ldi	r24, 0x9F	; 159
 7a2:	9f e0       	ldi	r25, 0x0F	; 15
 7a4:	01 97       	sbiw	r24, 0x01	; 1
 7a6:	f1 f7       	brne	.-4      	; 0x7a4 <send_falling_edge+0xe>
 7a8:	00 c0       	rjmp	.+0      	; 0x7aa <send_falling_edge+0x14>
 7aa:	00 00       	nop
	_delay_ms(2);
	DIO_vwrite_pin('A',EN,0);
 7ac:	81 e4       	ldi	r24, 0x41	; 65
 7ae:	60 e0       	ldi	r22, 0x00	; 0
 7b0:	40 e0       	ldi	r20, 0x00	; 0
 7b2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
 7b6:	8f e9       	ldi	r24, 0x9F	; 159
 7b8:	9f e0       	ldi	r25, 0x0F	; 15
 7ba:	01 97       	sbiw	r24, 0x01	; 1
 7bc:	f1 f7       	brne	.-4      	; 0x7ba <send_falling_edge+0x24>
 7be:	00 c0       	rjmp	.+0      	; 0x7c0 <send_falling_edge+0x2a>
 7c0:	00 00       	nop
	_delay_ms(2);
}
 7c2:	08 95       	ret

000007c4 <vwrite_lownibble>:
		LCD_vsend_char(*data);
		data++;
	}
}
void vwrite_lownibble(unsigned char port,unsigned char number)
{
 7c4:	0f 93       	push	r16
 7c6:	1f 93       	push	r17
 7c8:	cf 93       	push	r28
 7ca:	c8 2f       	mov	r28, r24
 7cc:	06 2f       	mov	r16, r22
	DIO_vwrite_pin(port,0,READ_BIT(number,0));
 7ce:	46 2f       	mov	r20, r22
 7d0:	41 70       	andi	r20, 0x01	; 1
 7d2:	60 e0       	ldi	r22, 0x00	; 0
 7d4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	DIO_vwrite_pin(port,1,READ_BIT(number,1));
 7d8:	10 e0       	ldi	r17, 0x00	; 0
 7da:	a8 01       	movw	r20, r16
 7dc:	42 70       	andi	r20, 0x02	; 2
 7de:	50 70       	andi	r21, 0x00	; 0
 7e0:	55 95       	asr	r21
 7e2:	47 95       	ror	r20
 7e4:	8c 2f       	mov	r24, r28
 7e6:	61 e0       	ldi	r22, 0x01	; 1
 7e8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	DIO_vwrite_pin(port,2,READ_BIT(number,2));
 7ec:	a8 01       	movw	r20, r16
 7ee:	44 70       	andi	r20, 0x04	; 4
 7f0:	50 70       	andi	r21, 0x00	; 0
 7f2:	55 95       	asr	r21
 7f4:	47 95       	ror	r20
 7f6:	55 95       	asr	r21
 7f8:	47 95       	ror	r20
 7fa:	8c 2f       	mov	r24, r28
 7fc:	62 e0       	ldi	r22, 0x02	; 2
 7fe:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	DIO_vwrite_pin(port,3,READ_BIT(number,3));
 802:	08 70       	andi	r16, 0x08	; 8
 804:	10 70       	andi	r17, 0x00	; 0
 806:	a8 01       	movw	r20, r16
 808:	55 95       	asr	r21
 80a:	47 95       	ror	r20
 80c:	55 95       	asr	r21
 80e:	47 95       	ror	r20
 810:	55 95       	asr	r21
 812:	47 95       	ror	r20
 814:	8c 2f       	mov	r24, r28
 816:	63 e0       	ldi	r22, 0x03	; 3
 818:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
}
 81c:	cf 91       	pop	r28
 81e:	1f 91       	pop	r17
 820:	0f 91       	pop	r16
 822:	08 95       	ret

00000824 <vwrite_highnibble>:
void vwrite_highnibble(unsigned char port,unsigned char number)
{
 824:	0f 93       	push	r16
 826:	1f 93       	push	r17
 828:	cf 93       	push	r28
 82a:	c8 2f       	mov	r28, r24
 82c:	06 2f       	mov	r16, r22
	DIO_vwrite_pin(port,4,READ_BIT(number,0));
 82e:	46 2f       	mov	r20, r22
 830:	41 70       	andi	r20, 0x01	; 1
 832:	64 e0       	ldi	r22, 0x04	; 4
 834:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	DIO_vwrite_pin(port,5,READ_BIT(number,1));
 838:	10 e0       	ldi	r17, 0x00	; 0
 83a:	a8 01       	movw	r20, r16
 83c:	42 70       	andi	r20, 0x02	; 2
 83e:	50 70       	andi	r21, 0x00	; 0
 840:	55 95       	asr	r21
 842:	47 95       	ror	r20
 844:	8c 2f       	mov	r24, r28
 846:	65 e0       	ldi	r22, 0x05	; 5
 848:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	DIO_vwrite_pin(port,6,READ_BIT(number,2));
 84c:	a8 01       	movw	r20, r16
 84e:	44 70       	andi	r20, 0x04	; 4
 850:	50 70       	andi	r21, 0x00	; 0
 852:	55 95       	asr	r21
 854:	47 95       	ror	r20
 856:	55 95       	asr	r21
 858:	47 95       	ror	r20
 85a:	8c 2f       	mov	r24, r28
 85c:	66 e0       	ldi	r22, 0x06	; 6
 85e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	DIO_vwrite_pin(port,7,READ_BIT(number,3));
 862:	08 70       	andi	r16, 0x08	; 8
 864:	10 70       	andi	r17, 0x00	; 0
 866:	a8 01       	movw	r20, r16
 868:	55 95       	asr	r21
 86a:	47 95       	ror	r20
 86c:	55 95       	asr	r21
 86e:	47 95       	ror	r20
 870:	55 95       	asr	r21
 872:	47 95       	ror	r20
 874:	8c 2f       	mov	r24, r28
 876:	67 e0       	ldi	r22, 0x07	; 7
 878:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
 87c:	cf 91       	pop	r28
 87e:	1f 91       	pop	r17
 880:	0f 91       	pop	r16
 882:	08 95       	ret

00000884 <LCD_vsend_cmd>:
	send_falling_edge();
	_delay_ms(1);
	#endif
}
void LCD_vsend_cmd(char cmd)
{
 884:	cf 93       	push	r28
 886:	c8 2f       	mov	r28, r24
	DIO_vwrite_port('A',cmd);
	DIO_vwrite_pin('B',RS,0);
	send_falling_edge();
	
	#elif defined four_bits_mode
	vwrite_highnibble('A',cmd>>4);
 888:	68 2f       	mov	r22, r24
 88a:	62 95       	swap	r22
 88c:	6f 70       	andi	r22, 0x0F	; 15
 88e:	81 e4       	ldi	r24, 0x41	; 65
 890:	0e 94 12 04 	call	0x824	; 0x824 <vwrite_highnibble>
	DIO_vwrite_pin('A',RS,0);
 894:	81 e4       	ldi	r24, 0x41	; 65
 896:	62 e0       	ldi	r22, 0x02	; 2
 898:	40 e0       	ldi	r20, 0x00	; 0
 89a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	send_falling_edge();
 89e:	0e 94 cb 03 	call	0x796	; 0x796 <send_falling_edge>
	vwrite_highnibble('A',cmd);
 8a2:	81 e4       	ldi	r24, 0x41	; 65
 8a4:	6c 2f       	mov	r22, r28
 8a6:	0e 94 12 04 	call	0x824	; 0x824 <vwrite_highnibble>
	DIO_vwrite_pin('A',RS,0);
 8aa:	81 e4       	ldi	r24, 0x41	; 65
 8ac:	62 e0       	ldi	r22, 0x02	; 2
 8ae:	40 e0       	ldi	r20, 0x00	; 0
 8b0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	send_falling_edge();
 8b4:	0e 94 cb 03 	call	0x796	; 0x796 <send_falling_edge>
 8b8:	8f ec       	ldi	r24, 0xCF	; 207
 8ba:	97 e0       	ldi	r25, 0x07	; 7
 8bc:	01 97       	sbiw	r24, 0x01	; 1
 8be:	f1 f7       	brne	.-4      	; 0x8bc <LCD_vsend_cmd+0x38>
 8c0:	00 c0       	rjmp	.+0      	; 0x8c2 <LCD_vsend_cmd+0x3e>
 8c2:	00 00       	nop
	_delay_ms(1);
	#endif
}
 8c4:	cf 91       	pop	r28
 8c6:	08 95       	ret

000008c8 <LCD_vmove_cursor>:
}

void LCD_vmove_cursor(unsigned char row , unsigned char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
 8c8:	28 2f       	mov	r18, r24
 8ca:	21 50       	subi	r18, 0x01	; 1
 8cc:	22 30       	cpi	r18, 0x02	; 2
 8ce:	70 f4       	brcc	.+28     	; 0x8ec <LCD_vmove_cursor+0x24>
 8d0:	61 31       	cpi	r22, 0x11	; 17
 8d2:	70 f4       	brcc	.+28     	; 0x8f0 <LCD_vmove_cursor+0x28>
 8d4:	66 23       	and	r22, r22
 8d6:	71 f0       	breq	.+28     	; 0x8f4 <LCD_vmove_cursor+0x2c>
	{
		data=0x80;
	}
	else if(row==1)
 8d8:	81 30       	cpi	r24, 0x01	; 1
 8da:	19 f4       	brne	.+6      	; 0x8e2 <LCD_vmove_cursor+0x1a>
	{
		data=0x80+coloumn-1 ;
 8dc:	96 2f       	mov	r25, r22
 8de:	91 58       	subi	r25, 0x81	; 129
 8e0:	0a c0       	rjmp	.+20     	; 0x8f6 <LCD_vmove_cursor+0x2e>
	}
	else if (row==2)
 8e2:	82 30       	cpi	r24, 0x02	; 2
 8e4:	41 f4       	brne	.+16     	; 0x8f6 <LCD_vmove_cursor+0x2e>
	{
		data=0xc0+coloumn-1;
 8e6:	96 2f       	mov	r25, r22
 8e8:	91 54       	subi	r25, 0x41	; 65
 8ea:	05 c0       	rjmp	.+10     	; 0x8f6 <LCD_vmove_cursor+0x2e>
void LCD_vmove_cursor(unsigned char row , unsigned char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
	{
		data=0x80;
 8ec:	90 e8       	ldi	r25, 0x80	; 128
 8ee:	03 c0       	rjmp	.+6      	; 0x8f6 <LCD_vmove_cursor+0x2e>
 8f0:	90 e8       	ldi	r25, 0x80	; 128
 8f2:	01 c0       	rjmp	.+2      	; 0x8f6 <LCD_vmove_cursor+0x2e>
 8f4:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if (row==2)
	{
		data=0xc0+coloumn-1;
	}
	LCD_vsend_cmd(data);
 8f6:	89 2f       	mov	r24, r25
 8f8:	0e 94 42 04 	call	0x884	; 0x884 <LCD_vsend_cmd>
 8fc:	8f ec       	ldi	r24, 0xCF	; 207
 8fe:	97 e0       	ldi	r25, 0x07	; 7
 900:	01 97       	sbiw	r24, 0x01	; 1
 902:	f1 f7       	brne	.-4      	; 0x900 <LCD_vmove_cursor+0x38>
 904:	00 c0       	rjmp	.+0      	; 0x906 <LCD_vmove_cursor+0x3e>
 906:	00 00       	nop
	_delay_ms(1);	
}
 908:	08 95       	ret

0000090a <LCD_vclearscreen>:
	_delay_ms(1);
	#endif
}
void LCD_vclearscreen()
{
	LCD_vsend_cmd(CLR_SCREEN);
 90a:	81 e0       	ldi	r24, 0x01	; 1
 90c:	0e 94 42 04 	call	0x884	; 0x884 <LCD_vsend_cmd>
 910:	8f e1       	ldi	r24, 0x1F	; 31
 912:	9e e4       	ldi	r25, 0x4E	; 78
 914:	01 97       	sbiw	r24, 0x01	; 1
 916:	f1 f7       	brne	.-4      	; 0x914 <LCD_vclearscreen+0xa>
 918:	00 c0       	rjmp	.+0      	; 0x91a <LCD_vclearscreen+0x10>
 91a:	00 00       	nop
	_delay_ms(10);

}
 91c:	08 95       	ret

0000091e <LCD_vinit>:
 91e:	8f ef       	ldi	r24, 0xFF	; 255
 920:	91 ee       	ldi	r25, 0xE1	; 225
 922:	a4 e0       	ldi	r26, 0x04	; 4
 924:	81 50       	subi	r24, 0x01	; 1
 926:	90 40       	sbci	r25, 0x00	; 0
 928:	a0 40       	sbci	r26, 0x00	; 0
 92a:	e1 f7       	brne	.-8      	; 0x924 <LCD_vinit+0x6>
 92c:	00 c0       	rjmp	.+0      	; 0x92e <LCD_vinit+0x10>
 92e:	00 00       	nop
	LCD_vsend_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1);
	
	#elif defined four_bits_mode
	_delay_ms(200);
	DIO_vset_pindir('A',4,1);
 930:	81 e4       	ldi	r24, 0x41	; 65
 932:	64 e0       	ldi	r22, 0x04	; 4
 934:	41 e0       	ldi	r20, 0x01	; 1
 936:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('A',5,1);
 93a:	81 e4       	ldi	r24, 0x41	; 65
 93c:	65 e0       	ldi	r22, 0x05	; 5
 93e:	41 e0       	ldi	r20, 0x01	; 1
 940:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('A',6,1);
 944:	81 e4       	ldi	r24, 0x41	; 65
 946:	66 e0       	ldi	r22, 0x06	; 6
 948:	41 e0       	ldi	r20, 0x01	; 1
 94a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('A',7,1);
 94e:	81 e4       	ldi	r24, 0x41	; 65
 950:	67 e0       	ldi	r22, 0x07	; 7
 952:	41 e0       	ldi	r20, 0x01	; 1
 954:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('A',EN,1);
 958:	81 e4       	ldi	r24, 0x41	; 65
 95a:	60 e0       	ldi	r22, 0x00	; 0
 95c:	41 e0       	ldi	r20, 0x01	; 1
 95e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('A',RW,1);
 962:	81 e4       	ldi	r24, 0x41	; 65
 964:	61 e0       	ldi	r22, 0x01	; 1
 966:	41 e0       	ldi	r20, 0x01	; 1
 968:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('A',RS,1);
 96c:	81 e4       	ldi	r24, 0x41	; 65
 96e:	62 e0       	ldi	r22, 0x02	; 2
 970:	41 e0       	ldi	r20, 0x01	; 1
 972:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vwrite_pin('A',RW,0);
 976:	81 e4       	ldi	r24, 0x41	; 65
 978:	61 e0       	ldi	r22, 0x01	; 1
 97a:	40 e0       	ldi	r20, 0x00	; 0
 97c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	LCD_vsend_cmd(RETURN_HOME); //return home
 980:	82 e0       	ldi	r24, 0x02	; 2
 982:	0e 94 42 04 	call	0x884	; 0x884 <LCD_vsend_cmd>
 986:	af e1       	ldi	r26, 0x1F	; 31
 988:	be e4       	ldi	r27, 0x4E	; 78
 98a:	11 97       	sbiw	r26, 0x01	; 1
 98c:	f1 f7       	brne	.-4      	; 0x98a <LCD_vinit+0x6c>
 98e:	00 c0       	rjmp	.+0      	; 0x990 <LCD_vinit+0x72>
 990:	00 00       	nop
	_delay_ms(10);
	LCD_vsend_cmd(FOUR_BITS); //4 bit mode
 992:	88 e2       	ldi	r24, 0x28	; 40
 994:	0e 94 42 04 	call	0x884	; 0x884 <LCD_vsend_cmd>
 998:	8f ec       	ldi	r24, 0xCF	; 207
 99a:	97 e0       	ldi	r25, 0x07	; 7
 99c:	01 97       	sbiw	r24, 0x01	; 1
 99e:	f1 f7       	brne	.-4      	; 0x99c <LCD_vinit+0x7e>
 9a0:	00 c0       	rjmp	.+0      	; 0x9a2 <LCD_vinit+0x84>
 9a2:	00 00       	nop
	_delay_ms(1);
	LCD_vsend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
 9a4:	8e e0       	ldi	r24, 0x0E	; 14
 9a6:	0e 94 42 04 	call	0x884	; 0x884 <LCD_vsend_cmd>
 9aa:	af ec       	ldi	r26, 0xCF	; 207
 9ac:	b7 e0       	ldi	r27, 0x07	; 7
 9ae:	11 97       	sbiw	r26, 0x01	; 1
 9b0:	f1 f7       	brne	.-4      	; 0x9ae <LCD_vinit+0x90>
 9b2:	00 c0       	rjmp	.+0      	; 0x9b4 <LCD_vinit+0x96>
 9b4:	00 00       	nop
	_delay_ms(1);
	LCD_vsend_cmd(CLR_SCREEN);//clear the screen
 9b6:	81 e0       	ldi	r24, 0x01	; 1
 9b8:	0e 94 42 04 	call	0x884	; 0x884 <LCD_vsend_cmd>
 9bc:	8f e1       	ldi	r24, 0x1F	; 31
 9be:	9e e4       	ldi	r25, 0x4E	; 78
 9c0:	01 97       	sbiw	r24, 0x01	; 1
 9c2:	f1 f7       	brne	.-4      	; 0x9c0 <LCD_vinit+0xa2>
 9c4:	00 c0       	rjmp	.+0      	; 0x9c6 <LCD_vinit+0xa8>
 9c6:	00 00       	nop
	_delay_ms(10);
	LCD_vsend_cmd(ENTRY_MODE); //entry mode
 9c8:	86 e0       	ldi	r24, 0x06	; 6
 9ca:	0e 94 42 04 	call	0x884	; 0x884 <LCD_vsend_cmd>
 9ce:	af ec       	ldi	r26, 0xCF	; 207
 9d0:	b7 e0       	ldi	r27, 0x07	; 7
 9d2:	11 97       	sbiw	r26, 0x01	; 1
 9d4:	f1 f7       	brne	.-4      	; 0x9d2 <LCD_vinit+0xb4>
 9d6:	00 c0       	rjmp	.+0      	; 0x9d8 <LCD_vinit+0xba>
 9d8:	00 00       	nop
	_delay_ms(1);
	#endif
}
 9da:	08 95       	ret

000009dc <LCD_vsend_char>:
	_delay_ms(2);
	DIO_vwrite_pin('A',EN,0);
	_delay_ms(2);
}
void LCD_vsend_char(char data)
{
 9dc:	cf 93       	push	r28
 9de:	c8 2f       	mov	r28, r24
	DIO_vwrite_port('A',data);
	DIO_vwrite_pin('B',RS,1);
	send_falling_edge();
	
	#elif defined four_bits_mode
	vwrite_highnibble('A',data>>4);
 9e0:	68 2f       	mov	r22, r24
 9e2:	62 95       	swap	r22
 9e4:	6f 70       	andi	r22, 0x0F	; 15
 9e6:	81 e4       	ldi	r24, 0x41	; 65
 9e8:	0e 94 12 04 	call	0x824	; 0x824 <vwrite_highnibble>
	DIO_vwrite_pin('A',RS,1);
 9ec:	81 e4       	ldi	r24, 0x41	; 65
 9ee:	62 e0       	ldi	r22, 0x02	; 2
 9f0:	41 e0       	ldi	r20, 0x01	; 1
 9f2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	send_falling_edge();
 9f6:	0e 94 cb 03 	call	0x796	; 0x796 <send_falling_edge>
	vwrite_highnibble('A',data);
 9fa:	81 e4       	ldi	r24, 0x41	; 65
 9fc:	6c 2f       	mov	r22, r28
 9fe:	0e 94 12 04 	call	0x824	; 0x824 <vwrite_highnibble>
	DIO_vwrite_pin('A',RS,1);
 a02:	81 e4       	ldi	r24, 0x41	; 65
 a04:	62 e0       	ldi	r22, 0x02	; 2
 a06:	41 e0       	ldi	r20, 0x01	; 1
 a08:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	send_falling_edge();
 a0c:	0e 94 cb 03 	call	0x796	; 0x796 <send_falling_edge>
 a10:	8f ec       	ldi	r24, 0xCF	; 207
 a12:	97 e0       	ldi	r25, 0x07	; 7
 a14:	01 97       	sbiw	r24, 0x01	; 1
 a16:	f1 f7       	brne	.-4      	; 0xa14 <LCD_vsend_char+0x38>
 a18:	00 c0       	rjmp	.+0      	; 0xa1a <LCD_vsend_char+0x3e>
 a1a:	00 00       	nop
	_delay_ms(1);
	#endif
}
 a1c:	cf 91       	pop	r28
 a1e:	08 95       	ret

00000a20 <LCD_vSend_string>:
	}
	LCD_vsend_cmd(data);
	_delay_ms(1);	
}
void LCD_vSend_string(char *data)
{
 a20:	cf 93       	push	r28
 a22:	df 93       	push	r29
 a24:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 a26:	88 81       	ld	r24, Y
 a28:	88 23       	and	r24, r24
 a2a:	31 f0       	breq	.+12     	; 0xa38 <LCD_vSend_string+0x18>
		data=0xc0+coloumn-1;
	}
	LCD_vsend_cmd(data);
	_delay_ms(1);	
}
void LCD_vSend_string(char *data)
 a2c:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_vsend_char(*data);
 a2e:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_vsend_char>
	LCD_vsend_cmd(data);
	_delay_ms(1);	
}
void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
 a32:	89 91       	ld	r24, Y+
 a34:	88 23       	and	r24, r24
 a36:	d9 f7       	brne	.-10     	; 0xa2e <LCD_vSend_string+0xe>
	{
		LCD_vsend_char(*data);
		data++;
	}
}
 a38:	df 91       	pop	r29
 a3a:	cf 91       	pop	r28
 a3c:	08 95       	ret

00000a3e <main>:
volatile unsigned char seconds_counter=0;
unsigned char minutes_counter=0,hours_counter=0;
unsigned char first_digit,second_digit,value;
int main(void)
{
	keypad_vinit();
 a3e:	0e 94 37 03 	call	0x66e	; 0x66e <keypad_vinit>
	LCD_vinit();
 a42:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_vinit>
	seven_seg_vinit('B');
 a46:	82 e4       	ldi	r24, 0x42	; 66
 a48:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <seven_seg_vinit>
	SET_BIT(DDRC,0);
 a4c:	a0 9a       	sbi	0x14, 0	; 20
	SET_BIT(DDRC,1);
 a4e:	a1 9a       	sbi	0x14, 1	; 20
	SET_BIT(DDRC,2);
 a50:	a2 9a       	sbi	0x14, 2	; 20
	SET_BIT(DDRC,3);
 a52:	a3 9a       	sbi	0x14, 3	; 20
	SET_BIT(DDRC,4);
 a54:	a4 9a       	sbi	0x14, 4	; 20
	SET_BIT(DDRC,5);
 a56:	a5 9a       	sbi	0x14, 5	; 20
	LCD_vSend_string("press 1 to");
 a58:	80 e7       	ldi	r24, 0x70	; 112
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	0e 94 10 05 	call	0xa20	; 0xa20 <LCD_vSend_string>
	LCD_vmove_cursor(2,1);
 a60:	82 e0       	ldi	r24, 0x02	; 2
 a62:	61 e0       	ldi	r22, 0x01	; 1
 a64:	0e 94 64 04 	call	0x8c8	; 0x8c8 <LCD_vmove_cursor>
	LCD_vSend_string("set clock");
 a68:	8b e7       	ldi	r24, 0x7B	; 123
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	0e 94 10 05 	call	0xa20	; 0xa20 <LCD_vSend_string>
	timer2_overflow_init_interrupt();
 a70:	0e 94 20 07 	call	0xe40	; 0xe40 <timer2_overflow_init_interrupt>
				LCD_vSend_string("set clock");
			}
			else
			{
				LCD_vclearscreen();
				LCD_vSend_string("wrong choice");
 a74:	0f 2e       	mov	r0, r31
 a76:	f4 ea       	ldi	r31, 0xA4	; 164
 a78:	cf 2e       	mov	r12, r31
 a7a:	f0 e0       	ldi	r31, 0x00	; 0
 a7c:	df 2e       	mov	r13, r31
 a7e:	f0 2d       	mov	r31, r0
				_delay_ms(1000);
				LCD_vclearscreen();
				LCD_vSend_string("press 1 to");
 a80:	00 e7       	ldi	r16, 0x70	; 112
 a82:	10 e0       	ldi	r17, 0x00	; 0
				LCD_vmove_cursor(2,1);
				LCD_vSend_string("set clock");
 a84:	0f 2e       	mov	r0, r31
 a86:	fb e7       	ldi	r31, 0x7B	; 123
 a88:	ef 2e       	mov	r14, r31
 a8a:	f0 e0       	ldi	r31, 0x00	; 0
 a8c:	ff 2e       	mov	r15, r31
 a8e:	f0 2d       	mov	r31, r0
		if(value!=NOTPASSED)
		{
			if(value =='1')
			{
				LCD_vclearscreen();
				LCD_vSend_string("hours=--");
 a90:	0f 2e       	mov	r0, r31
 a92:	f5 e8       	ldi	r31, 0x85	; 133
 a94:	af 2e       	mov	r10, r31
 a96:	f0 e0       	ldi	r31, 0x00	; 0
 a98:	bf 2e       	mov	r11, r31
 a9a:	f0 2d       	mov	r31, r0
				LCD_vsend_char(second_digit);
				_delay_ms(300);
				hours_counter=(first_digit-48)*10+(second_digit-48);
				LCD_vclearscreen();
				
				LCD_vSend_string("minutes=--");
 a9c:	0f 2e       	mov	r0, r31
 a9e:	fe e8       	ldi	r31, 0x8E	; 142
 aa0:	8f 2e       	mov	r8, r31
 aa2:	f0 e0       	ldi	r31, 0x00	; 0
 aa4:	9f 2e       	mov	r9, r31
 aa6:	f0 2d       	mov	r31, r0
				LCD_vsend_char(second_digit);
				_delay_ms(300);
				minutes_counter=(first_digit-48)*10+(second_digit-48);
				LCD_vclearscreen();
				
				LCD_vSend_string("seconds=--");
 aa8:	0f 2e       	mov	r0, r31
 aaa:	f9 e9       	ldi	r31, 0x99	; 153
 aac:	6f 2e       	mov	r6, r31
 aae:	f0 e0       	ldi	r31, 0x00	; 0
 ab0:	7f 2e       	mov	r7, r31
 ab2:	f0 2d       	mov	r31, r0
		SET_BIT(PORTC,2);
		SET_BIT(PORTC,3);
		SET_BIT(PORTC,4);
		SET_BIT(PORTC,5);
		CLR_BIT(PORTC,0);
		seven_seg_write('B',seconds_counter%10);
 ab4:	ca e0       	ldi	r28, 0x0A	; 10
	LCD_vSend_string("set clock");
	timer2_overflow_init_interrupt();
	
    while(1)
    {
		value=keypad_u8read();
 ab6:	0e 94 74 03 	call	0x6e8	; 0x6e8 <keypad_u8read>
 aba:	80 93 c1 00 	sts	0x00C1, r24
		if(value!=NOTPASSED)
 abe:	8f 3f       	cpi	r24, 0xFF	; 255
 ac0:	09 f4       	brne	.+2      	; 0xac4 <main+0x86>
 ac2:	db c0       	rjmp	.+438    	; 0xc7a <main+0x23c>
		{
			if(value =='1')
 ac4:	81 33       	cpi	r24, 0x31	; 49
 ac6:	09 f0       	breq	.+2      	; 0xaca <main+0x8c>
 ac8:	be c0       	rjmp	.+380    	; 0xc46 <main+0x208>
			{
				LCD_vclearscreen();
 aca:	0e 94 85 04 	call	0x90a	; 0x90a <LCD_vclearscreen>
				LCD_vSend_string("hours=--");
 ace:	c5 01       	movw	r24, r10
 ad0:	0e 94 10 05 	call	0xa20	; 0xa20 <LCD_vSend_string>
				LCD_vmove_cursor(1,7);
 ad4:	81 e0       	ldi	r24, 0x01	; 1
 ad6:	67 e0       	ldi	r22, 0x07	; 7
 ad8:	0e 94 64 04 	call	0x8c8	; 0x8c8 <LCD_vmove_cursor>
 adc:	8f ef       	ldi	r24, 0xFF	; 255
 ade:	94 e3       	ldi	r25, 0x34	; 52
 ae0:	ac e0       	ldi	r26, 0x0C	; 12
 ae2:	81 50       	subi	r24, 0x01	; 1
 ae4:	90 40       	sbci	r25, 0x00	; 0
 ae6:	a0 40       	sbci	r26, 0x00	; 0
 ae8:	e1 f7       	brne	.-8      	; 0xae2 <main+0xa4>
 aea:	00 c0       	rjmp	.+0      	; 0xaec <main+0xae>
 aec:	00 00       	nop
				_delay_ms(500);
				do 
				{
					first_digit=keypad_u8read();
 aee:	0e 94 74 03 	call	0x6e8	; 0x6e8 <keypad_u8read>
 af2:	80 93 bf 00 	sts	0x00BF, r24
					
				} while (first_digit==NOTPASSED);
 af6:	8f 3f       	cpi	r24, 0xFF	; 255
 af8:	d1 f3       	breq	.-12     	; 0xaee <main+0xb0>
				LCD_vsend_char(first_digit);
 afa:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_vsend_char>
 afe:	8f ef       	ldi	r24, 0xFF	; 255
 b00:	92 e5       	ldi	r25, 0x52	; 82
 b02:	a7 e0       	ldi	r26, 0x07	; 7
 b04:	81 50       	subi	r24, 0x01	; 1
 b06:	90 40       	sbci	r25, 0x00	; 0
 b08:	a0 40       	sbci	r26, 0x00	; 0
 b0a:	e1 f7       	brne	.-8      	; 0xb04 <main+0xc6>
 b0c:	00 c0       	rjmp	.+0      	; 0xb0e <main+0xd0>
 b0e:	00 00       	nop
				_delay_ms(300);
				do
				{
					second_digit=keypad_u8read();
 b10:	0e 94 74 03 	call	0x6e8	; 0x6e8 <keypad_u8read>
 b14:	80 93 c0 00 	sts	0x00C0, r24
					
				} while (second_digit==NOTPASSED);
 b18:	8f 3f       	cpi	r24, 0xFF	; 255
 b1a:	d1 f3       	breq	.-12     	; 0xb10 <main+0xd2>
				LCD_vsend_char(second_digit);
 b1c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_vsend_char>
 b20:	8f ef       	ldi	r24, 0xFF	; 255
 b22:	92 e5       	ldi	r25, 0x52	; 82
 b24:	a7 e0       	ldi	r26, 0x07	; 7
 b26:	81 50       	subi	r24, 0x01	; 1
 b28:	90 40       	sbci	r25, 0x00	; 0
 b2a:	a0 40       	sbci	r26, 0x00	; 0
 b2c:	e1 f7       	brne	.-8      	; 0xb26 <main+0xe8>
 b2e:	00 c0       	rjmp	.+0      	; 0xb30 <main+0xf2>
 b30:	00 00       	nop
				_delay_ms(300);
				hours_counter=(first_digit-48)*10+(second_digit-48);
 b32:	90 91 c0 00 	lds	r25, 0x00C0
 b36:	90 51       	subi	r25, 0x10	; 16
 b38:	80 91 bf 00 	lds	r24, 0x00BF
 b3c:	88 0f       	add	r24, r24
 b3e:	28 2f       	mov	r18, r24
 b40:	22 0f       	add	r18, r18
 b42:	22 0f       	add	r18, r18
 b44:	82 0f       	add	r24, r18
 b46:	89 0f       	add	r24, r25
 b48:	80 93 bc 00 	sts	0x00BC, r24
				LCD_vclearscreen();
 b4c:	0e 94 85 04 	call	0x90a	; 0x90a <LCD_vclearscreen>
				
				LCD_vSend_string("minutes=--");
 b50:	c4 01       	movw	r24, r8
 b52:	0e 94 10 05 	call	0xa20	; 0xa20 <LCD_vSend_string>
				LCD_vmove_cursor(1,9);
 b56:	81 e0       	ldi	r24, 0x01	; 1
 b58:	69 e0       	ldi	r22, 0x09	; 9
 b5a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <LCD_vmove_cursor>
				
				do
				{
					first_digit=keypad_u8read();
 b5e:	0e 94 74 03 	call	0x6e8	; 0x6e8 <keypad_u8read>
 b62:	80 93 bf 00 	sts	0x00BF, r24
				} while (first_digit==NOTPASSED);
 b66:	8f 3f       	cpi	r24, 0xFF	; 255
 b68:	d1 f3       	breq	.-12     	; 0xb5e <main+0x120>
				LCD_vsend_char(first_digit);
 b6a:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_vsend_char>
 b6e:	8f ef       	ldi	r24, 0xFF	; 255
 b70:	92 e5       	ldi	r25, 0x52	; 82
 b72:	a7 e0       	ldi	r26, 0x07	; 7
 b74:	81 50       	subi	r24, 0x01	; 1
 b76:	90 40       	sbci	r25, 0x00	; 0
 b78:	a0 40       	sbci	r26, 0x00	; 0
 b7a:	e1 f7       	brne	.-8      	; 0xb74 <main+0x136>
 b7c:	00 c0       	rjmp	.+0      	; 0xb7e <main+0x140>
 b7e:	00 00       	nop
				_delay_ms(300);
				do
				{
					second_digit=keypad_u8read();
 b80:	0e 94 74 03 	call	0x6e8	; 0x6e8 <keypad_u8read>
 b84:	80 93 c0 00 	sts	0x00C0, r24
				} while (second_digit==NOTPASSED);
 b88:	8f 3f       	cpi	r24, 0xFF	; 255
 b8a:	d1 f3       	breq	.-12     	; 0xb80 <main+0x142>
				LCD_vsend_char(second_digit);
 b8c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_vsend_char>
 b90:	8f ef       	ldi	r24, 0xFF	; 255
 b92:	92 e5       	ldi	r25, 0x52	; 82
 b94:	a7 e0       	ldi	r26, 0x07	; 7
 b96:	81 50       	subi	r24, 0x01	; 1
 b98:	90 40       	sbci	r25, 0x00	; 0
 b9a:	a0 40       	sbci	r26, 0x00	; 0
 b9c:	e1 f7       	brne	.-8      	; 0xb96 <main+0x158>
 b9e:	00 c0       	rjmp	.+0      	; 0xba0 <main+0x162>
 ba0:	00 00       	nop
				_delay_ms(300);
				minutes_counter=(first_digit-48)*10+(second_digit-48);
 ba2:	90 91 c0 00 	lds	r25, 0x00C0
 ba6:	90 51       	subi	r25, 0x10	; 16
 ba8:	80 91 bf 00 	lds	r24, 0x00BF
 bac:	88 0f       	add	r24, r24
 bae:	28 2f       	mov	r18, r24
 bb0:	22 0f       	add	r18, r18
 bb2:	22 0f       	add	r18, r18
 bb4:	82 0f       	add	r24, r18
 bb6:	89 0f       	add	r24, r25
 bb8:	80 93 bd 00 	sts	0x00BD, r24
				LCD_vclearscreen();
 bbc:	0e 94 85 04 	call	0x90a	; 0x90a <LCD_vclearscreen>
				
				LCD_vSend_string("seconds=--");
 bc0:	c3 01       	movw	r24, r6
 bc2:	0e 94 10 05 	call	0xa20	; 0xa20 <LCD_vSend_string>
				LCD_vmove_cursor(1,9);
 bc6:	81 e0       	ldi	r24, 0x01	; 1
 bc8:	69 e0       	ldi	r22, 0x09	; 9
 bca:	0e 94 64 04 	call	0x8c8	; 0x8c8 <LCD_vmove_cursor>
				
				do
				{
					first_digit=keypad_u8read();
 bce:	0e 94 74 03 	call	0x6e8	; 0x6e8 <keypad_u8read>
 bd2:	80 93 bf 00 	sts	0x00BF, r24
				} while (first_digit==NOTPASSED);
 bd6:	8f 3f       	cpi	r24, 0xFF	; 255
 bd8:	d1 f3       	breq	.-12     	; 0xbce <main+0x190>
				LCD_vsend_char(first_digit);
 bda:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_vsend_char>
 bde:	8f ef       	ldi	r24, 0xFF	; 255
 be0:	92 e5       	ldi	r25, 0x52	; 82
 be2:	a7 e0       	ldi	r26, 0x07	; 7
 be4:	81 50       	subi	r24, 0x01	; 1
 be6:	90 40       	sbci	r25, 0x00	; 0
 be8:	a0 40       	sbci	r26, 0x00	; 0
 bea:	e1 f7       	brne	.-8      	; 0xbe4 <main+0x1a6>
 bec:	00 c0       	rjmp	.+0      	; 0xbee <main+0x1b0>
 bee:	00 00       	nop
				_delay_ms(300);
				do
				{
					second_digit=keypad_u8read();
 bf0:	0e 94 74 03 	call	0x6e8	; 0x6e8 <keypad_u8read>
 bf4:	80 93 c0 00 	sts	0x00C0, r24
				} while (second_digit==NOTPASSED);
 bf8:	8f 3f       	cpi	r24, 0xFF	; 255
 bfa:	d1 f3       	breq	.-12     	; 0xbf0 <main+0x1b2>
				LCD_vsend_char(second_digit);
 bfc:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LCD_vsend_char>
 c00:	8f ef       	ldi	r24, 0xFF	; 255
 c02:	92 e5       	ldi	r25, 0x52	; 82
 c04:	a7 e0       	ldi	r26, 0x07	; 7
 c06:	81 50       	subi	r24, 0x01	; 1
 c08:	90 40       	sbci	r25, 0x00	; 0
 c0a:	a0 40       	sbci	r26, 0x00	; 0
 c0c:	e1 f7       	brne	.-8      	; 0xc06 <main+0x1c8>
 c0e:	00 c0       	rjmp	.+0      	; 0xc10 <main+0x1d2>
 c10:	00 00       	nop
				_delay_ms(300);
				seconds_counter=(first_digit-48)*10+(second_digit-48);
 c12:	90 91 c0 00 	lds	r25, 0x00C0
 c16:	90 51       	subi	r25, 0x10	; 16
 c18:	80 91 bf 00 	lds	r24, 0x00BF
 c1c:	88 0f       	add	r24, r24
 c1e:	28 2f       	mov	r18, r24
 c20:	22 0f       	add	r18, r18
 c22:	22 0f       	add	r18, r18
 c24:	82 0f       	add	r24, r18
 c26:	89 0f       	add	r24, r25
 c28:	80 93 be 00 	sts	0x00BE, r24
				LCD_vclearscreen();
 c2c:	0e 94 85 04 	call	0x90a	; 0x90a <LCD_vclearscreen>
				LCD_vSend_string("press 1 to");
 c30:	c8 01       	movw	r24, r16
 c32:	0e 94 10 05 	call	0xa20	; 0xa20 <LCD_vSend_string>
				LCD_vmove_cursor(2,1);
 c36:	82 e0       	ldi	r24, 0x02	; 2
 c38:	61 e0       	ldi	r22, 0x01	; 1
 c3a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <LCD_vmove_cursor>
				LCD_vSend_string("set clock");
 c3e:	c7 01       	movw	r24, r14
 c40:	0e 94 10 05 	call	0xa20	; 0xa20 <LCD_vSend_string>
 c44:	1a c0       	rjmp	.+52     	; 0xc7a <main+0x23c>
			}
			else
			{
				LCD_vclearscreen();
 c46:	0e 94 85 04 	call	0x90a	; 0x90a <LCD_vclearscreen>
				LCD_vSend_string("wrong choice");
 c4a:	c6 01       	movw	r24, r12
 c4c:	0e 94 10 05 	call	0xa20	; 0xa20 <LCD_vSend_string>
 c50:	8f ef       	ldi	r24, 0xFF	; 255
 c52:	99 e6       	ldi	r25, 0x69	; 105
 c54:	a8 e1       	ldi	r26, 0x18	; 24
 c56:	81 50       	subi	r24, 0x01	; 1
 c58:	90 40       	sbci	r25, 0x00	; 0
 c5a:	a0 40       	sbci	r26, 0x00	; 0
 c5c:	e1 f7       	brne	.-8      	; 0xc56 <main+0x218>
 c5e:	00 c0       	rjmp	.+0      	; 0xc60 <main+0x222>
 c60:	00 00       	nop
				_delay_ms(1000);
				LCD_vclearscreen();
 c62:	0e 94 85 04 	call	0x90a	; 0x90a <LCD_vclearscreen>
				LCD_vSend_string("press 1 to");
 c66:	c8 01       	movw	r24, r16
 c68:	0e 94 10 05 	call	0xa20	; 0xa20 <LCD_vSend_string>
				LCD_vmove_cursor(2,1);
 c6c:	82 e0       	ldi	r24, 0x02	; 2
 c6e:	61 e0       	ldi	r22, 0x01	; 1
 c70:	0e 94 64 04 	call	0x8c8	; 0x8c8 <LCD_vmove_cursor>
				LCD_vSend_string("set clock");
 c74:	c7 01       	movw	r24, r14
 c76:	0e 94 10 05 	call	0xa20	; 0xa20 <LCD_vSend_string>
			}
		}
		
		SET_BIT(PORTC,1);
 c7a:	a9 9a       	sbi	0x15, 1	; 21
		SET_BIT(PORTC,2);
 c7c:	aa 9a       	sbi	0x15, 2	; 21
		SET_BIT(PORTC,3);
 c7e:	ab 9a       	sbi	0x15, 3	; 21
		SET_BIT(PORTC,4);
 c80:	ac 9a       	sbi	0x15, 4	; 21
		SET_BIT(PORTC,5);
 c82:	ad 9a       	sbi	0x15, 5	; 21
		CLR_BIT(PORTC,0);
 c84:	a8 98       	cbi	0x15, 0	; 21
		seven_seg_write('B',seconds_counter%10);
 c86:	80 91 be 00 	lds	r24, 0x00BE
 c8a:	6c 2f       	mov	r22, r28
 c8c:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__udivmodqi4>
 c90:	82 e4       	ldi	r24, 0x42	; 66
 c92:	69 2f       	mov	r22, r25
 c94:	0e 94 ee 06 	call	0xddc	; 0xddc <seven_seg_write>
 c98:	af e0       	ldi	r26, 0x0F	; 15
 c9a:	b7 e2       	ldi	r27, 0x27	; 39
 c9c:	11 97       	sbiw	r26, 0x01	; 1
 c9e:	f1 f7       	brne	.-4      	; 0xc9c <main+0x25e>
 ca0:	00 c0       	rjmp	.+0      	; 0xca2 <main+0x264>
 ca2:	00 00       	nop
		_delay_ms(5);
		SET_BIT(PORTC,0);
 ca4:	a8 9a       	sbi	0x15, 0	; 21
		SET_BIT(PORTC,2);
 ca6:	aa 9a       	sbi	0x15, 2	; 21
		SET_BIT(PORTC,3);
 ca8:	ab 9a       	sbi	0x15, 3	; 21
		SET_BIT(PORTC,4);
 caa:	ac 9a       	sbi	0x15, 4	; 21
		SET_BIT(PORTC,5);
 cac:	ad 9a       	sbi	0x15, 5	; 21
		CLR_BIT(PORTC,1);	
 cae:	a9 98       	cbi	0x15, 1	; 21
		seven_seg_write('B',seconds_counter/10);
 cb0:	80 91 be 00 	lds	r24, 0x00BE
 cb4:	6c 2f       	mov	r22, r28
 cb6:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__udivmodqi4>
 cba:	68 2f       	mov	r22, r24
 cbc:	82 e4       	ldi	r24, 0x42	; 66
 cbe:	0e 94 ee 06 	call	0xddc	; 0xddc <seven_seg_write>
 cc2:	8f e0       	ldi	r24, 0x0F	; 15
 cc4:	97 e2       	ldi	r25, 0x27	; 39
 cc6:	01 97       	sbiw	r24, 0x01	; 1
 cc8:	f1 f7       	brne	.-4      	; 0xcc6 <main+0x288>
 cca:	00 c0       	rjmp	.+0      	; 0xccc <main+0x28e>
 ccc:	00 00       	nop
		_delay_ms(5);	
		
		SET_BIT(PORTC,0);
 cce:	a8 9a       	sbi	0x15, 0	; 21
		SET_BIT(PORTC,1);
 cd0:	a9 9a       	sbi	0x15, 1	; 21
		SET_BIT(PORTC,3);
 cd2:	ab 9a       	sbi	0x15, 3	; 21
		SET_BIT(PORTC,4);
 cd4:	ac 9a       	sbi	0x15, 4	; 21
		SET_BIT(PORTC,5);
 cd6:	ad 9a       	sbi	0x15, 5	; 21
		CLR_BIT(PORTC,2);
 cd8:	aa 98       	cbi	0x15, 2	; 21
		seven_seg_write('b',minutes_counter%10);
 cda:	80 91 bd 00 	lds	r24, 0x00BD
 cde:	6c 2f       	mov	r22, r28
 ce0:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__udivmodqi4>
 ce4:	82 e6       	ldi	r24, 0x62	; 98
 ce6:	69 2f       	mov	r22, r25
 ce8:	0e 94 ee 06 	call	0xddc	; 0xddc <seven_seg_write>
 cec:	af e0       	ldi	r26, 0x0F	; 15
 cee:	b7 e2       	ldi	r27, 0x27	; 39
 cf0:	11 97       	sbiw	r26, 0x01	; 1
 cf2:	f1 f7       	brne	.-4      	; 0xcf0 <main+0x2b2>
 cf4:	00 c0       	rjmp	.+0      	; 0xcf6 <main+0x2b8>
 cf6:	00 00       	nop
		_delay_ms(5);
		SET_BIT(PORTC,0);
 cf8:	a8 9a       	sbi	0x15, 0	; 21
		SET_BIT(PORTC,1);
 cfa:	a9 9a       	sbi	0x15, 1	; 21
		SET_BIT(PORTC,2);
 cfc:	aa 9a       	sbi	0x15, 2	; 21
		SET_BIT(PORTC,4);
 cfe:	ac 9a       	sbi	0x15, 4	; 21
		SET_BIT(PORTC,5);
 d00:	ad 9a       	sbi	0x15, 5	; 21
		CLR_BIT(PORTC,3);
 d02:	ab 98       	cbi	0x15, 3	; 21
		seven_seg_write('b',minutes_counter/10);
 d04:	80 91 bd 00 	lds	r24, 0x00BD
 d08:	6c 2f       	mov	r22, r28
 d0a:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__udivmodqi4>
 d0e:	68 2f       	mov	r22, r24
 d10:	82 e6       	ldi	r24, 0x62	; 98
 d12:	0e 94 ee 06 	call	0xddc	; 0xddc <seven_seg_write>
 d16:	8f e0       	ldi	r24, 0x0F	; 15
 d18:	97 e2       	ldi	r25, 0x27	; 39
 d1a:	01 97       	sbiw	r24, 0x01	; 1
 d1c:	f1 f7       	brne	.-4      	; 0xd1a <main+0x2dc>
 d1e:	00 c0       	rjmp	.+0      	; 0xd20 <main+0x2e2>
 d20:	00 00       	nop
		_delay_ms(5);
		
		SET_BIT(PORTC,0);
 d22:	a8 9a       	sbi	0x15, 0	; 21
		SET_BIT(PORTC,1);
 d24:	a9 9a       	sbi	0x15, 1	; 21
		SET_BIT(PORTC,2);
 d26:	aa 9a       	sbi	0x15, 2	; 21
		SET_BIT(PORTC,3);
 d28:	ab 9a       	sbi	0x15, 3	; 21
		SET_BIT(PORTC,5);
 d2a:	ad 9a       	sbi	0x15, 5	; 21
		CLR_BIT(PORTC,4);
 d2c:	ac 98       	cbi	0x15, 4	; 21
		seven_seg_write('B',hours_counter%10);
 d2e:	80 91 bc 00 	lds	r24, 0x00BC
 d32:	6c 2f       	mov	r22, r28
 d34:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__udivmodqi4>
 d38:	82 e4       	ldi	r24, 0x42	; 66
 d3a:	69 2f       	mov	r22, r25
 d3c:	0e 94 ee 06 	call	0xddc	; 0xddc <seven_seg_write>
 d40:	af e0       	ldi	r26, 0x0F	; 15
 d42:	b7 e2       	ldi	r27, 0x27	; 39
 d44:	11 97       	sbiw	r26, 0x01	; 1
 d46:	f1 f7       	brne	.-4      	; 0xd44 <main+0x306>
 d48:	00 c0       	rjmp	.+0      	; 0xd4a <main+0x30c>
 d4a:	00 00       	nop
		_delay_ms(5);
		SET_BIT(PORTC,0);
 d4c:	a8 9a       	sbi	0x15, 0	; 21
		SET_BIT(PORTC,1);
 d4e:	a9 9a       	sbi	0x15, 1	; 21
		SET_BIT(PORTC,2);
 d50:	aa 9a       	sbi	0x15, 2	; 21
		SET_BIT(PORTC,3);
 d52:	ab 9a       	sbi	0x15, 3	; 21
		SET_BIT(PORTC,4);
 d54:	ac 9a       	sbi	0x15, 4	; 21
		CLR_BIT(PORTC,5);
 d56:	ad 98       	cbi	0x15, 5	; 21
		seven_seg_write('B',hours_counter/10);
 d58:	80 91 bc 00 	lds	r24, 0x00BC
 d5c:	6c 2f       	mov	r22, r28
 d5e:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__udivmodqi4>
 d62:	68 2f       	mov	r22, r24
 d64:	82 e4       	ldi	r24, 0x42	; 66
 d66:	0e 94 ee 06 	call	0xddc	; 0xddc <seven_seg_write>
 d6a:	8f e0       	ldi	r24, 0x0F	; 15
 d6c:	97 e2       	ldi	r25, 0x27	; 39
 d6e:	01 97       	sbiw	r24, 0x01	; 1
 d70:	f1 f7       	brne	.-4      	; 0xd6e <main+0x330>
 d72:	00 c0       	rjmp	.+0      	; 0xd74 <main+0x336>
 d74:	00 00       	nop
		_delay_ms(5);		
		
		if(seconds_counter==60)
 d76:	80 91 be 00 	lds	r24, 0x00BE
 d7a:	8c 33       	cpi	r24, 0x3C	; 60
 d7c:	39 f4       	brne	.+14     	; 0xd8c <main+0x34e>
		{
			seconds_counter=0;
 d7e:	10 92 be 00 	sts	0x00BE, r1
			minutes_counter++;
 d82:	80 91 bd 00 	lds	r24, 0x00BD
 d86:	8f 5f       	subi	r24, 0xFF	; 255
 d88:	80 93 bd 00 	sts	0x00BD, r24
		}
		if(minutes_counter==60)
 d8c:	80 91 bd 00 	lds	r24, 0x00BD
 d90:	8c 33       	cpi	r24, 0x3C	; 60
 d92:	39 f4       	brne	.+14     	; 0xda2 <main+0x364>
		{
			minutes_counter=0;
 d94:	10 92 bd 00 	sts	0x00BD, r1
			hours_counter++;
 d98:	80 91 bc 00 	lds	r24, 0x00BC
 d9c:	8f 5f       	subi	r24, 0xFF	; 255
 d9e:	80 93 bc 00 	sts	0x00BC, r24
		}
		if(hours_counter==24)
 da2:	80 91 bc 00 	lds	r24, 0x00BC
 da6:	88 31       	cpi	r24, 0x18	; 24
 da8:	09 f0       	breq	.+2      	; 0xdac <main+0x36e>
 daa:	85 ce       	rjmp	.-758    	; 0xab6 <main+0x78>
		{
			hours_counter=0;
 dac:	10 92 bc 00 	sts	0x00BC, r1
 db0:	82 ce       	rjmp	.-764    	; 0xab6 <main+0x78>

00000db2 <__vector_5>:
		}									
	}												
}
ISR(TIMER2_OVF_vect)
{
 db2:	1f 92       	push	r1
 db4:	0f 92       	push	r0
 db6:	0f b6       	in	r0, 0x3f	; 63
 db8:	0f 92       	push	r0
 dba:	11 24       	eor	r1, r1
 dbc:	8f 93       	push	r24
	seconds_counter++;
 dbe:	80 91 be 00 	lds	r24, 0x00BE
 dc2:	8f 5f       	subi	r24, 0xFF	; 255
 dc4:	80 93 be 00 	sts	0x00BE, r24
 dc8:	8f 91       	pop	r24
 dca:	0f 90       	pop	r0
 dcc:	0f be       	out	0x3f, r0	; 63
 dce:	0f 90       	pop	r0
 dd0:	1f 90       	pop	r1
 dd2:	18 95       	reti

00000dd4 <seven_seg_vinit>:
#include "DIO_driver.h"
void seven_seg_vinit(unsigned char port)
{
	DIO_vset_portdir(port,0xff);
 dd4:	6f ef       	ldi	r22, 0xFF	; 255
 dd6:	0e 94 20 02 	call	0x440	; 0x440 <DIO_vset_portdir>
}
 dda:	08 95       	ret

00000ddc <seven_seg_write>:

void seven_seg_write(unsigned char port,unsigned char number)
{
 ddc:	cf 93       	push	r28
 dde:	df 93       	push	r29
 de0:	cd b7       	in	r28, 0x3d	; 61
 de2:	de b7       	in	r29, 0x3e	; 62
 de4:	2a 97       	sbiw	r28, 0x0a	; 10
 de6:	0f b6       	in	r0, 0x3f	; 63
 de8:	f8 94       	cli
 dea:	de bf       	out	0x3e, r29	; 62
 dec:	0f be       	out	0x3f, r0	; 63
 dee:	cd bf       	out	0x3d, r28	; 61
	
	char arr[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x47,0x7f,0x6f};
 df0:	de 01       	movw	r26, r28
 df2:	11 96       	adiw	r26, 0x01	; 1
 df4:	e1 eb       	ldi	r30, 0xB1	; 177
 df6:	f0 e0       	ldi	r31, 0x00	; 0
 df8:	9a e0       	ldi	r25, 0x0A	; 10
 dfa:	01 90       	ld	r0, Z+
 dfc:	0d 92       	st	X+, r0
 dfe:	91 50       	subi	r25, 0x01	; 1
 e00:	e1 f7       	brne	.-8      	; 0xdfa <seven_seg_write+0x1e>

	DIO_vwrite_port(port,arr[number]);	
 e02:	fe 01       	movw	r30, r28
 e04:	e6 0f       	add	r30, r22
 e06:	f1 1d       	adc	r31, r1
 e08:	61 81       	ldd	r22, Z+1	; 0x01
 e0a:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_vwrite_port>
 e0e:	2a 96       	adiw	r28, 0x0a	; 10
 e10:	0f b6       	in	r0, 0x3f	; 63
 e12:	f8 94       	cli
 e14:	de bf       	out	0x3e, r29	; 62
 e16:	0f be       	out	0x3f, r0	; 63
 e18:	cd bf       	out	0x3d, r28	; 61
 e1a:	df 91       	pop	r29
 e1c:	cf 91       	pop	r28
 e1e:	08 95       	ret

00000e20 <timer_ctc_init_interrupt>:
#include "std_macros.h"
#include <avr/io.h>
#include <avr/interrupt.h>
void timer_ctc_init_interrupt(void)
{
	SET_BIT(TCCR0,WGM01);
 e20:	83 b7       	in	r24, 0x33	; 51
 e22:	88 60       	ori	r24, 0x08	; 8
 e24:	83 bf       	out	0x33, r24	; 51
	OCR0=80;
 e26:	80 e5       	ldi	r24, 0x50	; 80
 e28:	8c bf       	out	0x3c, r24	; 60
	SET_BIT(TCCR0,CS00);
 e2a:	83 b7       	in	r24, 0x33	; 51
 e2c:	81 60       	ori	r24, 0x01	; 1
 e2e:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 e30:	83 b7       	in	r24, 0x33	; 51
 e32:	84 60       	ori	r24, 0x04	; 4
 e34:	83 bf       	out	0x33, r24	; 51
	sei();
 e36:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);
 e38:	89 b7       	in	r24, 0x39	; 57
 e3a:	82 60       	ori	r24, 0x02	; 2
 e3c:	89 bf       	out	0x39, r24	; 57
}
 e3e:	08 95       	ret

00000e40 <timer2_overflow_init_interrupt>:
void timer2_overflow_init_interrupt(void)
{
	SET_BIT(ASSR,AS2);
 e40:	82 b5       	in	r24, 0x22	; 34
 e42:	88 60       	ori	r24, 0x08	; 8
 e44:	82 bd       	out	0x22, r24	; 34
	SET_BIT(TCCR2,CS20);
 e46:	85 b5       	in	r24, 0x25	; 37
 e48:	81 60       	ori	r24, 0x01	; 1
 e4a:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS22);
 e4c:	85 b5       	in	r24, 0x25	; 37
 e4e:	84 60       	ori	r24, 0x04	; 4
 e50:	85 bd       	out	0x25, r24	; 37
	sei();
 e52:	78 94       	sei
	SET_BIT(TIMSK,TOIE2);
 e54:	89 b7       	in	r24, 0x39	; 57
 e56:	80 64       	ori	r24, 0x40	; 64
 e58:	89 bf       	out	0x39, r24	; 57
 e5a:	08 95       	ret

00000e5c <__udivmodqi4>:
 e5c:	99 1b       	sub	r25, r25
 e5e:	79 e0       	ldi	r23, 0x09	; 9
 e60:	04 c0       	rjmp	.+8      	; 0xe6a <__udivmodqi4_ep>

00000e62 <__udivmodqi4_loop>:
 e62:	99 1f       	adc	r25, r25
 e64:	96 17       	cp	r25, r22
 e66:	08 f0       	brcs	.+2      	; 0xe6a <__udivmodqi4_ep>
 e68:	96 1b       	sub	r25, r22

00000e6a <__udivmodqi4_ep>:
 e6a:	88 1f       	adc	r24, r24
 e6c:	7a 95       	dec	r23
 e6e:	c9 f7       	brne	.-14     	; 0xe62 <__udivmodqi4_loop>
 e70:	80 95       	com	r24
 e72:	08 95       	ret

00000e74 <_exit>:
 e74:	f8 94       	cli

00000e76 <__stop_program>:
 e76:	ff cf       	rjmp	.-2      	; 0xe76 <__stop_program>
