
keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a40  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000a40  00000ab4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000ac4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00001190  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000100  00000000  00000000  00001218  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c3a  00000000  00000000  00001318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000461  00000000  00000000  00001f52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000739  00000000  00000000  000023b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000218  00000000  00000000  00002aec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e9  00000000  00000000  00002d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ce  00000000  00000000  00002fed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 36 03 	call	0x66c	; 0x66c <main>
  8a:	0c 94 1e 05 	jmp	0xa3c	; 0xa3c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vset_pindir>:
#define F_CPU 8000000UL
#include <util/delay.h>
#include "std_macros.h"
void DIO_vset_pindir(unsigned char port,unsigned char pin,unsigned char dir)
{
switch(port)
  92:	84 34       	cpi	r24, 0x44	; 68
  94:	09 f4       	brne	.+2      	; 0x98 <DIO_vset_pindir+0x6>
  96:	71 c0       	rjmp	.+226    	; 0x17a <DIO_vset_pindir+0xe8>
  98:	85 34       	cpi	r24, 0x45	; 69
  9a:	48 f4       	brcc	.+18     	; 0xae <DIO_vset_pindir+0x1c>
  9c:	82 34       	cpi	r24, 0x42	; 66
  9e:	99 f1       	breq	.+102    	; 0x106 <DIO_vset_pindir+0x74>
  a0:	83 34       	cpi	r24, 0x43	; 67
  a2:	08 f0       	brcs	.+2      	; 0xa6 <DIO_vset_pindir+0x14>
  a4:	4d c0       	rjmp	.+154    	; 0x140 <DIO_vset_pindir+0xae>
  a6:	81 34       	cpi	r24, 0x41	; 65
  a8:	09 f0       	breq	.+2      	; 0xac <DIO_vset_pindir+0x1a>
  aa:	83 c0       	rjmp	.+262    	; 0x1b2 <DIO_vset_pindir+0x120>
  ac:	0f c0       	rjmp	.+30     	; 0xcc <DIO_vset_pindir+0x3a>
  ae:	82 36       	cpi	r24, 0x62	; 98
  b0:	51 f1       	breq	.+84     	; 0x106 <DIO_vset_pindir+0x74>
  b2:	83 36       	cpi	r24, 0x63	; 99
  b4:	20 f4       	brcc	.+8      	; 0xbe <DIO_vset_pindir+0x2c>
  b6:	81 36       	cpi	r24, 0x61	; 97
  b8:	09 f0       	breq	.+2      	; 0xbc <DIO_vset_pindir+0x2a>
  ba:	7b c0       	rjmp	.+246    	; 0x1b2 <DIO_vset_pindir+0x120>
  bc:	07 c0       	rjmp	.+14     	; 0xcc <DIO_vset_pindir+0x3a>
  be:	83 36       	cpi	r24, 0x63	; 99
  c0:	09 f4       	brne	.+2      	; 0xc4 <DIO_vset_pindir+0x32>
  c2:	3e c0       	rjmp	.+124    	; 0x140 <DIO_vset_pindir+0xae>
  c4:	84 36       	cpi	r24, 0x64	; 100
  c6:	09 f0       	breq	.+2      	; 0xca <DIO_vset_pindir+0x38>
  c8:	74 c0       	rjmp	.+232    	; 0x1b2 <DIO_vset_pindir+0x120>
  ca:	57 c0       	rjmp	.+174    	; 0x17a <DIO_vset_pindir+0xe8>
{
	case 'A':
	case 'a':
	if(dir==1)
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	69 f4       	brne	.+26     	; 0xea <DIO_vset_pindir+0x58>
	{
		SET_BIT(DDRA,pin);
  d0:	2a b3       	in	r18, 0x1a	; 26
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	ac 01       	movw	r20, r24
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_vset_pindir+0x4c>
  da:	44 0f       	add	r20, r20
  dc:	55 1f       	adc	r21, r21
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_vset_pindir+0x48>
  e2:	ba 01       	movw	r22, r20
  e4:	62 2b       	or	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
	} 
	else
	{
		CLR_BIT(DDRA,pin);
  ea:	2a b3       	in	r18, 0x1a	; 26
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	ac 01       	movw	r20, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_vset_pindir+0x66>
  f4:	44 0f       	add	r20, r20
  f6:	55 1f       	adc	r21, r21
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_vset_pindir+0x62>
  fc:	ba 01       	movw	r22, r20
  fe:	60 95       	com	r22
 100:	62 23       	and	r22, r18
 102:	6a bb       	out	0x1a, r22	; 26
 104:	08 95       	ret
	}
	break;
	case 'B':
	case 'b':
	if(dir==1)
 106:	41 30       	cpi	r20, 0x01	; 1
 108:	69 f4       	brne	.+26     	; 0x124 <DIO_vset_pindir+0x92>
	{
		SET_BIT(DDRB,pin);
 10a:	27 b3       	in	r18, 0x17	; 23
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	ac 01       	movw	r20, r24
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_vset_pindir+0x86>
 114:	44 0f       	add	r20, r20
 116:	55 1f       	adc	r21, r21
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_vset_pindir+0x82>
 11c:	ba 01       	movw	r22, r20
 11e:	62 2b       	or	r22, r18
 120:	67 bb       	out	0x17, r22	; 23
 122:	08 95       	ret
	}
	else
	{
		CLR_BIT(DDRB,pin);
 124:	27 b3       	in	r18, 0x17	; 23
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_vset_pindir+0xa0>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_vset_pindir+0x9c>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	67 bb       	out	0x17, r22	; 23
 13e:	08 95       	ret
	}
	break;
	case 'C':
	case 'c':
	if(dir==1)
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	69 f4       	brne	.+26     	; 0x15e <DIO_vset_pindir+0xcc>
	{
		SET_BIT(DDRC,pin);
 144:	24 b3       	in	r18, 0x14	; 20
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	ac 01       	movw	r20, r24
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_vset_pindir+0xc0>
 14e:	44 0f       	add	r20, r20
 150:	55 1f       	adc	r21, r21
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_vset_pindir+0xbc>
 156:	ba 01       	movw	r22, r20
 158:	62 2b       	or	r22, r18
 15a:	64 bb       	out	0x14, r22	; 20
 15c:	08 95       	ret
	}
	else
	{
		CLR_BIT(DDRC,pin);
 15e:	24 b3       	in	r18, 0x14	; 20
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	ac 01       	movw	r20, r24
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_vset_pindir+0xda>
 168:	44 0f       	add	r20, r20
 16a:	55 1f       	adc	r21, r21
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_vset_pindir+0xd6>
 170:	ba 01       	movw	r22, r20
 172:	60 95       	com	r22
 174:	62 23       	and	r22, r18
 176:	64 bb       	out	0x14, r22	; 20
 178:	08 95       	ret
	}
	break;
	case 'D':
	case 'd':
	if(dir==1)
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	69 f4       	brne	.+26     	; 0x198 <DIO_vset_pindir+0x106>
	{
		SET_BIT(DDRD,pin);
 17e:	21 b3       	in	r18, 0x11	; 17
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	ac 01       	movw	r20, r24
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_vset_pindir+0xfa>
 188:	44 0f       	add	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_vset_pindir+0xf6>
 190:	ba 01       	movw	r22, r20
 192:	62 2b       	or	r22, r18
 194:	61 bb       	out	0x11, r22	; 17
 196:	08 95       	ret
	}
	else
	{
		CLR_BIT(DDRD,pin);
 198:	21 b3       	in	r18, 0x11	; 17
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	ac 01       	movw	r20, r24
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_vset_pindir+0x114>
 1a2:	44 0f       	add	r20, r20
 1a4:	55 1f       	adc	r21, r21
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_vset_pindir+0x110>
 1aa:	ba 01       	movw	r22, r20
 1ac:	60 95       	com	r22
 1ae:	62 23       	and	r22, r18
 1b0:	61 bb       	out	0x11, r22	; 17
 1b2:	08 95       	ret

000001b4 <DIO_vwrite_pin>:
	}
	break;
}}
void DIO_vwrite_pin(unsigned char port,unsigned char pin,unsigned char val)
{
	switch(port)
 1b4:	84 34       	cpi	r24, 0x44	; 68
 1b6:	09 f4       	brne	.+2      	; 0x1ba <DIO_vwrite_pin+0x6>
 1b8:	71 c0       	rjmp	.+226    	; 0x29c <DIO_vwrite_pin+0xe8>
 1ba:	85 34       	cpi	r24, 0x45	; 69
 1bc:	48 f4       	brcc	.+18     	; 0x1d0 <DIO_vwrite_pin+0x1c>
 1be:	82 34       	cpi	r24, 0x42	; 66
 1c0:	99 f1       	breq	.+102    	; 0x228 <DIO_vwrite_pin+0x74>
 1c2:	83 34       	cpi	r24, 0x43	; 67
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <DIO_vwrite_pin+0x14>
 1c6:	4d c0       	rjmp	.+154    	; 0x262 <DIO_vwrite_pin+0xae>
 1c8:	81 34       	cpi	r24, 0x41	; 65
 1ca:	09 f0       	breq	.+2      	; 0x1ce <DIO_vwrite_pin+0x1a>
 1cc:	83 c0       	rjmp	.+262    	; 0x2d4 <DIO_vwrite_pin+0x120>
 1ce:	0f c0       	rjmp	.+30     	; 0x1ee <DIO_vwrite_pin+0x3a>
 1d0:	82 36       	cpi	r24, 0x62	; 98
 1d2:	51 f1       	breq	.+84     	; 0x228 <DIO_vwrite_pin+0x74>
 1d4:	83 36       	cpi	r24, 0x63	; 99
 1d6:	20 f4       	brcc	.+8      	; 0x1e0 <DIO_vwrite_pin+0x2c>
 1d8:	81 36       	cpi	r24, 0x61	; 97
 1da:	09 f0       	breq	.+2      	; 0x1de <DIO_vwrite_pin+0x2a>
 1dc:	7b c0       	rjmp	.+246    	; 0x2d4 <DIO_vwrite_pin+0x120>
 1de:	07 c0       	rjmp	.+14     	; 0x1ee <DIO_vwrite_pin+0x3a>
 1e0:	83 36       	cpi	r24, 0x63	; 99
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <DIO_vwrite_pin+0x32>
 1e4:	3e c0       	rjmp	.+124    	; 0x262 <DIO_vwrite_pin+0xae>
 1e6:	84 36       	cpi	r24, 0x64	; 100
 1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_vwrite_pin+0x38>
 1ea:	74 c0       	rjmp	.+232    	; 0x2d4 <DIO_vwrite_pin+0x120>
 1ec:	57 c0       	rjmp	.+174    	; 0x29c <DIO_vwrite_pin+0xe8>
	{
		case 'A':
		case 'a':
		if(val==1)
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	69 f4       	brne	.+26     	; 0x20c <DIO_vwrite_pin+0x58>
		{
			SET_BIT(PORTA,pin);
 1f2:	2b b3       	in	r18, 0x1b	; 27
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	ac 01       	movw	r20, r24
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_vwrite_pin+0x4c>
 1fc:	44 0f       	add	r20, r20
 1fe:	55 1f       	adc	r21, r21
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_vwrite_pin+0x48>
 204:	ba 01       	movw	r22, r20
 206:	62 2b       	or	r22, r18
 208:	6b bb       	out	0x1b, r22	; 27
 20a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pin);
 20c:	2b b3       	in	r18, 0x1b	; 27
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	ac 01       	movw	r20, r24
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_vwrite_pin+0x66>
 216:	44 0f       	add	r20, r20
 218:	55 1f       	adc	r21, r21
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_vwrite_pin+0x62>
 21e:	ba 01       	movw	r22, r20
 220:	60 95       	com	r22
 222:	62 23       	and	r22, r18
 224:	6b bb       	out	0x1b, r22	; 27
 226:	08 95       	ret
		}
		break;
		case 'B':
		case 'b':
		if(val==1)
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	69 f4       	brne	.+26     	; 0x246 <DIO_vwrite_pin+0x92>
		{
			SET_BIT(PORTB,pin);
 22c:	28 b3       	in	r18, 0x18	; 24
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	ac 01       	movw	r20, r24
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_vwrite_pin+0x86>
 236:	44 0f       	add	r20, r20
 238:	55 1f       	adc	r21, r21
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_vwrite_pin+0x82>
 23e:	ba 01       	movw	r22, r20
 240:	62 2b       	or	r22, r18
 242:	68 bb       	out	0x18, r22	; 24
 244:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pin);
 246:	28 b3       	in	r18, 0x18	; 24
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	ac 01       	movw	r20, r24
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_vwrite_pin+0xa0>
 250:	44 0f       	add	r20, r20
 252:	55 1f       	adc	r21, r21
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_vwrite_pin+0x9c>
 258:	ba 01       	movw	r22, r20
 25a:	60 95       	com	r22
 25c:	62 23       	and	r22, r18
 25e:	68 bb       	out	0x18, r22	; 24
 260:	08 95       	ret
		}
		break;
		case 'C':
		case 'c':
		if(val==1)
 262:	41 30       	cpi	r20, 0x01	; 1
 264:	69 f4       	brne	.+26     	; 0x280 <DIO_vwrite_pin+0xcc>
		{
			SET_BIT(PORTC,pin);
 266:	25 b3       	in	r18, 0x15	; 21
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	ac 01       	movw	r20, r24
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_vwrite_pin+0xc0>
 270:	44 0f       	add	r20, r20
 272:	55 1f       	adc	r21, r21
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_vwrite_pin+0xbc>
 278:	ba 01       	movw	r22, r20
 27a:	62 2b       	or	r22, r18
 27c:	65 bb       	out	0x15, r22	; 21
 27e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pin);
 280:	25 b3       	in	r18, 0x15	; 21
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	ac 01       	movw	r20, r24
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_vwrite_pin+0xda>
 28a:	44 0f       	add	r20, r20
 28c:	55 1f       	adc	r21, r21
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_vwrite_pin+0xd6>
 292:	ba 01       	movw	r22, r20
 294:	60 95       	com	r22
 296:	62 23       	and	r22, r18
 298:	65 bb       	out	0x15, r22	; 21
 29a:	08 95       	ret
		}
		break;
		case 'D':
		case 'd':
		if(val==1)
 29c:	41 30       	cpi	r20, 0x01	; 1
 29e:	69 f4       	brne	.+26     	; 0x2ba <DIO_vwrite_pin+0x106>
		{
			SET_BIT(PORTD,pin);
 2a0:	22 b3       	in	r18, 0x12	; 18
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	ac 01       	movw	r20, r24
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_vwrite_pin+0xfa>
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_vwrite_pin+0xf6>
 2b2:	ba 01       	movw	r22, r20
 2b4:	62 2b       	or	r22, r18
 2b6:	62 bb       	out	0x12, r22	; 18
 2b8:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pin);
 2ba:	22 b3       	in	r18, 0x12	; 18
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	ac 01       	movw	r20, r24
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_vwrite_pin+0x114>
 2c4:	44 0f       	add	r20, r20
 2c6:	55 1f       	adc	r21, r21
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_vwrite_pin+0x110>
 2cc:	ba 01       	movw	r22, r20
 2ce:	60 95       	com	r22
 2d0:	62 23       	and	r22, r18
 2d2:	62 bb       	out	0x12, r22	; 18
 2d4:	08 95       	ret

000002d6 <DIO_U8read_pin>:
		break;
	}}
unsigned char DIO_U8read_pin(unsigned char port,unsigned char pin)
{
	unsigned char value;
	switch(port)
 2d6:	84 34       	cpi	r24, 0x44	; 68
 2d8:	09 f4       	brne	.+2      	; 0x2dc <DIO_U8read_pin+0x6>
 2da:	51 c0       	rjmp	.+162    	; 0x37e <DIO_U8read_pin+0xa8>
 2dc:	85 34       	cpi	r24, 0x45	; 69
 2de:	40 f4       	brcc	.+16     	; 0x2f0 <DIO_U8read_pin+0x1a>
 2e0:	82 34       	cpi	r24, 0x42	; 66
 2e2:	39 f1       	breq	.+78     	; 0x332 <DIO_U8read_pin+0x5c>
 2e4:	83 34       	cpi	r24, 0x43	; 67
 2e6:	c0 f5       	brcc	.+112    	; 0x358 <DIO_U8read_pin+0x82>
 2e8:	81 34       	cpi	r24, 0x41	; 65
 2ea:	09 f0       	breq	.+2      	; 0x2ee <DIO_U8read_pin+0x18>
 2ec:	5a c0       	rjmp	.+180    	; 0x3a2 <DIO_U8read_pin+0xcc>
 2ee:	0e c0       	rjmp	.+28     	; 0x30c <DIO_U8read_pin+0x36>
 2f0:	82 36       	cpi	r24, 0x62	; 98
 2f2:	f9 f0       	breq	.+62     	; 0x332 <DIO_U8read_pin+0x5c>
 2f4:	83 36       	cpi	r24, 0x63	; 99
 2f6:	20 f4       	brcc	.+8      	; 0x300 <DIO_U8read_pin+0x2a>
 2f8:	81 36       	cpi	r24, 0x61	; 97
 2fa:	09 f0       	breq	.+2      	; 0x2fe <DIO_U8read_pin+0x28>
 2fc:	52 c0       	rjmp	.+164    	; 0x3a2 <DIO_U8read_pin+0xcc>
 2fe:	06 c0       	rjmp	.+12     	; 0x30c <DIO_U8read_pin+0x36>
 300:	83 36       	cpi	r24, 0x63	; 99
 302:	51 f1       	breq	.+84     	; 0x358 <DIO_U8read_pin+0x82>
 304:	84 36       	cpi	r24, 0x64	; 100
 306:	09 f0       	breq	.+2      	; 0x30a <DIO_U8read_pin+0x34>
 308:	4c c0       	rjmp	.+152    	; 0x3a2 <DIO_U8read_pin+0xcc>
 30a:	39 c0       	rjmp	.+114    	; 0x37e <DIO_U8read_pin+0xa8>
	{
		case 'A':
		case 'a':
			value=READ_BIT(PINA,pin);
 30c:	29 b3       	in	r18, 0x19	; 25
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	06 2e       	mov	r0, r22
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_U8read_pin+0x44>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_U8read_pin+0x40>
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	82 23       	and	r24, r18
 322:	93 23       	and	r25, r19
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_U8read_pin+0x54>
 326:	95 95       	asr	r25
 328:	87 95       	ror	r24
 32a:	6a 95       	dec	r22
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_U8read_pin+0x50>
 32e:	98 2f       	mov	r25, r24
			break;
 330:	38 c0       	rjmp	.+112    	; 0x3a2 <DIO_U8read_pin+0xcc>
		case 'B':
		case 'b':
			value=READ_BIT(PINB,pin);
 332:	26 b3       	in	r18, 0x16	; 22
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	06 2e       	mov	r0, r22
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_U8read_pin+0x6a>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	0a 94       	dec	r0
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_U8read_pin+0x66>
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	82 23       	and	r24, r18
 348:	93 23       	and	r25, r19
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_U8read_pin+0x7a>
 34c:	95 95       	asr	r25
 34e:	87 95       	ror	r24
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_U8read_pin+0x76>
 354:	98 2f       	mov	r25, r24
			break;
 356:	25 c0       	rjmp	.+74     	; 0x3a2 <DIO_U8read_pin+0xcc>
		case 'C':
		case 'c':
			value=READ_BIT(PINC,pin);
 358:	23 b3       	in	r18, 0x13	; 19
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	06 2e       	mov	r0, r22
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_U8read_pin+0x90>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	0a 94       	dec	r0
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_U8read_pin+0x8c>
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	82 23       	and	r24, r18
 36e:	93 23       	and	r25, r19
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_U8read_pin+0xa0>
 372:	95 95       	asr	r25
 374:	87 95       	ror	r24
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_U8read_pin+0x9c>
 37a:	98 2f       	mov	r25, r24
			break;
 37c:	12 c0       	rjmp	.+36     	; 0x3a2 <DIO_U8read_pin+0xcc>
		case 'D':
		case 'd':
			value=READ_BIT(PIND,pin);
 37e:	20 b3       	in	r18, 0x10	; 16
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	06 2e       	mov	r0, r22
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_U8read_pin+0xb6>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	0a 94       	dec	r0
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_U8read_pin+0xb2>
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	82 23       	and	r24, r18
 394:	93 23       	and	r25, r19
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_U8read_pin+0xc6>
 398:	95 95       	asr	r25
 39a:	87 95       	ror	r24
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_U8read_pin+0xc2>
 3a0:	98 2f       	mov	r25, r24
			break;
	}
	return value;
} 
 3a2:	89 2f       	mov	r24, r25
 3a4:	08 95       	ret

000003a6 <DIO_vtoggle>:
void DIO_vtoggle(unsigned char port,unsigned char pin)
{
switch(port)
 3a6:	84 34       	cpi	r24, 0x44	; 68
 3a8:	09 f4       	brne	.+2      	; 0x3ac <DIO_vtoggle+0x6>
 3aa:	3d c0       	rjmp	.+122    	; 0x426 <DIO_vtoggle+0x80>
 3ac:	85 34       	cpi	r24, 0x45	; 69
 3ae:	40 f4       	brcc	.+16     	; 0x3c0 <DIO_vtoggle+0x1a>
 3b0:	82 34       	cpi	r24, 0x42	; 66
 3b2:	f9 f0       	breq	.+62     	; 0x3f2 <DIO_vtoggle+0x4c>
 3b4:	83 34       	cpi	r24, 0x43	; 67
 3b6:	50 f5       	brcc	.+84     	; 0x40c <DIO_vtoggle+0x66>
 3b8:	81 34       	cpi	r24, 0x41	; 65
 3ba:	09 f0       	breq	.+2      	; 0x3be <DIO_vtoggle+0x18>
 3bc:	40 c0       	rjmp	.+128    	; 0x43e <DIO_vtoggle+0x98>
 3be:	0c c0       	rjmp	.+24     	; 0x3d8 <DIO_vtoggle+0x32>
 3c0:	82 36       	cpi	r24, 0x62	; 98
 3c2:	b9 f0       	breq	.+46     	; 0x3f2 <DIO_vtoggle+0x4c>
 3c4:	83 36       	cpi	r24, 0x63	; 99
 3c6:	18 f4       	brcc	.+6      	; 0x3ce <DIO_vtoggle+0x28>
 3c8:	81 36       	cpi	r24, 0x61	; 97
 3ca:	c9 f5       	brne	.+114    	; 0x43e <DIO_vtoggle+0x98>
 3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <DIO_vtoggle+0x32>
 3ce:	83 36       	cpi	r24, 0x63	; 99
 3d0:	e9 f0       	breq	.+58     	; 0x40c <DIO_vtoggle+0x66>
 3d2:	84 36       	cpi	r24, 0x64	; 100
 3d4:	a1 f5       	brne	.+104    	; 0x43e <DIO_vtoggle+0x98>
 3d6:	27 c0       	rjmp	.+78     	; 0x426 <DIO_vtoggle+0x80>
{
	case 'A':
	case 'a':
		TOG_BIT(PORTA,pin);
 3d8:	2b b3       	in	r18, 0x1b	; 27
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	ac 01       	movw	r20, r24
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_vtoggle+0x40>
 3e2:	44 0f       	add	r20, r20
 3e4:	55 1f       	adc	r21, r21
 3e6:	6a 95       	dec	r22
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_vtoggle+0x3c>
 3ea:	ba 01       	movw	r22, r20
 3ec:	62 27       	eor	r22, r18
 3ee:	6b bb       	out	0x1b, r22	; 27
		break;
 3f0:	08 95       	ret
	case 'B':
	case 'b':
		TOG_BIT(PORTB,pin);
 3f2:	28 b3       	in	r18, 0x18	; 24
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	ac 01       	movw	r20, r24
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <DIO_vtoggle+0x5a>
 3fc:	44 0f       	add	r20, r20
 3fe:	55 1f       	adc	r21, r21
 400:	6a 95       	dec	r22
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_vtoggle+0x56>
 404:	ba 01       	movw	r22, r20
 406:	62 27       	eor	r22, r18
 408:	68 bb       	out	0x18, r22	; 24
		break;
 40a:	08 95       	ret
	case 'C':
	case 'c':
		TOG_BIT(PORTC,pin);
 40c:	25 b3       	in	r18, 0x15	; 21
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	ac 01       	movw	r20, r24
 414:	02 c0       	rjmp	.+4      	; 0x41a <DIO_vtoggle+0x74>
 416:	44 0f       	add	r20, r20
 418:	55 1f       	adc	r21, r21
 41a:	6a 95       	dec	r22
 41c:	e2 f7       	brpl	.-8      	; 0x416 <DIO_vtoggle+0x70>
 41e:	ba 01       	movw	r22, r20
 420:	62 27       	eor	r22, r18
 422:	65 bb       	out	0x15, r22	; 21
		break;
 424:	08 95       	ret
	case 'D':
	case 'd':
		TOG_BIT(PORTD,pin);
 426:	22 b3       	in	r18, 0x12	; 18
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	ac 01       	movw	r20, r24
 42e:	02 c0       	rjmp	.+4      	; 0x434 <DIO_vtoggle+0x8e>
 430:	44 0f       	add	r20, r20
 432:	55 1f       	adc	r21, r21
 434:	6a 95       	dec	r22
 436:	e2 f7       	brpl	.-8      	; 0x430 <DIO_vtoggle+0x8a>
 438:	ba 01       	movw	r22, r20
 43a:	62 27       	eor	r22, r18
 43c:	62 bb       	out	0x12, r22	; 18
 43e:	08 95       	ret

00000440 <DIO_vset_portdir>:
		break;
	}
}
void DIO_vset_portdir(unsigned char port,unsigned char dir)
{
	switch(port)
 440:	84 34       	cpi	r24, 0x44	; 68
 442:	d9 f0       	breq	.+54     	; 0x47a <DIO_vset_portdir+0x3a>
 444:	85 34       	cpi	r24, 0x45	; 69
 446:	38 f4       	brcc	.+14     	; 0x456 <DIO_vset_portdir+0x16>
 448:	82 34       	cpi	r24, 0x42	; 66
 44a:	99 f0       	breq	.+38     	; 0x472 <DIO_vset_portdir+0x32>
 44c:	83 34       	cpi	r24, 0x43	; 67
 44e:	98 f4       	brcc	.+38     	; 0x476 <DIO_vset_portdir+0x36>
 450:	81 34       	cpi	r24, 0x41	; 65
 452:	a1 f4       	brne	.+40     	; 0x47c <DIO_vset_portdir+0x3c>
 454:	0c c0       	rjmp	.+24     	; 0x46e <DIO_vset_portdir+0x2e>
 456:	82 36       	cpi	r24, 0x62	; 98
 458:	61 f0       	breq	.+24     	; 0x472 <DIO_vset_portdir+0x32>
 45a:	83 36       	cpi	r24, 0x63	; 99
 45c:	18 f4       	brcc	.+6      	; 0x464 <DIO_vset_portdir+0x24>
 45e:	81 36       	cpi	r24, 0x61	; 97
 460:	69 f4       	brne	.+26     	; 0x47c <DIO_vset_portdir+0x3c>
 462:	05 c0       	rjmp	.+10     	; 0x46e <DIO_vset_portdir+0x2e>
 464:	83 36       	cpi	r24, 0x63	; 99
 466:	39 f0       	breq	.+14     	; 0x476 <DIO_vset_portdir+0x36>
 468:	84 36       	cpi	r24, 0x64	; 100
 46a:	41 f4       	brne	.+16     	; 0x47c <DIO_vset_portdir+0x3c>
 46c:	06 c0       	rjmp	.+12     	; 0x47a <DIO_vset_portdir+0x3a>
	{
		case 'A':
		case 'a':
		DDRA=dir;
 46e:	6a bb       	out	0x1a, r22	; 26
		break;
 470:	08 95       	ret
		case 'B':
		case 'b':
		DDRB=dir;
 472:	67 bb       	out	0x17, r22	; 23
		break;
 474:	08 95       	ret
		case 'C':
		case 'c':
		DDRC=dir;
 476:	64 bb       	out	0x14, r22	; 20
		break;
 478:	08 95       	ret
		case 'D':
		case 'd':
		DDRD=dir;
 47a:	61 bb       	out	0x11, r22	; 17
 47c:	08 95       	ret

0000047e <DIO_vwrite_port>:
		break;
	}
}
void DIO_vwrite_port(unsigned char port,unsigned char val)
{
	switch(port)
 47e:	84 34       	cpi	r24, 0x44	; 68
 480:	d9 f0       	breq	.+54     	; 0x4b8 <DIO_vwrite_port+0x3a>
 482:	85 34       	cpi	r24, 0x45	; 69
 484:	38 f4       	brcc	.+14     	; 0x494 <DIO_vwrite_port+0x16>
 486:	82 34       	cpi	r24, 0x42	; 66
 488:	99 f0       	breq	.+38     	; 0x4b0 <DIO_vwrite_port+0x32>
 48a:	83 34       	cpi	r24, 0x43	; 67
 48c:	98 f4       	brcc	.+38     	; 0x4b4 <DIO_vwrite_port+0x36>
 48e:	81 34       	cpi	r24, 0x41	; 65
 490:	a1 f4       	brne	.+40     	; 0x4ba <DIO_vwrite_port+0x3c>
 492:	0c c0       	rjmp	.+24     	; 0x4ac <DIO_vwrite_port+0x2e>
 494:	82 36       	cpi	r24, 0x62	; 98
 496:	61 f0       	breq	.+24     	; 0x4b0 <DIO_vwrite_port+0x32>
 498:	83 36       	cpi	r24, 0x63	; 99
 49a:	18 f4       	brcc	.+6      	; 0x4a2 <DIO_vwrite_port+0x24>
 49c:	81 36       	cpi	r24, 0x61	; 97
 49e:	69 f4       	brne	.+26     	; 0x4ba <DIO_vwrite_port+0x3c>
 4a0:	05 c0       	rjmp	.+10     	; 0x4ac <DIO_vwrite_port+0x2e>
 4a2:	83 36       	cpi	r24, 0x63	; 99
 4a4:	39 f0       	breq	.+14     	; 0x4b4 <DIO_vwrite_port+0x36>
 4a6:	84 36       	cpi	r24, 0x64	; 100
 4a8:	41 f4       	brne	.+16     	; 0x4ba <DIO_vwrite_port+0x3c>
 4aa:	06 c0       	rjmp	.+12     	; 0x4b8 <DIO_vwrite_port+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=val;
 4ac:	6b bb       	out	0x1b, r22	; 27
		break;
 4ae:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=val;
 4b0:	68 bb       	out	0x18, r22	; 24
		break;
 4b2:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=val;
 4b4:	65 bb       	out	0x15, r22	; 21
		break;
 4b6:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=val;
 4b8:	62 bb       	out	0x12, r22	; 18
 4ba:	08 95       	ret

000004bc <DIO_U8read_port>:
	}
}
unsigned char DIO_U8read_port(unsigned char port)
{
	int val;
	switch(port)
 4bc:	84 34       	cpi	r24, 0x44	; 68
 4be:	d9 f0       	breq	.+54     	; 0x4f6 <DIO_U8read_port+0x3a>
 4c0:	85 34       	cpi	r24, 0x45	; 69
 4c2:	38 f4       	brcc	.+14     	; 0x4d2 <DIO_U8read_port+0x16>
 4c4:	82 34       	cpi	r24, 0x42	; 66
 4c6:	99 f0       	breq	.+38     	; 0x4ee <DIO_U8read_port+0x32>
 4c8:	83 34       	cpi	r24, 0x43	; 67
 4ca:	98 f4       	brcc	.+38     	; 0x4f2 <DIO_U8read_port+0x36>
 4cc:	81 34       	cpi	r24, 0x41	; 65
 4ce:	a1 f4       	brne	.+40     	; 0x4f8 <DIO_U8read_port+0x3c>
 4d0:	0c c0       	rjmp	.+24     	; 0x4ea <DIO_U8read_port+0x2e>
 4d2:	82 36       	cpi	r24, 0x62	; 98
 4d4:	61 f0       	breq	.+24     	; 0x4ee <DIO_U8read_port+0x32>
 4d6:	83 36       	cpi	r24, 0x63	; 99
 4d8:	18 f4       	brcc	.+6      	; 0x4e0 <DIO_U8read_port+0x24>
 4da:	81 36       	cpi	r24, 0x61	; 97
 4dc:	69 f4       	brne	.+26     	; 0x4f8 <DIO_U8read_port+0x3c>
 4de:	05 c0       	rjmp	.+10     	; 0x4ea <DIO_U8read_port+0x2e>
 4e0:	83 36       	cpi	r24, 0x63	; 99
 4e2:	39 f0       	breq	.+14     	; 0x4f2 <DIO_U8read_port+0x36>
 4e4:	84 36       	cpi	r24, 0x64	; 100
 4e6:	41 f4       	brne	.+16     	; 0x4f8 <DIO_U8read_port+0x3c>
 4e8:	06 c0       	rjmp	.+12     	; 0x4f6 <DIO_U8read_port+0x3a>
	{
		case 'A':
		case 'a':
		val=PINA;
 4ea:	99 b3       	in	r25, 0x19	; 25
		break;
 4ec:	05 c0       	rjmp	.+10     	; 0x4f8 <DIO_U8read_port+0x3c>
		case 'B':
		case 'b':
		val=PINB;
 4ee:	96 b3       	in	r25, 0x16	; 22
		break;
 4f0:	03 c0       	rjmp	.+6      	; 0x4f8 <DIO_U8read_port+0x3c>
		case 'C':
		case 'c':
		val=PINC;
 4f2:	93 b3       	in	r25, 0x13	; 19
		break;
 4f4:	01 c0       	rjmp	.+2      	; 0x4f8 <DIO_U8read_port+0x3c>
		case 'D':
		case 'd':
		val=PIND;
 4f6:	90 b3       	in	r25, 0x10	; 16
		break;
	}
	return val;
}
 4f8:	89 2f       	mov	r24, r25
 4fa:	08 95       	ret

000004fc <DIO_vtog_port>:
void DIO_vtog_port(unsigned char port)
{
	switch(port)
 4fc:	84 34       	cpi	r24, 0x44	; 68
 4fe:	09 f1       	breq	.+66     	; 0x542 <DIO_vtog_port+0x46>
 500:	85 34       	cpi	r24, 0x45	; 69
 502:	38 f4       	brcc	.+14     	; 0x512 <DIO_vtog_port+0x16>
 504:	82 34       	cpi	r24, 0x42	; 66
 506:	a9 f0       	breq	.+42     	; 0x532 <DIO_vtog_port+0x36>
 508:	83 34       	cpi	r24, 0x43	; 67
 50a:	b8 f4       	brcc	.+46     	; 0x53a <DIO_vtog_port+0x3e>
 50c:	81 34       	cpi	r24, 0x41	; 65
 50e:	e1 f4       	brne	.+56     	; 0x548 <DIO_vtog_port+0x4c>
 510:	0c c0       	rjmp	.+24     	; 0x52a <DIO_vtog_port+0x2e>
 512:	82 36       	cpi	r24, 0x62	; 98
 514:	71 f0       	breq	.+28     	; 0x532 <DIO_vtog_port+0x36>
 516:	83 36       	cpi	r24, 0x63	; 99
 518:	18 f4       	brcc	.+6      	; 0x520 <DIO_vtog_port+0x24>
 51a:	81 36       	cpi	r24, 0x61	; 97
 51c:	a9 f4       	brne	.+42     	; 0x548 <DIO_vtog_port+0x4c>
 51e:	05 c0       	rjmp	.+10     	; 0x52a <DIO_vtog_port+0x2e>
 520:	83 36       	cpi	r24, 0x63	; 99
 522:	59 f0       	breq	.+22     	; 0x53a <DIO_vtog_port+0x3e>
 524:	84 36       	cpi	r24, 0x64	; 100
 526:	81 f4       	brne	.+32     	; 0x548 <DIO_vtog_port+0x4c>
 528:	0c c0       	rjmp	.+24     	; 0x542 <DIO_vtog_port+0x46>
	{
		case 'A':
		case 'a':
		PORTA=~PORTA;
 52a:	8b b3       	in	r24, 0x1b	; 27
 52c:	80 95       	com	r24
 52e:	8b bb       	out	0x1b, r24	; 27
		break;
 530:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=~PORTB;
 532:	88 b3       	in	r24, 0x18	; 24
 534:	80 95       	com	r24
 536:	88 bb       	out	0x18, r24	; 24
		break;
 538:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=~PORTC;
 53a:	85 b3       	in	r24, 0x15	; 21
 53c:	80 95       	com	r24
 53e:	85 bb       	out	0x15, r24	; 21
		break;
 540:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=~PORTD;
 542:	82 b3       	in	r24, 0x12	; 18
 544:	80 95       	com	r24
 546:	82 bb       	out	0x12, r24	; 18
 548:	08 95       	ret

0000054a <DIO_vcontrolpullup>:
		break;
	}
}
void DIO_vcontrolpullup(unsigned char port,unsigned char pin,unsigned char enable)
{
	switch(port)
 54a:	84 34       	cpi	r24, 0x44	; 68
 54c:	09 f4       	brne	.+2      	; 0x550 <DIO_vcontrolpullup+0x6>
 54e:	71 c0       	rjmp	.+226    	; 0x632 <DIO_vcontrolpullup+0xe8>
 550:	85 34       	cpi	r24, 0x45	; 69
 552:	48 f4       	brcc	.+18     	; 0x566 <DIO_vcontrolpullup+0x1c>
 554:	82 34       	cpi	r24, 0x42	; 66
 556:	99 f1       	breq	.+102    	; 0x5be <DIO_vcontrolpullup+0x74>
 558:	83 34       	cpi	r24, 0x43	; 67
 55a:	08 f0       	brcs	.+2      	; 0x55e <DIO_vcontrolpullup+0x14>
 55c:	4d c0       	rjmp	.+154    	; 0x5f8 <DIO_vcontrolpullup+0xae>
 55e:	81 34       	cpi	r24, 0x41	; 65
 560:	09 f0       	breq	.+2      	; 0x564 <DIO_vcontrolpullup+0x1a>
 562:	83 c0       	rjmp	.+262    	; 0x66a <DIO_vcontrolpullup+0x120>
 564:	0f c0       	rjmp	.+30     	; 0x584 <DIO_vcontrolpullup+0x3a>
 566:	82 36       	cpi	r24, 0x62	; 98
 568:	51 f1       	breq	.+84     	; 0x5be <DIO_vcontrolpullup+0x74>
 56a:	83 36       	cpi	r24, 0x63	; 99
 56c:	20 f4       	brcc	.+8      	; 0x576 <DIO_vcontrolpullup+0x2c>
 56e:	81 36       	cpi	r24, 0x61	; 97
 570:	09 f0       	breq	.+2      	; 0x574 <DIO_vcontrolpullup+0x2a>
 572:	7b c0       	rjmp	.+246    	; 0x66a <DIO_vcontrolpullup+0x120>
 574:	07 c0       	rjmp	.+14     	; 0x584 <DIO_vcontrolpullup+0x3a>
 576:	83 36       	cpi	r24, 0x63	; 99
 578:	09 f4       	brne	.+2      	; 0x57c <DIO_vcontrolpullup+0x32>
 57a:	3e c0       	rjmp	.+124    	; 0x5f8 <DIO_vcontrolpullup+0xae>
 57c:	84 36       	cpi	r24, 0x64	; 100
 57e:	09 f0       	breq	.+2      	; 0x582 <DIO_vcontrolpullup+0x38>
 580:	74 c0       	rjmp	.+232    	; 0x66a <DIO_vcontrolpullup+0x120>
 582:	57 c0       	rjmp	.+174    	; 0x632 <DIO_vcontrolpullup+0xe8>
	{
		case 'a':
		case 'A':
		if(enable==1)
 584:	41 30       	cpi	r20, 0x01	; 1
 586:	69 f4       	brne	.+26     	; 0x5a2 <DIO_vcontrolpullup+0x58>
		{
			SET_BIT(PORTA,pin);
 588:	2b b3       	in	r18, 0x1b	; 27
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	ac 01       	movw	r20, r24
 590:	02 c0       	rjmp	.+4      	; 0x596 <DIO_vcontrolpullup+0x4c>
 592:	44 0f       	add	r20, r20
 594:	55 1f       	adc	r21, r21
 596:	6a 95       	dec	r22
 598:	e2 f7       	brpl	.-8      	; 0x592 <DIO_vcontrolpullup+0x48>
 59a:	ba 01       	movw	r22, r20
 59c:	62 2b       	or	r22, r18
 59e:	6b bb       	out	0x1b, r22	; 27
 5a0:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pin);
 5a2:	2b b3       	in	r18, 0x1b	; 27
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	ac 01       	movw	r20, r24
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <DIO_vcontrolpullup+0x66>
 5ac:	44 0f       	add	r20, r20
 5ae:	55 1f       	adc	r21, r21
 5b0:	6a 95       	dec	r22
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <DIO_vcontrolpullup+0x62>
 5b4:	ba 01       	movw	r22, r20
 5b6:	60 95       	com	r22
 5b8:	62 23       	and	r22, r18
 5ba:	6b bb       	out	0x1b, r22	; 27
 5bc:	08 95       	ret
		}
		break;
		case 'b':
		case 'B':
		if(enable==1)
 5be:	41 30       	cpi	r20, 0x01	; 1
 5c0:	69 f4       	brne	.+26     	; 0x5dc <DIO_vcontrolpullup+0x92>
		{
			SET_BIT(PORTB,pin);
 5c2:	28 b3       	in	r18, 0x18	; 24
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	ac 01       	movw	r20, r24
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <DIO_vcontrolpullup+0x86>
 5cc:	44 0f       	add	r20, r20
 5ce:	55 1f       	adc	r21, r21
 5d0:	6a 95       	dec	r22
 5d2:	e2 f7       	brpl	.-8      	; 0x5cc <DIO_vcontrolpullup+0x82>
 5d4:	ba 01       	movw	r22, r20
 5d6:	62 2b       	or	r22, r18
 5d8:	68 bb       	out	0x18, r22	; 24
 5da:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pin);
 5dc:	28 b3       	in	r18, 0x18	; 24
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	ac 01       	movw	r20, r24
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <DIO_vcontrolpullup+0xa0>
 5e6:	44 0f       	add	r20, r20
 5e8:	55 1f       	adc	r21, r21
 5ea:	6a 95       	dec	r22
 5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <DIO_vcontrolpullup+0x9c>
 5ee:	ba 01       	movw	r22, r20
 5f0:	60 95       	com	r22
 5f2:	62 23       	and	r22, r18
 5f4:	68 bb       	out	0x18, r22	; 24
 5f6:	08 95       	ret
		}
		break;
		case 'c':
		case 'C':
		if(enable==1)
 5f8:	41 30       	cpi	r20, 0x01	; 1
 5fa:	69 f4       	brne	.+26     	; 0x616 <DIO_vcontrolpullup+0xcc>
		{
			SET_BIT(PORTC,pin);
 5fc:	25 b3       	in	r18, 0x15	; 21
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	ac 01       	movw	r20, r24
 604:	02 c0       	rjmp	.+4      	; 0x60a <DIO_vcontrolpullup+0xc0>
 606:	44 0f       	add	r20, r20
 608:	55 1f       	adc	r21, r21
 60a:	6a 95       	dec	r22
 60c:	e2 f7       	brpl	.-8      	; 0x606 <DIO_vcontrolpullup+0xbc>
 60e:	ba 01       	movw	r22, r20
 610:	62 2b       	or	r22, r18
 612:	65 bb       	out	0x15, r22	; 21
 614:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pin);
 616:	25 b3       	in	r18, 0x15	; 21
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	ac 01       	movw	r20, r24
 61e:	02 c0       	rjmp	.+4      	; 0x624 <DIO_vcontrolpullup+0xda>
 620:	44 0f       	add	r20, r20
 622:	55 1f       	adc	r21, r21
 624:	6a 95       	dec	r22
 626:	e2 f7       	brpl	.-8      	; 0x620 <DIO_vcontrolpullup+0xd6>
 628:	ba 01       	movw	r22, r20
 62a:	60 95       	com	r22
 62c:	62 23       	and	r22, r18
 62e:	65 bb       	out	0x15, r22	; 21
 630:	08 95       	ret
		}
		break;
		case 'd':
		case 'D':
		if(enable==1)
 632:	41 30       	cpi	r20, 0x01	; 1
 634:	69 f4       	brne	.+26     	; 0x650 <DIO_vcontrolpullup+0x106>
		{
			SET_BIT(PORTD,pin);
 636:	22 b3       	in	r18, 0x12	; 18
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	ac 01       	movw	r20, r24
 63e:	02 c0       	rjmp	.+4      	; 0x644 <DIO_vcontrolpullup+0xfa>
 640:	44 0f       	add	r20, r20
 642:	55 1f       	adc	r21, r21
 644:	6a 95       	dec	r22
 646:	e2 f7       	brpl	.-8      	; 0x640 <DIO_vcontrolpullup+0xf6>
 648:	ba 01       	movw	r22, r20
 64a:	62 2b       	or	r22, r18
 64c:	62 bb       	out	0x12, r22	; 18
 64e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pin);
 650:	22 b3       	in	r18, 0x12	; 18
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	ac 01       	movw	r20, r24
 658:	02 c0       	rjmp	.+4      	; 0x65e <DIO_vcontrolpullup+0x114>
 65a:	44 0f       	add	r20, r20
 65c:	55 1f       	adc	r21, r21
 65e:	6a 95       	dec	r22
 660:	e2 f7       	brpl	.-8      	; 0x65a <DIO_vcontrolpullup+0x110>
 662:	ba 01       	movw	r22, r20
 664:	60 95       	com	r22
 666:	62 23       	and	r22, r18
 668:	62 bb       	out	0x12, r22	; 18
 66a:	08 95       	ret

0000066c <main>:
#include "lcd_driver.h"
#include "keypad_driver.h"
#include <util/delay.h>
int main(void)
{
	LCD_vinit();
 66c:	0e 94 13 04 	call	0x826	; 0x826 <LCD_vinit>
	keypad_vinit();
 670:	0e 94 50 03 	call	0x6a0	; 0x6a0 <keypad_vinit>
	char x;
    while(1)
    {
        x=keypad_u8read();
 674:	0e 94 8d 03 	call	0x71a	; 0x71a <keypad_u8read>
		if(x!=0xff)
 678:	8f 3f       	cpi	r24, 0xFF	; 255
 67a:	41 f0       	breq	.+16     	; 0x68c <main+0x20>
		{
			if(x=='.')
 67c:	8e 32       	cpi	r24, 0x2E	; 46
 67e:	21 f4       	brne	.+8      	; 0x688 <main+0x1c>
			{
				LCD_vsend_cmd(CLR_SCREEN);
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	0e 94 07 04 	call	0x80e	; 0x80e <LCD_vsend_cmd>
 686:	02 c0       	rjmp	.+4      	; 0x68c <main+0x20>
			}
			else
			{
				LCD_vsend_char(x);
 688:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <LCD_vsend_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 68c:	8f e7       	ldi	r24, 0x7F	; 127
 68e:	9a e1       	ldi	r25, 0x1A	; 26
 690:	a6 e0       	ldi	r26, 0x06	; 6
 692:	81 50       	subi	r24, 0x01	; 1
 694:	90 40       	sbci	r25, 0x00	; 0
 696:	a0 40       	sbci	r26, 0x00	; 0
 698:	e1 f7       	brne	.-8      	; 0x692 <main+0x26>
 69a:	00 c0       	rjmp	.+0      	; 0x69c <main+0x30>
 69c:	00 00       	nop
 69e:	ea cf       	rjmp	.-44     	; 0x674 <main+0x8>

000006a0 <keypad_vinit>:
 */ 
#include "lcd_driver.h"
#include "keypad_driver.h"
void keypad_vinit()
{
	DIO_vset_pindir('c',0,1);
 6a0:	83 e6       	ldi	r24, 0x63	; 99
 6a2:	60 e0       	ldi	r22, 0x00	; 0
 6a4:	41 e0       	ldi	r20, 0x01	; 1
 6a6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('c',1,1);
 6aa:	83 e6       	ldi	r24, 0x63	; 99
 6ac:	61 e0       	ldi	r22, 0x01	; 1
 6ae:	41 e0       	ldi	r20, 0x01	; 1
 6b0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('c',2,1);
 6b4:	83 e6       	ldi	r24, 0x63	; 99
 6b6:	62 e0       	ldi	r22, 0x02	; 2
 6b8:	41 e0       	ldi	r20, 0x01	; 1
 6ba:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('c',3,1);
 6be:	83 e6       	ldi	r24, 0x63	; 99
 6c0:	63 e0       	ldi	r22, 0x03	; 3
 6c2:	41 e0       	ldi	r20, 0x01	; 1
 6c4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('c',4,0);
 6c8:	83 e6       	ldi	r24, 0x63	; 99
 6ca:	64 e0       	ldi	r22, 0x04	; 4
 6cc:	40 e0       	ldi	r20, 0x00	; 0
 6ce:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('c',5,0);
 6d2:	83 e6       	ldi	r24, 0x63	; 99
 6d4:	65 e0       	ldi	r22, 0x05	; 5
 6d6:	40 e0       	ldi	r20, 0x00	; 0
 6d8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('c',6,0);
 6dc:	83 e6       	ldi	r24, 0x63	; 99
 6de:	66 e0       	ldi	r22, 0x06	; 6
 6e0:	40 e0       	ldi	r20, 0x00	; 0
 6e2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('c',7,0);
 6e6:	83 e6       	ldi	r24, 0x63	; 99
 6e8:	67 e0       	ldi	r22, 0x07	; 7
 6ea:	40 e0       	ldi	r20, 0x00	; 0
 6ec:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vcontrolpullup('c',4,1);
 6f0:	83 e6       	ldi	r24, 0x63	; 99
 6f2:	64 e0       	ldi	r22, 0x04	; 4
 6f4:	41 e0       	ldi	r20, 0x01	; 1
 6f6:	0e 94 a5 02 	call	0x54a	; 0x54a <DIO_vcontrolpullup>
	DIO_vcontrolpullup('c',5,1);
 6fa:	83 e6       	ldi	r24, 0x63	; 99
 6fc:	65 e0       	ldi	r22, 0x05	; 5
 6fe:	41 e0       	ldi	r20, 0x01	; 1
 700:	0e 94 a5 02 	call	0x54a	; 0x54a <DIO_vcontrolpullup>
	DIO_vcontrolpullup('c',6,1);
 704:	83 e6       	ldi	r24, 0x63	; 99
 706:	66 e0       	ldi	r22, 0x06	; 6
 708:	41 e0       	ldi	r20, 0x01	; 1
 70a:	0e 94 a5 02 	call	0x54a	; 0x54a <DIO_vcontrolpullup>
	DIO_vcontrolpullup('c',7,1);
 70e:	83 e6       	ldi	r24, 0x63	; 99
 710:	67 e0       	ldi	r22, 0x07	; 7
 712:	41 e0       	ldi	r20, 0x01	; 1
 714:	0e 94 a5 02 	call	0x54a	; 0x54a <DIO_vcontrolpullup>
}
 718:	08 95       	ret

0000071a <keypad_u8read>:
unsigned char keypad_u8read()
{
 71a:	0f 93       	push	r16
 71c:	1f 93       	push	r17
 71e:	cf 93       	push	r28
 720:	df 93       	push	r29
 722:	cd b7       	in	r28, 0x3d	; 61
 724:	de b7       	in	r29, 0x3e	; 62
 726:	60 97       	sbiw	r28, 0x10	; 16
 728:	0f b6       	in	r0, 0x3f	; 63
 72a:	f8 94       	cli
 72c:	de bf       	out	0x3e, r29	; 62
 72e:	0f be       	out	0x3f, r0	; 63
 730:	cd bf       	out	0x3d, r28	; 61
	unsigned char arr[4][4]={{'1','2','3','+'},{'4','5','6','-'},{'7','8','9','*'},{'.','0','=','/'}};
 732:	de 01       	movw	r26, r28
 734:	11 96       	adiw	r26, 0x01	; 1
 736:	e0 e6       	ldi	r30, 0x60	; 96
 738:	f0 e0       	ldi	r31, 0x00	; 0
 73a:	80 e1       	ldi	r24, 0x10	; 16
 73c:	01 90       	ld	r0, Z+
 73e:	0d 92       	st	X+, r0
 740:	81 50       	subi	r24, 0x01	; 1
 742:	e1 f7       	brne	.-8      	; 0x73c <keypad_u8read+0x22>
		char row,col,x;
		char returnval=0xff;
		for(row=0;row<4;row++)
 744:	00 e0       	ldi	r16, 0x00	; 0
		{
			DIO_vwrite_pin('c',0,1);
 746:	83 e6       	ldi	r24, 0x63	; 99
 748:	60 e0       	ldi	r22, 0x00	; 0
 74a:	41 e0       	ldi	r20, 0x01	; 1
 74c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
			DIO_vwrite_pin('c',1,1);
 750:	83 e6       	ldi	r24, 0x63	; 99
 752:	61 e0       	ldi	r22, 0x01	; 1
 754:	41 e0       	ldi	r20, 0x01	; 1
 756:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
			DIO_vwrite_pin('c',2,1);
 75a:	83 e6       	ldi	r24, 0x63	; 99
 75c:	62 e0       	ldi	r22, 0x02	; 2
 75e:	41 e0       	ldi	r20, 0x01	; 1
 760:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
			DIO_vwrite_pin('c',3,1);
 764:	83 e6       	ldi	r24, 0x63	; 99
 766:	63 e0       	ldi	r22, 0x03	; 3
 768:	41 e0       	ldi	r20, 0x01	; 1
 76a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
			DIO_vwrite_pin('c',row,0);
 76e:	83 e6       	ldi	r24, 0x63	; 99
 770:	60 2f       	mov	r22, r16
 772:	40 e0       	ldi	r20, 0x00	; 0
 774:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
			
			for(col=0;col<4;col++)
 778:	10 e0       	ldi	r17, 0x00	; 0
	DIO_vcontrolpullup('c',4,1);
	DIO_vcontrolpullup('c',5,1);
	DIO_vcontrolpullup('c',6,1);
	DIO_vcontrolpullup('c',7,1);
}
unsigned char keypad_u8read()
 77a:	61 2f       	mov	r22, r17
 77c:	6c 5f       	subi	r22, 0xFC	; 252
			DIO_vwrite_pin('c',3,1);
			DIO_vwrite_pin('c',row,0);
			
			for(col=0;col<4;col++)
			{
				x=DIO_U8read_pin('c',(col+4));
 77e:	83 e6       	ldi	r24, 0x63	; 99
 780:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <DIO_U8read_pin>
				if(x==0)
 784:	88 23       	and	r24, r24
 786:	61 f4       	brne	.+24     	; 0x7a0 <keypad_u8read+0x86>
				{
					returnval=arr[row][col];
 788:	e0 2f       	mov	r30, r16
 78a:	f0 e0       	ldi	r31, 0x00	; 0
 78c:	ee 0f       	add	r30, r30
 78e:	ff 1f       	adc	r31, r31
 790:	ee 0f       	add	r30, r30
 792:	ff 1f       	adc	r31, r31
 794:	e1 0f       	add	r30, r17
 796:	f1 1d       	adc	r31, r1
 798:	ec 0f       	add	r30, r28
 79a:	fd 1f       	adc	r31, r29
 79c:	81 81       	ldd	r24, Z+1	; 0x01
 79e:	04 c0       	rjmp	.+8      	; 0x7a8 <keypad_u8read+0x8e>
			DIO_vwrite_pin('c',1,1);
			DIO_vwrite_pin('c',2,1);
			DIO_vwrite_pin('c',3,1);
			DIO_vwrite_pin('c',row,0);
			
			for(col=0;col<4;col++)
 7a0:	1f 5f       	subi	r17, 0xFF	; 255
 7a2:	14 30       	cpi	r17, 0x04	; 4
 7a4:	51 f7       	brne	.-44     	; 0x77a <keypad_u8read+0x60>
 7a6:	0b c0       	rjmp	.+22     	; 0x7be <keypad_u8read+0xa4>
				break;
			}
			
		}
		return returnval;
 7a8:	60 96       	adiw	r28, 0x10	; 16
 7aa:	0f b6       	in	r0, 0x3f	; 63
 7ac:	f8 94       	cli
 7ae:	de bf       	out	0x3e, r29	; 62
 7b0:	0f be       	out	0x3f, r0	; 63
 7b2:	cd bf       	out	0x3d, r28	; 61
 7b4:	df 91       	pop	r29
 7b6:	cf 91       	pop	r28
 7b8:	1f 91       	pop	r17
 7ba:	0f 91       	pop	r16
 7bc:	08 95       	ret
unsigned char keypad_u8read()
{
	unsigned char arr[4][4]={{'1','2','3','+'},{'4','5','6','-'},{'7','8','9','*'},{'.','0','=','/'}};
		char row,col,x;
		char returnval=0xff;
		for(row=0;row<4;row++)
 7be:	0f 5f       	subi	r16, 0xFF	; 255
 7c0:	04 30       	cpi	r16, 0x04	; 4
 7c2:	09 f6       	brne	.-126    	; 0x746 <keypad_u8read+0x2c>
 7c4:	8f ef       	ldi	r24, 0xFF	; 255
 7c6:	f0 cf       	rjmp	.-32     	; 0x7a8 <keypad_u8read+0x8e>

000007c8 <send_falling_edge>:
	_delay_ms(1);
	#endif
}
static void send_falling_edge(void)
{
	DIO_vwrite_pin('B',EN,1);
 7c8:	82 e4       	ldi	r24, 0x42	; 66
 7ca:	60 e0       	ldi	r22, 0x00	; 0
 7cc:	41 e0       	ldi	r20, 0x01	; 1
 7ce:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
 7d2:	8f e9       	ldi	r24, 0x9F	; 159
 7d4:	9f e0       	ldi	r25, 0x0F	; 15
 7d6:	01 97       	sbiw	r24, 0x01	; 1
 7d8:	f1 f7       	brne	.-4      	; 0x7d6 <send_falling_edge+0xe>
 7da:	00 c0       	rjmp	.+0      	; 0x7dc <send_falling_edge+0x14>
 7dc:	00 00       	nop
	_delay_ms(2);
	DIO_vwrite_pin('B',EN,0);
 7de:	82 e4       	ldi	r24, 0x42	; 66
 7e0:	60 e0       	ldi	r22, 0x00	; 0
 7e2:	40 e0       	ldi	r20, 0x00	; 0
 7e4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
 7e8:	8f e9       	ldi	r24, 0x9F	; 159
 7ea:	9f e0       	ldi	r25, 0x0F	; 15
 7ec:	01 97       	sbiw	r24, 0x01	; 1
 7ee:	f1 f7       	brne	.-4      	; 0x7ec <send_falling_edge+0x24>
 7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <send_falling_edge+0x2a>
 7f2:	00 00       	nop
	_delay_ms(2);
}
 7f4:	08 95       	ret

000007f6 <LCD_vsend_char>:
void LCD_vsend_char(char data)
{
 7f6:	68 2f       	mov	r22, r24
	#if defined eight_bits_mode
	DIO_vwrite_port('A',data);
 7f8:	81 e4       	ldi	r24, 0x41	; 65
 7fa:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_vwrite_port>
	DIO_vwrite_pin('B',RS,1);
 7fe:	82 e4       	ldi	r24, 0x42	; 66
 800:	61 e0       	ldi	r22, 0x01	; 1
 802:	41 e0       	ldi	r20, 0x01	; 1
 804:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	send_falling_edge();
 808:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <send_falling_edge>
	vwrite_highnibble('A',data);
	DIO_vwrite_pin('B',RS,1);
	send_falling_edge();
	_delay_ms(1);
	#endif
}
 80c:	08 95       	ret

0000080e <LCD_vsend_cmd>:
void LCD_vsend_cmd(char cmd)
{
 80e:	68 2f       	mov	r22, r24
	#if defined eight_bits_mode
	DIO_vwrite_port('A',cmd);
 810:	81 e4       	ldi	r24, 0x41	; 65
 812:	0e 94 3f 02 	call	0x47e	; 0x47e <DIO_vwrite_port>
	DIO_vwrite_pin('B',RS,0);
 816:	82 e4       	ldi	r24, 0x42	; 66
 818:	61 e0       	ldi	r22, 0x01	; 1
 81a:	40 e0       	ldi	r20, 0x00	; 0
 81c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	send_falling_edge();
 820:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <send_falling_edge>
	vwrite_highnibble('A',cmd);
	DIO_vwrite_pin('B',RS,0);
	send_falling_edge();
	_delay_ms(1);
	#endif
}
 824:	08 95       	ret

00000826 <LCD_vinit>:
 826:	8f ef       	ldi	r24, 0xFF	; 255
 828:	91 ee       	ldi	r25, 0xE1	; 225
 82a:	a4 e0       	ldi	r26, 0x04	; 4
 82c:	81 50       	subi	r24, 0x01	; 1
 82e:	90 40       	sbci	r25, 0x00	; 0
 830:	a0 40       	sbci	r26, 0x00	; 0
 832:	e1 f7       	brne	.-8      	; 0x82c <LCD_vinit+0x6>
 834:	00 c0       	rjmp	.+0      	; 0x836 <LCD_vinit+0x10>
 836:	00 00       	nop
#include "std_macros.h"
void LCD_vinit()
{
	#if defined eight_bits_mode
	_delay_ms(200);
	DIO_vset_pindir('A',0,1);
 838:	81 e4       	ldi	r24, 0x41	; 65
 83a:	60 e0       	ldi	r22, 0x00	; 0
 83c:	41 e0       	ldi	r20, 0x01	; 1
 83e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('A',1,1);
 842:	81 e4       	ldi	r24, 0x41	; 65
 844:	61 e0       	ldi	r22, 0x01	; 1
 846:	41 e0       	ldi	r20, 0x01	; 1
 848:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('A',2,1);
 84c:	81 e4       	ldi	r24, 0x41	; 65
 84e:	62 e0       	ldi	r22, 0x02	; 2
 850:	41 e0       	ldi	r20, 0x01	; 1
 852:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('A',3,1);
 856:	81 e4       	ldi	r24, 0x41	; 65
 858:	63 e0       	ldi	r22, 0x03	; 3
 85a:	41 e0       	ldi	r20, 0x01	; 1
 85c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('A',4,1);
 860:	81 e4       	ldi	r24, 0x41	; 65
 862:	64 e0       	ldi	r22, 0x04	; 4
 864:	41 e0       	ldi	r20, 0x01	; 1
 866:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('A',5,1);
 86a:	81 e4       	ldi	r24, 0x41	; 65
 86c:	65 e0       	ldi	r22, 0x05	; 5
 86e:	41 e0       	ldi	r20, 0x01	; 1
 870:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('A',6,1);
 874:	81 e4       	ldi	r24, 0x41	; 65
 876:	66 e0       	ldi	r22, 0x06	; 6
 878:	41 e0       	ldi	r20, 0x01	; 1
 87a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('A',7,1);
 87e:	81 e4       	ldi	r24, 0x41	; 65
 880:	67 e0       	ldi	r22, 0x07	; 7
 882:	41 e0       	ldi	r20, 0x01	; 1
 884:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('B',EN,1);
 888:	82 e4       	ldi	r24, 0x42	; 66
 88a:	60 e0       	ldi	r22, 0x00	; 0
 88c:	41 e0       	ldi	r20, 0x01	; 1
 88e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('B',RW,1);
 892:	82 e4       	ldi	r24, 0x42	; 66
 894:	62 e0       	ldi	r22, 0x02	; 2
 896:	41 e0       	ldi	r20, 0x01	; 1
 898:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vset_pindir('B',RS,1);
 89c:	82 e4       	ldi	r24, 0x42	; 66
 89e:	61 e0       	ldi	r22, 0x01	; 1
 8a0:	41 e0       	ldi	r20, 0x01	; 1
 8a2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
	DIO_vwrite_pin('B',RW,0);
 8a6:	82 e4       	ldi	r24, 0x42	; 66
 8a8:	62 e0       	ldi	r22, 0x02	; 2
 8aa:	40 e0       	ldi	r20, 0x00	; 0
 8ac:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	LCD_vsend_cmd(EIGHT_BITS); //8 bit mode
 8b0:	88 e3       	ldi	r24, 0x38	; 56
 8b2:	0e 94 07 04 	call	0x80e	; 0x80e <LCD_vsend_cmd>
 8b6:	af ec       	ldi	r26, 0xCF	; 207
 8b8:	b7 e0       	ldi	r27, 0x07	; 7
 8ba:	11 97       	sbiw	r26, 0x01	; 1
 8bc:	f1 f7       	brne	.-4      	; 0x8ba <__stack+0x5b>
 8be:	00 c0       	rjmp	.+0      	; 0x8c0 <__stack+0x61>
 8c0:	00 00       	nop
	_delay_ms(1);
	LCD_vsend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
 8c2:	8e e0       	ldi	r24, 0x0E	; 14
 8c4:	0e 94 07 04 	call	0x80e	; 0x80e <LCD_vsend_cmd>
 8c8:	8f ec       	ldi	r24, 0xCF	; 207
 8ca:	97 e0       	ldi	r25, 0x07	; 7
 8cc:	01 97       	sbiw	r24, 0x01	; 1
 8ce:	f1 f7       	brne	.-4      	; 0x8cc <__stack+0x6d>
 8d0:	00 c0       	rjmp	.+0      	; 0x8d2 <__stack+0x73>
 8d2:	00 00       	nop
	_delay_ms(1);
	LCD_vsend_cmd(CLR_SCREEN);//clear the screen
 8d4:	81 e0       	ldi	r24, 0x01	; 1
 8d6:	0e 94 07 04 	call	0x80e	; 0x80e <LCD_vsend_cmd>
 8da:	af e1       	ldi	r26, 0x1F	; 31
 8dc:	be e4       	ldi	r27, 0x4E	; 78
 8de:	11 97       	sbiw	r26, 0x01	; 1
 8e0:	f1 f7       	brne	.-4      	; 0x8de <__stack+0x7f>
 8e2:	00 c0       	rjmp	.+0      	; 0x8e4 <__stack+0x85>
 8e4:	00 00       	nop
	_delay_ms(10);
	LCD_vsend_cmd(ENTRY_MODE); //entry mode
 8e6:	86 e0       	ldi	r24, 0x06	; 6
 8e8:	0e 94 07 04 	call	0x80e	; 0x80e <LCD_vsend_cmd>
 8ec:	8f ec       	ldi	r24, 0xCF	; 207
 8ee:	97 e0       	ldi	r25, 0x07	; 7
 8f0:	01 97       	sbiw	r24, 0x01	; 1
 8f2:	f1 f7       	brne	.-4      	; 0x8f0 <__stack+0x91>
 8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <__stack+0x97>
 8f6:	00 00       	nop
	LCD_vsend_cmd(CLR_SCREEN);//clear the screen
	_delay_ms(10);
	LCD_vsend_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1);
	#endif
}
 8f8:	08 95       	ret

000008fa <LCD_vclearscreen>:
	_delay_ms(1);
	#endif
}
void LCD_vclearscreen()
{
	LCD_vsend_cmd(CLR_SCREEN);
 8fa:	81 e0       	ldi	r24, 0x01	; 1
 8fc:	0e 94 07 04 	call	0x80e	; 0x80e <LCD_vsend_cmd>
 900:	8f e1       	ldi	r24, 0x1F	; 31
 902:	9e e4       	ldi	r25, 0x4E	; 78
 904:	01 97       	sbiw	r24, 0x01	; 1
 906:	f1 f7       	brne	.-4      	; 0x904 <LCD_vclearscreen+0xa>
 908:	00 c0       	rjmp	.+0      	; 0x90a <LCD_vclearscreen+0x10>
 90a:	00 00       	nop
	_delay_ms(10);

}
 90c:	08 95       	ret

0000090e <LCD_vmove_cursor>:

void LCD_vmove_cursor(unsigned char row , unsigned char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
 90e:	28 2f       	mov	r18, r24
 910:	21 50       	subi	r18, 0x01	; 1
 912:	22 30       	cpi	r18, 0x02	; 2
 914:	70 f4       	brcc	.+28     	; 0x932 <LCD_vmove_cursor+0x24>
 916:	61 31       	cpi	r22, 0x11	; 17
 918:	70 f4       	brcc	.+28     	; 0x936 <LCD_vmove_cursor+0x28>
 91a:	66 23       	and	r22, r22
 91c:	71 f0       	breq	.+28     	; 0x93a <LCD_vmove_cursor+0x2c>
	{
		data=0x80;
	}
	else if(row==1)
 91e:	81 30       	cpi	r24, 0x01	; 1
 920:	19 f4       	brne	.+6      	; 0x928 <LCD_vmove_cursor+0x1a>
	{
		data=0x80+coloumn-1 ;
 922:	96 2f       	mov	r25, r22
 924:	91 58       	subi	r25, 0x81	; 129
 926:	0a c0       	rjmp	.+20     	; 0x93c <LCD_vmove_cursor+0x2e>
	}
	else if (row==2)
 928:	82 30       	cpi	r24, 0x02	; 2
 92a:	41 f4       	brne	.+16     	; 0x93c <LCD_vmove_cursor+0x2e>
	{
		data=0xc0+coloumn-1;
 92c:	96 2f       	mov	r25, r22
 92e:	91 54       	subi	r25, 0x41	; 65
 930:	05 c0       	rjmp	.+10     	; 0x93c <LCD_vmove_cursor+0x2e>
void LCD_vmove_cursor(unsigned char row , unsigned char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
	{
		data=0x80;
 932:	90 e8       	ldi	r25, 0x80	; 128
 934:	03 c0       	rjmp	.+6      	; 0x93c <LCD_vmove_cursor+0x2e>
 936:	90 e8       	ldi	r25, 0x80	; 128
 938:	01 c0       	rjmp	.+2      	; 0x93c <LCD_vmove_cursor+0x2e>
 93a:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if (row==2)
	{
		data=0xc0+coloumn-1;
	}
	LCD_vsend_cmd(data);
 93c:	89 2f       	mov	r24, r25
 93e:	0e 94 07 04 	call	0x80e	; 0x80e <LCD_vsend_cmd>
 942:	8f ec       	ldi	r24, 0xCF	; 207
 944:	97 e0       	ldi	r25, 0x07	; 7
 946:	01 97       	sbiw	r24, 0x01	; 1
 948:	f1 f7       	brne	.-4      	; 0x946 <LCD_vmove_cursor+0x38>
 94a:	00 c0       	rjmp	.+0      	; 0x94c <LCD_vmove_cursor+0x3e>
 94c:	00 00       	nop
	_delay_ms(1);	
}
 94e:	08 95       	ret

00000950 <LCD_vSend_string>:
void LCD_vSend_string(char *data)
{
 950:	cf 93       	push	r28
 952:	df 93       	push	r29
 954:	ec 01       	movw	r28, r24
	while((*data)!='\0')
 956:	88 81       	ld	r24, Y
 958:	88 23       	and	r24, r24
 95a:	31 f0       	breq	.+12     	; 0x968 <LCD_vSend_string+0x18>
		data=0xc0+coloumn-1;
	}
	LCD_vsend_cmd(data);
	_delay_ms(1);	
}
void LCD_vSend_string(char *data)
 95c:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_vsend_char(*data);
 95e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <LCD_vsend_char>
	LCD_vsend_cmd(data);
	_delay_ms(1);	
}
void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
 962:	89 91       	ld	r24, Y+
 964:	88 23       	and	r24, r24
 966:	d9 f7       	brne	.-10     	; 0x95e <LCD_vSend_string+0xe>
	{
		LCD_vsend_char(*data);
		data++;
	}
}
 968:	df 91       	pop	r29
 96a:	cf 91       	pop	r28
 96c:	08 95       	ret

0000096e <vwrite_lownibble>:
void vwrite_lownibble(unsigned char port,unsigned char number)
{
 96e:	0f 93       	push	r16
 970:	1f 93       	push	r17
 972:	cf 93       	push	r28
 974:	c8 2f       	mov	r28, r24
 976:	06 2f       	mov	r16, r22
	DIO_vwrite_pin(port,0,READ_BIT(number,0));
 978:	46 2f       	mov	r20, r22
 97a:	41 70       	andi	r20, 0x01	; 1
 97c:	60 e0       	ldi	r22, 0x00	; 0
 97e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	DIO_vwrite_pin(port,1,READ_BIT(number,1));
 982:	10 e0       	ldi	r17, 0x00	; 0
 984:	a8 01       	movw	r20, r16
 986:	42 70       	andi	r20, 0x02	; 2
 988:	50 70       	andi	r21, 0x00	; 0
 98a:	55 95       	asr	r21
 98c:	47 95       	ror	r20
 98e:	8c 2f       	mov	r24, r28
 990:	61 e0       	ldi	r22, 0x01	; 1
 992:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	DIO_vwrite_pin(port,2,READ_BIT(number,2));
 996:	a8 01       	movw	r20, r16
 998:	44 70       	andi	r20, 0x04	; 4
 99a:	50 70       	andi	r21, 0x00	; 0
 99c:	55 95       	asr	r21
 99e:	47 95       	ror	r20
 9a0:	55 95       	asr	r21
 9a2:	47 95       	ror	r20
 9a4:	8c 2f       	mov	r24, r28
 9a6:	62 e0       	ldi	r22, 0x02	; 2
 9a8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	DIO_vwrite_pin(port,3,READ_BIT(number,3));
 9ac:	08 70       	andi	r16, 0x08	; 8
 9ae:	10 70       	andi	r17, 0x00	; 0
 9b0:	a8 01       	movw	r20, r16
 9b2:	55 95       	asr	r21
 9b4:	47 95       	ror	r20
 9b6:	55 95       	asr	r21
 9b8:	47 95       	ror	r20
 9ba:	55 95       	asr	r21
 9bc:	47 95       	ror	r20
 9be:	8c 2f       	mov	r24, r28
 9c0:	63 e0       	ldi	r22, 0x03	; 3
 9c2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
}
 9c6:	cf 91       	pop	r28
 9c8:	1f 91       	pop	r17
 9ca:	0f 91       	pop	r16
 9cc:	08 95       	ret

000009ce <vwrite_highnibble>:
void vwrite_highnibble(unsigned char port,unsigned char number)
{
 9ce:	0f 93       	push	r16
 9d0:	1f 93       	push	r17
 9d2:	cf 93       	push	r28
 9d4:	c8 2f       	mov	r28, r24
 9d6:	06 2f       	mov	r16, r22
	DIO_vwrite_pin(port,4,READ_BIT(number,0));
 9d8:	46 2f       	mov	r20, r22
 9da:	41 70       	andi	r20, 0x01	; 1
 9dc:	64 e0       	ldi	r22, 0x04	; 4
 9de:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	DIO_vwrite_pin(port,5,READ_BIT(number,1));
 9e2:	10 e0       	ldi	r17, 0x00	; 0
 9e4:	a8 01       	movw	r20, r16
 9e6:	42 70       	andi	r20, 0x02	; 2
 9e8:	50 70       	andi	r21, 0x00	; 0
 9ea:	55 95       	asr	r21
 9ec:	47 95       	ror	r20
 9ee:	8c 2f       	mov	r24, r28
 9f0:	65 e0       	ldi	r22, 0x05	; 5
 9f2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	DIO_vwrite_pin(port,6,READ_BIT(number,2));
 9f6:	a8 01       	movw	r20, r16
 9f8:	44 70       	andi	r20, 0x04	; 4
 9fa:	50 70       	andi	r21, 0x00	; 0
 9fc:	55 95       	asr	r21
 9fe:	47 95       	ror	r20
 a00:	55 95       	asr	r21
 a02:	47 95       	ror	r20
 a04:	8c 2f       	mov	r24, r28
 a06:	66 e0       	ldi	r22, 0x06	; 6
 a08:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
	DIO_vwrite_pin(port,7,READ_BIT(number,3));
 a0c:	08 70       	andi	r16, 0x08	; 8
 a0e:	10 70       	andi	r17, 0x00	; 0
 a10:	a8 01       	movw	r20, r16
 a12:	55 95       	asr	r21
 a14:	47 95       	ror	r20
 a16:	55 95       	asr	r21
 a18:	47 95       	ror	r20
 a1a:	55 95       	asr	r21
 a1c:	47 95       	ror	r20
 a1e:	8c 2f       	mov	r24, r28
 a20:	67 e0       	ldi	r22, 0x07	; 7
 a22:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DIO_vwrite_pin>
 a26:	cf 91       	pop	r28
 a28:	1f 91       	pop	r17
 a2a:	0f 91       	pop	r16
 a2c:	08 95       	ret

00000a2e <pushbutton_vinit>:
 *  Author: abdel
 */ 
#include "DIO_driver.h"
void pushbutton_vinit(unsigned char port,unsigned char pin)
{
	DIO_vset_pindir(port,pin,0);
 a2e:	40 e0       	ldi	r20, 0x00	; 0
 a30:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vset_pindir>
}
 a34:	08 95       	ret

00000a36 <pushbutton_u8read>:
char pushbutton_u8read(unsigned char port,unsigned char pin)
{
	unsigned char x;
	x=DIO_U8read_pin(port,pin);
 a36:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <DIO_U8read_pin>
	return x;
 a3a:	08 95       	ret

00000a3c <_exit>:
 a3c:	f8 94       	cli

00000a3e <__stop_program>:
 a3e:	ff cf       	rjmp	.-2      	; 0xa3e <__stop_program>
